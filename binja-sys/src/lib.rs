#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(improper_ctypes)]
/* automatically generated by rust-bindgen 0.56.0 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const PATH_SEP: &'static [u8; 2usize] = b"/\0";
pub const BN_MAX_INSTRUCTION_LENGTH: u32 = 256;
pub const BN_DEFAULT_NSTRUCTION_LENGTH: u32 = 16;
pub const BN_DEFAULT_OPCODE_DISPLAY: u32 = 8;
pub const BN_MAX_INSTRUCTION_BRANCHES: u32 = 3;
pub const BN_MAX_STORED_DATA_LENGTH: u32 = 1073741823;
pub const BN_NULL_ID: i32 = -1;
pub const BN_INVALID_REGISTER: u32 = 4294967295;
pub const BN_AUTOCOERCE_EXTERN_PTR: u32 = 4294967293;
pub const BN_NOCOERCE_EXTERN_PTR: u32 = 4294967294;
pub const BN_INVALID_OPERAND: u32 = 4294967295;
pub const BN_MAX_STRING_LENGTH: u32 = 128;
pub const LLVM_SVCS_CB_NOTE: u32 = 0;
pub const LLVM_SVCS_CB_WARNING: u32 = 1;
pub const LLVM_SVCS_CB_ERROR: u32 = 2;
pub const LLVM_SVCS_DIALECT_UNSPEC: u32 = 0;
pub const LLVM_SVCS_DIALECT_ATT: u32 = 1;
pub const LLVM_SVCS_DIALECT_INTEL: u32 = 2;
pub const LLVM_SVCS_CM_DEFAULT: u32 = 0;
pub const LLVM_SVCS_CM_SMALL: u32 = 1;
pub const LLVM_SVCS_CM_KERNEL: u32 = 2;
pub const LLVM_SVCS_CM_MEDIUM: u32 = 3;
pub const LLVM_SVCS_CM_LARGE: u32 = 4;
pub const LLVM_SVCS_RM_STATIC: u32 = 0;
pub const LLVM_SVCS_RM_PIC: u32 = 1;
pub const LLVM_SVCS_RM_DYNAMIC_NO_PIC: u32 = 2;
pub const BN_MAX_VARIABLE_OFFSET: u64 = 549755813887;
pub const BN_MAX_VARIABLE_INDEX: u32 = 1048575;
pub const BN_FULL_CONFIDENCE: u32 = 255;
pub const BN_MINIMUM_CONFIDENCE: u32 = 1;
pub const BN_HEURISTIC_CONFIDENCE: u32 = 192;
pub const DEFAULT_INTERNAL_NAMESPACE: &'static [u8; 20usize] = b"BNINTERNALNAMESPACE\0";
pub const DEFAULT_EXTERNAL_NAMESPACE: &'static [u8; 20usize] = b"BNEXTERNALNAMESPACE\0";
pub const MAX_RELOCATION_SIZE: u32 = 8;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = u64;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = u64;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = u64;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = u64;
pub type __off64_t = u64;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = u64;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = u64;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = u64;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = u64;
pub type __blkcnt_t = u64;
pub type __blkcnt64_t = u64;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = u64;
pub type __ssize_t = u64;
pub type __syscall_slong_t = u64;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = u64;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = u64;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = u64;
pub type int_fast32_t = u64;
pub type int_fast64_t = u64;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: u64,
    pub rem: u64,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> u64;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> u64;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> u64;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: u64) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> u64;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: u64,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: u64,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: u64,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: u64,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> u64;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> u64;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> u64;
}
extern "C" {
    pub fn mrand48() -> u64;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> u64;
}
extern "C" {
    pub fn srand48(__seedval: u64);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: u64,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: u64) -> u64;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: u64, __denom: u64) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: size_t) -> size_t;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: size_t) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(__key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub const BNPluginLoadOrder_EarlyPluginLoadOrder: BNPluginLoadOrder = 0;
pub const BNPluginLoadOrder_NormalPluginLoadOrder: BNPluginLoadOrder = 1;
pub const BNPluginLoadOrder_LatePluginLoadOrder: BNPluginLoadOrder = 2;
pub type BNPluginLoadOrder = ::std::os::raw::c_uint;
pub const PluginLoadStatus_NotAttemptedStatus: PluginLoadStatus = 0;
pub const PluginLoadStatus_LoadSucceededStatus: PluginLoadStatus = 1;
pub const PluginLoadStatus_LoadFaildStatus: PluginLoadStatus = 2;
pub type PluginLoadStatus = ::std::os::raw::c_uint;
pub type BNCorePluginInitFunction = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type BNCorePluginDependencyFunction = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDataBuffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryView {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryViewType {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryReader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryWriter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFileMetadata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTransform {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNArchitecture {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFunction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBasicBlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadProvider {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadInstance {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFlowGraph {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFlowGraphNode {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFlowGraphLayoutRequest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSymbol {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTemporaryFile {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLowLevelILFunction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMediumLevelILFunction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNHighLevelILFunction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNType {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeBuilder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeLibrary {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeLibraryMapping {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNStructure {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNStructureBuilder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTagType {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTag {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUser {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNamedTypeReference {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNEnumeration {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNEnumerationBuilder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCallingConvention {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNPlatform {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAnalysisCompletionEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDisassemblySettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSaveSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNScriptingProvider {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNScriptingInstance {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMainThreadAction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBackgroundTask {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRepository {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRepoPlugin {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRepositoryManager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMetadata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNReportCollection {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRelocation {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSegment {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSection {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRelocationHandler {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDataRenderer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDataRendererContainer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDisassemblyTextRenderer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLinearViewObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLinearViewCursor {
    _unused: [u8; 0],
}
pub type BNLoadPluginCallback = ::std::option::Option<
    unsafe extern "C" fn(
        repoPath: *const ::std::os::raw::c_char,
        pluginPath: *const ::std::os::raw::c_char,
        force: bool,
        ctx: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub const BNLogLevel_DebugLog: BNLogLevel = 0;
#[doc = "! Debug logging level, most verbose logging level"]
pub const BNLogLevel_InfoLog: BNLogLevel = 1;
#[doc = "! Information logging level, default logging level"]
pub const BNLogLevel_WarningLog: BNLogLevel = 2;
#[doc = "! Warning logging level, messages show with warning icon in the UI"]
pub const BNLogLevel_ErrorLog: BNLogLevel = 3;
#[doc = "! Error logging level, messages show with error icon in the UI"]
pub const BNLogLevel_AlertLog: BNLogLevel = 4;
#[doc = "! Console log levels"]
pub type BNLogLevel = ::std::os::raw::c_uint;
pub const BNEndianness_LittleEndian: BNEndianness = 0;
pub const BNEndianness_BigEndian: BNEndianness = 1;
pub type BNEndianness = ::std::os::raw::c_uint;
pub const BNModificationStatus_Original: BNModificationStatus = 0;
pub const BNModificationStatus_Changed: BNModificationStatus = 1;
pub const BNModificationStatus_Inserted: BNModificationStatus = 2;
pub type BNModificationStatus = ::std::os::raw::c_uint;
pub const BNTransformType_BinaryCodecTransform: BNTransformType = 0;
pub const BNTransformType_TextCodecTransform: BNTransformType = 1;
pub const BNTransformType_UnicodeCodecTransform: BNTransformType = 2;
pub const BNTransformType_DecodeTransform: BNTransformType = 3;
pub const BNTransformType_BinaryEncodeTransform: BNTransformType = 4;
pub const BNTransformType_TextEncodeTransform: BNTransformType = 5;
pub const BNTransformType_EncryptTransform: BNTransformType = 6;
pub const BNTransformType_InvertingTransform: BNTransformType = 7;
pub const BNTransformType_HashTransform: BNTransformType = 8;
pub type BNTransformType = ::std::os::raw::c_uint;
pub const BNBranchType_UnconditionalBranch: BNBranchType = 0;
pub const BNBranchType_FalseBranch: BNBranchType = 1;
pub const BNBranchType_TrueBranch: BNBranchType = 2;
pub const BNBranchType_CallDestination: BNBranchType = 3;
pub const BNBranchType_FunctionReturn: BNBranchType = 4;
pub const BNBranchType_SystemCall: BNBranchType = 5;
pub const BNBranchType_IndirectBranch: BNBranchType = 6;
pub const BNBranchType_ExceptionBranch: BNBranchType = 7;
pub const BNBranchType_UnresolvedBranch: BNBranchType = 127;
pub const BNBranchType_UserDefinedBranch: BNBranchType = 128;
pub type BNBranchType = ::std::os::raw::c_uint;
pub const BNInstructionTextTokenType_TextToken: BNInstructionTextTokenType = 0;
pub const BNInstructionTextTokenType_InstructionToken: BNInstructionTextTokenType = 1;
pub const BNInstructionTextTokenType_OperandSeparatorToken: BNInstructionTextTokenType = 2;
pub const BNInstructionTextTokenType_RegisterToken: BNInstructionTextTokenType = 3;
pub const BNInstructionTextTokenType_IntegerToken: BNInstructionTextTokenType = 4;
pub const BNInstructionTextTokenType_PossibleAddressToken: BNInstructionTextTokenType = 5;
pub const BNInstructionTextTokenType_BeginMemoryOperandToken: BNInstructionTextTokenType = 6;
pub const BNInstructionTextTokenType_EndMemoryOperandToken: BNInstructionTextTokenType = 7;
pub const BNInstructionTextTokenType_FloatingPointToken: BNInstructionTextTokenType = 8;
pub const BNInstructionTextTokenType_AnnotationToken: BNInstructionTextTokenType = 9;
pub const BNInstructionTextTokenType_CodeRelativeAddressToken: BNInstructionTextTokenType = 10;
pub const BNInstructionTextTokenType_ArgumentNameToken: BNInstructionTextTokenType = 11;
pub const BNInstructionTextTokenType_HexDumpByteValueToken: BNInstructionTextTokenType = 12;
pub const BNInstructionTextTokenType_HexDumpSkippedByteToken: BNInstructionTextTokenType = 13;
pub const BNInstructionTextTokenType_HexDumpInvalidByteToken: BNInstructionTextTokenType = 14;
pub const BNInstructionTextTokenType_HexDumpTextToken: BNInstructionTextTokenType = 15;
pub const BNInstructionTextTokenType_OpcodeToken: BNInstructionTextTokenType = 16;
pub const BNInstructionTextTokenType_StringToken: BNInstructionTextTokenType = 17;
pub const BNInstructionTextTokenType_CharacterConstantToken: BNInstructionTextTokenType = 18;
pub const BNInstructionTextTokenType_KeywordToken: BNInstructionTextTokenType = 19;
pub const BNInstructionTextTokenType_TypeNameToken: BNInstructionTextTokenType = 20;
pub const BNInstructionTextTokenType_FieldNameToken: BNInstructionTextTokenType = 21;
pub const BNInstructionTextTokenType_NameSpaceToken: BNInstructionTextTokenType = 22;
pub const BNInstructionTextTokenType_NameSpaceSeparatorToken: BNInstructionTextTokenType = 23;
pub const BNInstructionTextTokenType_TagToken: BNInstructionTextTokenType = 24;
pub const BNInstructionTextTokenType_StructOffsetToken: BNInstructionTextTokenType = 25;
pub const BNInstructionTextTokenType_StructOffsetByteValueToken: BNInstructionTextTokenType = 26;
pub const BNInstructionTextTokenType_StructureHexDumpTextToken: BNInstructionTextTokenType = 27;
pub const BNInstructionTextTokenType_GotoLabelToken: BNInstructionTextTokenType = 28;
pub const BNInstructionTextTokenType_CommentToken: BNInstructionTextTokenType = 29;
pub const BNInstructionTextTokenType_PossibleValueToken: BNInstructionTextTokenType = 30;
pub const BNInstructionTextTokenType_PossibleValueTypeToken: BNInstructionTextTokenType = 31;
pub const BNInstructionTextTokenType_ArrayIndexToken: BNInstructionTextTokenType = 32;
pub const BNInstructionTextTokenType_IndentationToken: BNInstructionTextTokenType = 33;
pub const BNInstructionTextTokenType_CodeSymbolToken: BNInstructionTextTokenType = 64;
pub const BNInstructionTextTokenType_DataSymbolToken: BNInstructionTextTokenType = 65;
pub const BNInstructionTextTokenType_LocalVariableToken: BNInstructionTextTokenType = 66;
pub const BNInstructionTextTokenType_ImportToken: BNInstructionTextTokenType = 67;
pub const BNInstructionTextTokenType_AddressDisplayToken: BNInstructionTextTokenType = 68;
pub const BNInstructionTextTokenType_IndirectImportToken: BNInstructionTextTokenType = 69;
pub const BNInstructionTextTokenType_ExternalSymbolToken: BNInstructionTextTokenType = 70;
pub type BNInstructionTextTokenType = ::std::os::raw::c_uint;
pub const BNInstructionTextTokenContext_NoTokenContext: BNInstructionTextTokenContext = 0;
pub const BNInstructionTextTokenContext_LocalVariableTokenContext: BNInstructionTextTokenContext =
    1;
pub const BNInstructionTextTokenContext_DataVariableTokenContext: BNInstructionTextTokenContext = 2;
pub const BNInstructionTextTokenContext_FunctionReturnTokenContext: BNInstructionTextTokenContext =
    3;
pub const BNInstructionTextTokenContext_InstructionAddressTokenContext:
    BNInstructionTextTokenContext = 4;
pub const BNInstructionTextTokenContext_ILInstructionIndexTokenContext:
    BNInstructionTextTokenContext = 5;
pub type BNInstructionTextTokenContext = ::std::os::raw::c_uint;
pub const BNLinearDisassemblyLineType_BlankLineType: BNLinearDisassemblyLineType = 0;
pub const BNLinearDisassemblyLineType_BasicLineType: BNLinearDisassemblyLineType = 1;
pub const BNLinearDisassemblyLineType_CodeDisassemblyLineType: BNLinearDisassemblyLineType = 2;
pub const BNLinearDisassemblyLineType_DataVariableLineType: BNLinearDisassemblyLineType = 3;
pub const BNLinearDisassemblyLineType_HexDumpLineType: BNLinearDisassemblyLineType = 4;
pub const BNLinearDisassemblyLineType_FunctionHeaderLineType: BNLinearDisassemblyLineType = 5;
pub const BNLinearDisassemblyLineType_FunctionHeaderStartLineType: BNLinearDisassemblyLineType = 6;
pub const BNLinearDisassemblyLineType_FunctionHeaderEndLineType: BNLinearDisassemblyLineType = 7;
pub const BNLinearDisassemblyLineType_FunctionContinuationLineType: BNLinearDisassemblyLineType = 8;
pub const BNLinearDisassemblyLineType_LocalVariableLineType: BNLinearDisassemblyLineType = 9;
pub const BNLinearDisassemblyLineType_LocalVariableListEndLineType: BNLinearDisassemblyLineType =
    10;
pub const BNLinearDisassemblyLineType_FunctionEndLineType: BNLinearDisassemblyLineType = 11;
pub const BNLinearDisassemblyLineType_NoteStartLineType: BNLinearDisassemblyLineType = 12;
pub const BNLinearDisassemblyLineType_NoteLineType: BNLinearDisassemblyLineType = 13;
pub const BNLinearDisassemblyLineType_NoteEndLineType: BNLinearDisassemblyLineType = 14;
pub const BNLinearDisassemblyLineType_SectionStartLineType: BNLinearDisassemblyLineType = 15;
pub const BNLinearDisassemblyLineType_SectionEndLineType: BNLinearDisassemblyLineType = 16;
pub const BNLinearDisassemblyLineType_SectionSeparatorLineType: BNLinearDisassemblyLineType = 17;
pub const BNLinearDisassemblyLineType_NonContiguousSeparatorLineType: BNLinearDisassemblyLineType =
    18;
pub const BNLinearDisassemblyLineType_AnalysisWarningLineType: BNLinearDisassemblyLineType = 19;
pub type BNLinearDisassemblyLineType = ::std::os::raw::c_uint;
pub const BNAnalysisWarningActionType_NoAnalysisWarningAction: BNAnalysisWarningActionType = 0;
pub const BNAnalysisWarningActionType_ForceAnalysisWarningAction: BNAnalysisWarningActionType = 1;
pub const BNAnalysisWarningActionType_ShowStackGraphWarningAction: BNAnalysisWarningActionType = 2;
pub type BNAnalysisWarningActionType = ::std::os::raw::c_uint;
pub const BNSymbolType_FunctionSymbol: BNSymbolType = 0;
pub const BNSymbolType_ImportAddressSymbol: BNSymbolType = 1;
pub const BNSymbolType_ImportedFunctionSymbol: BNSymbolType = 2;
pub const BNSymbolType_DataSymbol: BNSymbolType = 3;
pub const BNSymbolType_ImportedDataSymbol: BNSymbolType = 4;
pub const BNSymbolType_ExternalSymbol: BNSymbolType = 5;
pub const BNSymbolType_LibraryFunctionSymbol: BNSymbolType = 6;
pub type BNSymbolType = ::std::os::raw::c_uint;
pub const BNSymbolBinding_NoBinding: BNSymbolBinding = 0;
pub const BNSymbolBinding_LocalBinding: BNSymbolBinding = 1;
pub const BNSymbolBinding_GlobalBinding: BNSymbolBinding = 2;
pub const BNSymbolBinding_WeakBinding: BNSymbolBinding = 3;
pub type BNSymbolBinding = ::std::os::raw::c_uint;
pub const BNActionType_TemporaryAction: BNActionType = 0;
pub const BNActionType_DataModificationAction: BNActionType = 1;
pub const BNActionType_AnalysisAction: BNActionType = 2;
pub const BNActionType_DataModificationAndAnalysisAction: BNActionType = 3;
pub type BNActionType = ::std::os::raw::c_uint;
pub const BNLowLevelILOperation_LLIL_NOP: BNLowLevelILOperation = 0;
pub const BNLowLevelILOperation_LLIL_SET_REG: BNLowLevelILOperation = 1;
pub const BNLowLevelILOperation_LLIL_SET_REG_SPLIT: BNLowLevelILOperation = 2;
pub const BNLowLevelILOperation_LLIL_SET_FLAG: BNLowLevelILOperation = 3;
pub const BNLowLevelILOperation_LLIL_SET_REG_STACK_REL: BNLowLevelILOperation = 4;
pub const BNLowLevelILOperation_LLIL_REG_STACK_PUSH: BNLowLevelILOperation = 5;
pub const BNLowLevelILOperation_LLIL_LOAD: BNLowLevelILOperation = 6;
pub const BNLowLevelILOperation_LLIL_STORE: BNLowLevelILOperation = 7;
pub const BNLowLevelILOperation_LLIL_PUSH: BNLowLevelILOperation = 8;
pub const BNLowLevelILOperation_LLIL_POP: BNLowLevelILOperation = 9;
pub const BNLowLevelILOperation_LLIL_REG: BNLowLevelILOperation = 10;
pub const BNLowLevelILOperation_LLIL_REG_SPLIT: BNLowLevelILOperation = 11;
pub const BNLowLevelILOperation_LLIL_REG_STACK_REL: BNLowLevelILOperation = 12;
pub const BNLowLevelILOperation_LLIL_REG_STACK_POP: BNLowLevelILOperation = 13;
pub const BNLowLevelILOperation_LLIL_REG_STACK_FREE_REG: BNLowLevelILOperation = 14;
pub const BNLowLevelILOperation_LLIL_REG_STACK_FREE_REL: BNLowLevelILOperation = 15;
pub const BNLowLevelILOperation_LLIL_CONST: BNLowLevelILOperation = 16;
pub const BNLowLevelILOperation_LLIL_CONST_PTR: BNLowLevelILOperation = 17;
pub const BNLowLevelILOperation_LLIL_EXTERN_PTR: BNLowLevelILOperation = 18;
pub const BNLowLevelILOperation_LLIL_FLOAT_CONST: BNLowLevelILOperation = 19;
pub const BNLowLevelILOperation_LLIL_FLAG: BNLowLevelILOperation = 20;
pub const BNLowLevelILOperation_LLIL_FLAG_BIT: BNLowLevelILOperation = 21;
pub const BNLowLevelILOperation_LLIL_ADD: BNLowLevelILOperation = 22;
pub const BNLowLevelILOperation_LLIL_ADC: BNLowLevelILOperation = 23;
pub const BNLowLevelILOperation_LLIL_SUB: BNLowLevelILOperation = 24;
pub const BNLowLevelILOperation_LLIL_SBB: BNLowLevelILOperation = 25;
pub const BNLowLevelILOperation_LLIL_AND: BNLowLevelILOperation = 26;
pub const BNLowLevelILOperation_LLIL_OR: BNLowLevelILOperation = 27;
pub const BNLowLevelILOperation_LLIL_XOR: BNLowLevelILOperation = 28;
pub const BNLowLevelILOperation_LLIL_LSL: BNLowLevelILOperation = 29;
pub const BNLowLevelILOperation_LLIL_LSR: BNLowLevelILOperation = 30;
pub const BNLowLevelILOperation_LLIL_ASR: BNLowLevelILOperation = 31;
pub const BNLowLevelILOperation_LLIL_ROL: BNLowLevelILOperation = 32;
pub const BNLowLevelILOperation_LLIL_RLC: BNLowLevelILOperation = 33;
pub const BNLowLevelILOperation_LLIL_ROR: BNLowLevelILOperation = 34;
pub const BNLowLevelILOperation_LLIL_RRC: BNLowLevelILOperation = 35;
pub const BNLowLevelILOperation_LLIL_MUL: BNLowLevelILOperation = 36;
pub const BNLowLevelILOperation_LLIL_MULU_DP: BNLowLevelILOperation = 37;
pub const BNLowLevelILOperation_LLIL_MULS_DP: BNLowLevelILOperation = 38;
pub const BNLowLevelILOperation_LLIL_DIVU: BNLowLevelILOperation = 39;
pub const BNLowLevelILOperation_LLIL_DIVU_DP: BNLowLevelILOperation = 40;
pub const BNLowLevelILOperation_LLIL_DIVS: BNLowLevelILOperation = 41;
pub const BNLowLevelILOperation_LLIL_DIVS_DP: BNLowLevelILOperation = 42;
pub const BNLowLevelILOperation_LLIL_MODU: BNLowLevelILOperation = 43;
pub const BNLowLevelILOperation_LLIL_MODU_DP: BNLowLevelILOperation = 44;
pub const BNLowLevelILOperation_LLIL_MODS: BNLowLevelILOperation = 45;
pub const BNLowLevelILOperation_LLIL_MODS_DP: BNLowLevelILOperation = 46;
pub const BNLowLevelILOperation_LLIL_NEG: BNLowLevelILOperation = 47;
pub const BNLowLevelILOperation_LLIL_NOT: BNLowLevelILOperation = 48;
pub const BNLowLevelILOperation_LLIL_SX: BNLowLevelILOperation = 49;
pub const BNLowLevelILOperation_LLIL_ZX: BNLowLevelILOperation = 50;
pub const BNLowLevelILOperation_LLIL_LOW_PART: BNLowLevelILOperation = 51;
pub const BNLowLevelILOperation_LLIL_JUMP: BNLowLevelILOperation = 52;
pub const BNLowLevelILOperation_LLIL_JUMP_TO: BNLowLevelILOperation = 53;
pub const BNLowLevelILOperation_LLIL_CALL: BNLowLevelILOperation = 54;
pub const BNLowLevelILOperation_LLIL_CALL_STACK_ADJUST: BNLowLevelILOperation = 55;
pub const BNLowLevelILOperation_LLIL_TAILCALL: BNLowLevelILOperation = 56;
pub const BNLowLevelILOperation_LLIL_RET: BNLowLevelILOperation = 57;
pub const BNLowLevelILOperation_LLIL_NORET: BNLowLevelILOperation = 58;
pub const BNLowLevelILOperation_LLIL_IF: BNLowLevelILOperation = 59;
pub const BNLowLevelILOperation_LLIL_GOTO: BNLowLevelILOperation = 60;
pub const BNLowLevelILOperation_LLIL_FLAG_COND: BNLowLevelILOperation = 61;
pub const BNLowLevelILOperation_LLIL_FLAG_GROUP: BNLowLevelILOperation = 62;
pub const BNLowLevelILOperation_LLIL_CMP_E: BNLowLevelILOperation = 63;
pub const BNLowLevelILOperation_LLIL_CMP_NE: BNLowLevelILOperation = 64;
pub const BNLowLevelILOperation_LLIL_CMP_SLT: BNLowLevelILOperation = 65;
pub const BNLowLevelILOperation_LLIL_CMP_ULT: BNLowLevelILOperation = 66;
pub const BNLowLevelILOperation_LLIL_CMP_SLE: BNLowLevelILOperation = 67;
pub const BNLowLevelILOperation_LLIL_CMP_ULE: BNLowLevelILOperation = 68;
pub const BNLowLevelILOperation_LLIL_CMP_SGE: BNLowLevelILOperation = 69;
pub const BNLowLevelILOperation_LLIL_CMP_UGE: BNLowLevelILOperation = 70;
pub const BNLowLevelILOperation_LLIL_CMP_SGT: BNLowLevelILOperation = 71;
pub const BNLowLevelILOperation_LLIL_CMP_UGT: BNLowLevelILOperation = 72;
pub const BNLowLevelILOperation_LLIL_TEST_BIT: BNLowLevelILOperation = 73;
pub const BNLowLevelILOperation_LLIL_BOOL_TO_INT: BNLowLevelILOperation = 74;
pub const BNLowLevelILOperation_LLIL_ADD_OVERFLOW: BNLowLevelILOperation = 75;
pub const BNLowLevelILOperation_LLIL_SYSCALL: BNLowLevelILOperation = 76;
pub const BNLowLevelILOperation_LLIL_BP: BNLowLevelILOperation = 77;
pub const BNLowLevelILOperation_LLIL_TRAP: BNLowLevelILOperation = 78;
pub const BNLowLevelILOperation_LLIL_INTRINSIC: BNLowLevelILOperation = 79;
pub const BNLowLevelILOperation_LLIL_UNDEF: BNLowLevelILOperation = 80;
pub const BNLowLevelILOperation_LLIL_UNIMPL: BNLowLevelILOperation = 81;
pub const BNLowLevelILOperation_LLIL_UNIMPL_MEM: BNLowLevelILOperation = 82;
pub const BNLowLevelILOperation_LLIL_FADD: BNLowLevelILOperation = 83;
pub const BNLowLevelILOperation_LLIL_FSUB: BNLowLevelILOperation = 84;
pub const BNLowLevelILOperation_LLIL_FMUL: BNLowLevelILOperation = 85;
pub const BNLowLevelILOperation_LLIL_FDIV: BNLowLevelILOperation = 86;
pub const BNLowLevelILOperation_LLIL_FSQRT: BNLowLevelILOperation = 87;
pub const BNLowLevelILOperation_LLIL_FNEG: BNLowLevelILOperation = 88;
pub const BNLowLevelILOperation_LLIL_FABS: BNLowLevelILOperation = 89;
pub const BNLowLevelILOperation_LLIL_FLOAT_TO_INT: BNLowLevelILOperation = 90;
pub const BNLowLevelILOperation_LLIL_INT_TO_FLOAT: BNLowLevelILOperation = 91;
pub const BNLowLevelILOperation_LLIL_FLOAT_CONV: BNLowLevelILOperation = 92;
pub const BNLowLevelILOperation_LLIL_ROUND_TO_INT: BNLowLevelILOperation = 93;
pub const BNLowLevelILOperation_LLIL_FLOOR: BNLowLevelILOperation = 94;
pub const BNLowLevelILOperation_LLIL_CEIL: BNLowLevelILOperation = 95;
pub const BNLowLevelILOperation_LLIL_FTRUNC: BNLowLevelILOperation = 96;
pub const BNLowLevelILOperation_LLIL_FCMP_E: BNLowLevelILOperation = 97;
pub const BNLowLevelILOperation_LLIL_FCMP_NE: BNLowLevelILOperation = 98;
pub const BNLowLevelILOperation_LLIL_FCMP_LT: BNLowLevelILOperation = 99;
pub const BNLowLevelILOperation_LLIL_FCMP_LE: BNLowLevelILOperation = 100;
pub const BNLowLevelILOperation_LLIL_FCMP_GE: BNLowLevelILOperation = 101;
pub const BNLowLevelILOperation_LLIL_FCMP_GT: BNLowLevelILOperation = 102;
pub const BNLowLevelILOperation_LLIL_FCMP_O: BNLowLevelILOperation = 103;
pub const BNLowLevelILOperation_LLIL_FCMP_UO: BNLowLevelILOperation = 104;
pub const BNLowLevelILOperation_LLIL_SET_REG_SSA: BNLowLevelILOperation = 105;
pub const BNLowLevelILOperation_LLIL_SET_REG_SSA_PARTIAL: BNLowLevelILOperation = 106;
pub const BNLowLevelILOperation_LLIL_SET_REG_SPLIT_SSA: BNLowLevelILOperation = 107;
pub const BNLowLevelILOperation_LLIL_SET_REG_STACK_REL_SSA: BNLowLevelILOperation = 108;
pub const BNLowLevelILOperation_LLIL_SET_REG_STACK_ABS_SSA: BNLowLevelILOperation = 109;
pub const BNLowLevelILOperation_LLIL_REG_SPLIT_DEST_SSA: BNLowLevelILOperation = 110;
pub const BNLowLevelILOperation_LLIL_REG_STACK_DEST_SSA: BNLowLevelILOperation = 111;
pub const BNLowLevelILOperation_LLIL_REG_SSA: BNLowLevelILOperation = 112;
pub const BNLowLevelILOperation_LLIL_REG_SSA_PARTIAL: BNLowLevelILOperation = 113;
pub const BNLowLevelILOperation_LLIL_REG_SPLIT_SSA: BNLowLevelILOperation = 114;
pub const BNLowLevelILOperation_LLIL_REG_STACK_REL_SSA: BNLowLevelILOperation = 115;
pub const BNLowLevelILOperation_LLIL_REG_STACK_ABS_SSA: BNLowLevelILOperation = 116;
pub const BNLowLevelILOperation_LLIL_REG_STACK_FREE_REL_SSA: BNLowLevelILOperation = 117;
pub const BNLowLevelILOperation_LLIL_REG_STACK_FREE_ABS_SSA: BNLowLevelILOperation = 118;
pub const BNLowLevelILOperation_LLIL_SET_FLAG_SSA: BNLowLevelILOperation = 119;
pub const BNLowLevelILOperation_LLIL_FLAG_SSA: BNLowLevelILOperation = 120;
pub const BNLowLevelILOperation_LLIL_FLAG_BIT_SSA: BNLowLevelILOperation = 121;
pub const BNLowLevelILOperation_LLIL_CALL_SSA: BNLowLevelILOperation = 122;
pub const BNLowLevelILOperation_LLIL_SYSCALL_SSA: BNLowLevelILOperation = 123;
pub const BNLowLevelILOperation_LLIL_TAILCALL_SSA: BNLowLevelILOperation = 124;
pub const BNLowLevelILOperation_LLIL_CALL_PARAM: BNLowLevelILOperation = 125;
pub const BNLowLevelILOperation_LLIL_CALL_STACK_SSA: BNLowLevelILOperation = 126;
pub const BNLowLevelILOperation_LLIL_CALL_OUTPUT_SSA: BNLowLevelILOperation = 127;
pub const BNLowLevelILOperation_LLIL_LOAD_SSA: BNLowLevelILOperation = 128;
pub const BNLowLevelILOperation_LLIL_STORE_SSA: BNLowLevelILOperation = 129;
pub const BNLowLevelILOperation_LLIL_INTRINSIC_SSA: BNLowLevelILOperation = 130;
pub const BNLowLevelILOperation_LLIL_REG_PHI: BNLowLevelILOperation = 131;
pub const BNLowLevelILOperation_LLIL_REG_STACK_PHI: BNLowLevelILOperation = 132;
pub const BNLowLevelILOperation_LLIL_FLAG_PHI: BNLowLevelILOperation = 133;
pub const BNLowLevelILOperation_LLIL_MEM_PHI: BNLowLevelILOperation = 134;
pub type BNLowLevelILOperation = ::std::os::raw::c_uint;
pub const BNLowLevelILFlagCondition_LLFC_E: BNLowLevelILFlagCondition = 0;
pub const BNLowLevelILFlagCondition_LLFC_NE: BNLowLevelILFlagCondition = 1;
pub const BNLowLevelILFlagCondition_LLFC_SLT: BNLowLevelILFlagCondition = 2;
pub const BNLowLevelILFlagCondition_LLFC_ULT: BNLowLevelILFlagCondition = 3;
pub const BNLowLevelILFlagCondition_LLFC_SLE: BNLowLevelILFlagCondition = 4;
pub const BNLowLevelILFlagCondition_LLFC_ULE: BNLowLevelILFlagCondition = 5;
pub const BNLowLevelILFlagCondition_LLFC_SGE: BNLowLevelILFlagCondition = 6;
pub const BNLowLevelILFlagCondition_LLFC_UGE: BNLowLevelILFlagCondition = 7;
pub const BNLowLevelILFlagCondition_LLFC_SGT: BNLowLevelILFlagCondition = 8;
pub const BNLowLevelILFlagCondition_LLFC_UGT: BNLowLevelILFlagCondition = 9;
pub const BNLowLevelILFlagCondition_LLFC_NEG: BNLowLevelILFlagCondition = 10;
pub const BNLowLevelILFlagCondition_LLFC_POS: BNLowLevelILFlagCondition = 11;
pub const BNLowLevelILFlagCondition_LLFC_O: BNLowLevelILFlagCondition = 12;
pub const BNLowLevelILFlagCondition_LLFC_NO: BNLowLevelILFlagCondition = 13;
pub const BNLowLevelILFlagCondition_LLFC_FE: BNLowLevelILFlagCondition = 14;
pub const BNLowLevelILFlagCondition_LLFC_FNE: BNLowLevelILFlagCondition = 15;
pub const BNLowLevelILFlagCondition_LLFC_FLT: BNLowLevelILFlagCondition = 16;
pub const BNLowLevelILFlagCondition_LLFC_FLE: BNLowLevelILFlagCondition = 17;
pub const BNLowLevelILFlagCondition_LLFC_FGE: BNLowLevelILFlagCondition = 18;
pub const BNLowLevelILFlagCondition_LLFC_FGT: BNLowLevelILFlagCondition = 19;
pub const BNLowLevelILFlagCondition_LLFC_FO: BNLowLevelILFlagCondition = 20;
pub const BNLowLevelILFlagCondition_LLFC_FUO: BNLowLevelILFlagCondition = 21;
pub type BNLowLevelILFlagCondition = ::std::os::raw::c_uint;
pub const BNFlagRole_SpecialFlagRole: BNFlagRole = 0;
pub const BNFlagRole_ZeroFlagRole: BNFlagRole = 1;
pub const BNFlagRole_PositiveSignFlagRole: BNFlagRole = 2;
pub const BNFlagRole_NegativeSignFlagRole: BNFlagRole = 3;
pub const BNFlagRole_CarryFlagRole: BNFlagRole = 4;
pub const BNFlagRole_OverflowFlagRole: BNFlagRole = 5;
pub const BNFlagRole_HalfCarryFlagRole: BNFlagRole = 6;
pub const BNFlagRole_EvenParityFlagRole: BNFlagRole = 7;
pub const BNFlagRole_OddParityFlagRole: BNFlagRole = 8;
pub const BNFlagRole_OrderedFlagRole: BNFlagRole = 9;
pub const BNFlagRole_UnorderedFlagRole: BNFlagRole = 10;
pub type BNFlagRole = ::std::os::raw::c_uint;
pub const BNFunctionGraphType_NormalFunctionGraph: BNFunctionGraphType = 0;
pub const BNFunctionGraphType_LowLevelILFunctionGraph: BNFunctionGraphType = 1;
pub const BNFunctionGraphType_LiftedILFunctionGraph: BNFunctionGraphType = 2;
pub const BNFunctionGraphType_LowLevelILSSAFormFunctionGraph: BNFunctionGraphType = 3;
pub const BNFunctionGraphType_MediumLevelILFunctionGraph: BNFunctionGraphType = 4;
pub const BNFunctionGraphType_MediumLevelILSSAFormFunctionGraph: BNFunctionGraphType = 5;
pub const BNFunctionGraphType_MappedMediumLevelILFunctionGraph: BNFunctionGraphType = 6;
pub const BNFunctionGraphType_MappedMediumLevelILSSAFormFunctionGraph: BNFunctionGraphType = 7;
pub const BNFunctionGraphType_HighLevelILFunctionGraph: BNFunctionGraphType = 8;
pub const BNFunctionGraphType_HighLevelILSSAFormFunctionGraph: BNFunctionGraphType = 9;
pub type BNFunctionGraphType = ::std::os::raw::c_uint;
pub const BNDisassemblyOption_ShowAddress: BNDisassemblyOption = 0;
pub const BNDisassemblyOption_ShowOpcode: BNDisassemblyOption = 1;
pub const BNDisassemblyOption_ExpandLongOpcode: BNDisassemblyOption = 2;
pub const BNDisassemblyOption_ShowVariablesAtTopOfGraph: BNDisassemblyOption = 3;
pub const BNDisassemblyOption_ShowVariableTypesWhenAssigned: BNDisassemblyOption = 4;
pub const BNDisassemblyOption_ShowDefaultRegisterTypes: BNDisassemblyOption = 5;
pub const BNDisassemblyOption_ShowCallParameterNames: BNDisassemblyOption = 6;
pub const BNDisassemblyOption_ShowRegisterHighlight: BNDisassemblyOption = 7;
pub const BNDisassemblyOption_GroupLinearDisassemblyFunctions: BNDisassemblyOption = 64;
pub const BNDisassemblyOption_HighLevelILLinearDisassembly: BNDisassemblyOption = 65;
pub const BNDisassemblyOption_WaitForIL: BNDisassemblyOption = 66;
pub const BNDisassemblyOption_ShowFlagUsage: BNDisassemblyOption = 128;
pub type BNDisassemblyOption = ::std::os::raw::c_uint;
pub const BNTypeClass_VoidTypeClass: BNTypeClass = 0;
pub const BNTypeClass_BoolTypeClass: BNTypeClass = 1;
pub const BNTypeClass_IntegerTypeClass: BNTypeClass = 2;
pub const BNTypeClass_FloatTypeClass: BNTypeClass = 3;
pub const BNTypeClass_StructureTypeClass: BNTypeClass = 4;
pub const BNTypeClass_EnumerationTypeClass: BNTypeClass = 5;
pub const BNTypeClass_PointerTypeClass: BNTypeClass = 6;
pub const BNTypeClass_ArrayTypeClass: BNTypeClass = 7;
pub const BNTypeClass_FunctionTypeClass: BNTypeClass = 8;
pub const BNTypeClass_VarArgsTypeClass: BNTypeClass = 9;
pub const BNTypeClass_ValueTypeClass: BNTypeClass = 10;
pub const BNTypeClass_NamedTypeReferenceClass: BNTypeClass = 11;
pub const BNTypeClass_WideCharTypeClass: BNTypeClass = 12;
pub type BNTypeClass = ::std::os::raw::c_uint;
pub const BNNamedTypeReferenceClass_UnknownNamedTypeClass: BNNamedTypeReferenceClass = 0;
pub const BNNamedTypeReferenceClass_TypedefNamedTypeClass: BNNamedTypeReferenceClass = 1;
pub const BNNamedTypeReferenceClass_ClassNamedTypeClass: BNNamedTypeReferenceClass = 2;
pub const BNNamedTypeReferenceClass_StructNamedTypeClass: BNNamedTypeReferenceClass = 3;
pub const BNNamedTypeReferenceClass_UnionNamedTypeClass: BNNamedTypeReferenceClass = 4;
pub const BNNamedTypeReferenceClass_EnumNamedTypeClass: BNNamedTypeReferenceClass = 5;
pub type BNNamedTypeReferenceClass = ::std::os::raw::c_uint;
pub const BNStructureType_ClassStructureType: BNStructureType = 0;
pub const BNStructureType_StructStructureType: BNStructureType = 1;
pub const BNStructureType_UnionStructureType: BNStructureType = 2;
pub type BNStructureType = ::std::os::raw::c_uint;
pub const BNMemberScope_NoScope: BNMemberScope = 0;
pub const BNMemberScope_StaticScope: BNMemberScope = 1;
pub const BNMemberScope_VirtualScope: BNMemberScope = 2;
pub const BNMemberScope_ThunkScope: BNMemberScope = 3;
pub const BNMemberScope_FriendScope: BNMemberScope = 4;
pub type BNMemberScope = ::std::os::raw::c_uint;
pub const BNMemberAccess_NoAccess: BNMemberAccess = 0;
pub const BNMemberAccess_PrivateAccess: BNMemberAccess = 1;
pub const BNMemberAccess_ProtectedAccess: BNMemberAccess = 2;
pub const BNMemberAccess_PublicAccess: BNMemberAccess = 3;
pub type BNMemberAccess = ::std::os::raw::c_uint;
pub const BNReferenceType_PointerReferenceType: BNReferenceType = 0;
pub const BNReferenceType_ReferenceReferenceType: BNReferenceType = 1;
pub const BNReferenceType_RValueReferenceType: BNReferenceType = 2;
pub const BNReferenceType_NoReference: BNReferenceType = 3;
pub type BNReferenceType = ::std::os::raw::c_uint;
pub const BNPointerSuffix_Ptr64Suffix: BNPointerSuffix = 0;
pub const BNPointerSuffix_UnalignedSuffix: BNPointerSuffix = 1;
pub const BNPointerSuffix_RestrictSuffix: BNPointerSuffix = 2;
pub const BNPointerSuffix_ReferenceSuffix: BNPointerSuffix = 3;
pub const BNPointerSuffix_LvalueSuffix: BNPointerSuffix = 4;
pub type BNPointerSuffix = ::std::os::raw::c_uint;
pub const BNNameType_NoNameType: BNNameType = 0;
pub const BNNameType_ConstructorNameType: BNNameType = 1;
pub const BNNameType_DestructorNameType: BNNameType = 2;
pub const BNNameType_OperatorNewNameType: BNNameType = 3;
pub const BNNameType_OperatorDeleteNameType: BNNameType = 4;
pub const BNNameType_OperatorAssignNameType: BNNameType = 5;
pub const BNNameType_OperatorRightShiftNameType: BNNameType = 6;
pub const BNNameType_OperatorLeftShiftNameType: BNNameType = 7;
pub const BNNameType_OperatorNotNameType: BNNameType = 8;
pub const BNNameType_OperatorEqualNameType: BNNameType = 9;
pub const BNNameType_OperatorNotEqualNameType: BNNameType = 10;
pub const BNNameType_OperatorArrayNameType: BNNameType = 11;
pub const BNNameType_OperatorArrowNameType: BNNameType = 12;
pub const BNNameType_OperatorStarNameType: BNNameType = 13;
pub const BNNameType_OperatorIncrementNameType: BNNameType = 14;
pub const BNNameType_OperatorDecrementNameType: BNNameType = 15;
pub const BNNameType_OperatorMinusNameType: BNNameType = 16;
pub const BNNameType_OperatorPlusNameType: BNNameType = 17;
pub const BNNameType_OperatorBitAndNameType: BNNameType = 18;
pub const BNNameType_OperatorArrowStarNameType: BNNameType = 19;
pub const BNNameType_OperatorDivideNameType: BNNameType = 20;
pub const BNNameType_OperatorModulusNameType: BNNameType = 21;
pub const BNNameType_OperatorLessThanNameType: BNNameType = 22;
pub const BNNameType_OperatorLessThanEqualNameType: BNNameType = 23;
pub const BNNameType_OperatorGreaterThanNameType: BNNameType = 24;
pub const BNNameType_OperatorGreaterThanEqualNameType: BNNameType = 25;
pub const BNNameType_OperatorCommaNameType: BNNameType = 26;
pub const BNNameType_OperatorParenthesesNameType: BNNameType = 27;
pub const BNNameType_OperatorTildeNameType: BNNameType = 28;
pub const BNNameType_OperatorXorNameType: BNNameType = 29;
pub const BNNameType_OperatorBitOrNameType: BNNameType = 30;
pub const BNNameType_OperatorLogicalAndNameType: BNNameType = 31;
pub const BNNameType_OperatorLogicalOrNameType: BNNameType = 32;
pub const BNNameType_OperatorStarEqualNameType: BNNameType = 33;
pub const BNNameType_OperatorPlusEqualNameType: BNNameType = 34;
pub const BNNameType_OperatorMinusEqualNameType: BNNameType = 35;
pub const BNNameType_OperatorDivideEqualNameType: BNNameType = 36;
pub const BNNameType_OperatorModulusEqualNameType: BNNameType = 37;
pub const BNNameType_OperatorRightShiftEqualNameType: BNNameType = 38;
pub const BNNameType_OperatorLeftShiftEqualNameType: BNNameType = 39;
pub const BNNameType_OperatorAndEqualNameType: BNNameType = 40;
pub const BNNameType_OperatorOrEqualNameType: BNNameType = 41;
pub const BNNameType_OperatorXorEqualNameType: BNNameType = 42;
pub const BNNameType_VFTableNameType: BNNameType = 43;
pub const BNNameType_VBTableNameType: BNNameType = 44;
pub const BNNameType_VCallNameType: BNNameType = 45;
pub const BNNameType_TypeofNameType: BNNameType = 46;
pub const BNNameType_LocalStaticGuardNameType: BNNameType = 47;
pub const BNNameType_StringNameType: BNNameType = 48;
pub const BNNameType_VBaseDestructorNameType: BNNameType = 49;
pub const BNNameType_VectorDeletingDestructorNameType: BNNameType = 50;
pub const BNNameType_DefaultConstructorClosureNameType: BNNameType = 51;
pub const BNNameType_ScalarDeletingDestructorNameType: BNNameType = 52;
pub const BNNameType_VectorConstructorIteratorNameType: BNNameType = 53;
pub const BNNameType_VectorDestructorIteratorNameType: BNNameType = 54;
pub const BNNameType_VectorVBaseConstructorIteratoreNameType: BNNameType = 55;
pub const BNNameType_VirtualDisplacementMapNameType: BNNameType = 56;
pub const BNNameType_EHVectorConstructorIteratorNameType: BNNameType = 57;
pub const BNNameType_EHVectorDestructorIteratorNameType: BNNameType = 58;
pub const BNNameType_EHVectorVBaseConstructorIteratorNameType: BNNameType = 59;
pub const BNNameType_CopyConstructorClosureNameType: BNNameType = 60;
pub const BNNameType_UDTReturningNameType: BNNameType = 61;
pub const BNNameType_LocalVFTableNameType: BNNameType = 62;
pub const BNNameType_LocalVFTableConstructorClosureNameType: BNNameType = 63;
pub const BNNameType_OperatorNewArrayNameType: BNNameType = 64;
pub const BNNameType_OperatorDeleteArrayNameType: BNNameType = 65;
pub const BNNameType_PlacementDeleteClosureNameType: BNNameType = 66;
pub const BNNameType_PlacementDeleteClosureArrayNameType: BNNameType = 67;
pub const BNNameType_OperatorReturnTypeNameType: BNNameType = 68;
pub const BNNameType_RttiTypeDescriptor: BNNameType = 69;
pub const BNNameType_RttiBaseClassDescriptor: BNNameType = 70;
pub const BNNameType_RttiBaseClassArray: BNNameType = 71;
pub const BNNameType_RttiClassHeirarchyDescriptor: BNNameType = 72;
pub const BNNameType_RttiCompleteObjectLocator: BNNameType = 73;
pub const BNNameType_OperatorUnaryMinusNameType: BNNameType = 74;
pub const BNNameType_OperatorUnaryPlusNameType: BNNameType = 75;
pub const BNNameType_OperatorUnaryBitAndNameType: BNNameType = 76;
pub const BNNameType_OperatorUnaryStarNameType: BNNameType = 77;
pub type BNNameType = ::std::os::raw::c_uint;
pub const BNCallingConventionName_NoCallingConvention: BNCallingConventionName = 0;
pub const BNCallingConventionName_CdeclCallingConvention: BNCallingConventionName = 1;
pub const BNCallingConventionName_PascalCallingConvention: BNCallingConventionName = 2;
pub const BNCallingConventionName_ThisCallCallingConvention: BNCallingConventionName = 3;
pub const BNCallingConventionName_STDCallCallingConvention: BNCallingConventionName = 4;
pub const BNCallingConventionName_FastcallCallingConvention: BNCallingConventionName = 5;
pub const BNCallingConventionName_CLRCallCallingConvention: BNCallingConventionName = 6;
pub const BNCallingConventionName_EabiCallCallingConvention: BNCallingConventionName = 7;
pub const BNCallingConventionName_VectorCallCallingConvention: BNCallingConventionName = 8;
pub type BNCallingConventionName = ::std::os::raw::c_uint;
pub const BNStringType_AsciiString: BNStringType = 0;
pub const BNStringType_Utf16String: BNStringType = 1;
pub const BNStringType_Utf32String: BNStringType = 2;
pub const BNStringType_Utf8String: BNStringType = 3;
pub type BNStringType = ::std::os::raw::c_uint;
pub const BNIntegerDisplayType_DefaultIntegerDisplayType: BNIntegerDisplayType = 0;
pub const BNIntegerDisplayType_BinaryDisplayType: BNIntegerDisplayType = 1;
pub const BNIntegerDisplayType_SignedOctalDisplayType: BNIntegerDisplayType = 2;
pub const BNIntegerDisplayType_UnsignedOctalDisplayType: BNIntegerDisplayType = 3;
pub const BNIntegerDisplayType_SignedDecimalDisplayType: BNIntegerDisplayType = 4;
pub const BNIntegerDisplayType_UnsignedDecimalDisplayType: BNIntegerDisplayType = 5;
pub const BNIntegerDisplayType_SignedHexadecimalDisplayType: BNIntegerDisplayType = 6;
pub const BNIntegerDisplayType_UnsignedHexadecimalDisplayType: BNIntegerDisplayType = 7;
pub const BNIntegerDisplayType_CharacterConstantDisplayType: BNIntegerDisplayType = 8;
pub const BNIntegerDisplayType_PointerDisplayType: BNIntegerDisplayType = 9;
pub const BNIntegerDisplayType_FloatDisplayType: BNIntegerDisplayType = 10;
pub const BNIntegerDisplayType_DoubleDisplayType: BNIntegerDisplayType = 11;
pub type BNIntegerDisplayType = ::std::os::raw::c_uint;
pub const BNFlowGraphOption_FlowGraphUsesBlockHighlights: BNFlowGraphOption = 0;
pub const BNFlowGraphOption_FlowGraphUsesInstructionHighlights: BNFlowGraphOption = 1;
pub const BNFlowGraphOption_FlowGraphIncludesUserComments: BNFlowGraphOption = 2;
pub const BNFlowGraphOption_FlowGraphAllowsPatching: BNFlowGraphOption = 3;
pub const BNFlowGraphOption_FlowGraphAllowsInlineInstructionEditing: BNFlowGraphOption = 4;
pub const BNFlowGraphOption_FlowGraphShowsSecondaryRegisterHighlighting: BNFlowGraphOption = 5;
pub type BNFlowGraphOption = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLowLevelILInstruction {
    pub operation: BNLowLevelILOperation,
    pub size: size_t,
    pub flags: u32,
    pub sourceOperand: u32,
    pub operands: [u64; 4usize],
    pub address: u64,
}
#[test]
fn bindgen_test_layout_BNLowLevelILInstruction() {
    assert_eq!(
        ::std::mem::size_of::<BNLowLevelILInstruction>(),
        64usize,
        concat!("Size of: ", stringify!(BNLowLevelILInstruction))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLowLevelILInstruction>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLowLevelILInstruction))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNLowLevelILInstruction>())).operation as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLowLevelILInstruction>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLowLevelILInstruction>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNLowLevelILInstruction>())).sourceOperand as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(sourceOperand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNLowLevelILInstruction>())).operands as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(operands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLowLevelILInstruction>())).address as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLowLevelILLabel {
    pub resolved: bool,
    pub ref_: size_t,
    pub operand: size_t,
}
#[test]
fn bindgen_test_layout_BNLowLevelILLabel() {
    assert_eq!(
        ::std::mem::size_of::<BNLowLevelILLabel>(),
        24usize,
        concat!("Size of: ", stringify!(BNLowLevelILLabel))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLowLevelILLabel>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLowLevelILLabel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLowLevelILLabel>())).resolved as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILLabel),
            "::",
            stringify!(resolved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLowLevelILLabel>())).ref_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILLabel),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLowLevelILLabel>())).operand as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILLabel),
            "::",
            stringify!(operand)
        )
    );
}
pub const BNImplicitRegisterExtend_NoExtend: BNImplicitRegisterExtend = 0;
pub const BNImplicitRegisterExtend_ZeroExtendToFullWidth: BNImplicitRegisterExtend = 1;
pub const BNImplicitRegisterExtend_SignExtendToFullWidth: BNImplicitRegisterExtend = 2;
pub type BNImplicitRegisterExtend = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterInfo {
    pub fullWidthRegister: u32,
    pub offset: size_t,
    pub size: size_t,
    pub extend: BNImplicitRegisterExtend,
}
#[test]
fn bindgen_test_layout_BNRegisterInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNRegisterInfo>(),
        32usize,
        concat!("Size of: ", stringify!(BNRegisterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRegisterInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterInfo>())).fullWidthRegister as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterInfo),
            "::",
            stringify!(fullWidthRegister)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRegisterInfo>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRegisterInfo>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterInfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRegisterInfo>())).extend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterInfo),
            "::",
            stringify!(extend)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterStackInfo {
    pub firstStorageReg: u32,
    pub firstTopRelativeReg: u32,
    pub storageCount: u32,
    pub topRelativeCount: u32,
    pub stackTopReg: u32,
}
#[test]
fn bindgen_test_layout_BNRegisterStackInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNRegisterStackInfo>(),
        20usize,
        concat!("Size of: ", stringify!(BNRegisterStackInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterStackInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(BNRegisterStackInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterStackInfo>())).firstStorageReg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackInfo),
            "::",
            stringify!(firstStorageReg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterStackInfo>())).firstTopRelativeReg as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackInfo),
            "::",
            stringify!(firstTopRelativeReg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterStackInfo>())).storageCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackInfo),
            "::",
            stringify!(storageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterStackInfo>())).topRelativeCount as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackInfo),
            "::",
            stringify!(topRelativeCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRegisterStackInfo>())).stackTopReg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackInfo),
            "::",
            stringify!(stackTopReg)
        )
    );
}
pub const BNRegisterValueType_UndeterminedValue: BNRegisterValueType = 0;
pub const BNRegisterValueType_EntryValue: BNRegisterValueType = 1;
pub const BNRegisterValueType_ConstantValue: BNRegisterValueType = 2;
pub const BNRegisterValueType_ConstantPointerValue: BNRegisterValueType = 3;
pub const BNRegisterValueType_ExternalPointerValue: BNRegisterValueType = 4;
pub const BNRegisterValueType_StackFrameOffset: BNRegisterValueType = 5;
pub const BNRegisterValueType_ReturnAddressValue: BNRegisterValueType = 6;
pub const BNRegisterValueType_ImportedAddressValue: BNRegisterValueType = 7;
pub const BNRegisterValueType_SignedRangeValue: BNRegisterValueType = 8;
pub const BNRegisterValueType_UnsignedRangeValue: BNRegisterValueType = 9;
pub const BNRegisterValueType_LookupTableValue: BNRegisterValueType = 10;
pub const BNRegisterValueType_InSetOfValues: BNRegisterValueType = 11;
pub const BNRegisterValueType_NotInSetOfValues: BNRegisterValueType = 12;
pub type BNRegisterValueType = ::std::os::raw::c_uint;
pub const BNDataFlowQueryOption_FromAddressesInLookupTableQueryOption: BNDataFlowQueryOption = 0;
pub type BNDataFlowQueryOption = ::std::os::raw::c_uint;
pub const BNPluginOrigin_OfficialPluginOrigin: BNPluginOrigin = 0;
pub const BNPluginOrigin_CommunityPluginOrigin: BNPluginOrigin = 1;
pub const BNPluginOrigin_OtherPluginOrigin: BNPluginOrigin = 2;
pub type BNPluginOrigin = ::std::os::raw::c_uint;
pub const BNPluginStatus_NotInstalledPluginStatus: BNPluginStatus = 0;
pub const BNPluginStatus_InstalledPluginStatus: BNPluginStatus = 1;
pub const BNPluginStatus_EnabledPluginStatus: BNPluginStatus = 2;
pub const BNPluginStatus_UpdateAvailablePluginStatus: BNPluginStatus = 16;
pub const BNPluginStatus_DeletePendingPluginStatus: BNPluginStatus = 32;
pub const BNPluginStatus_UpdatePendingPluginStatus: BNPluginStatus = 64;
pub const BNPluginStatus_DisablePendingPluginStatus: BNPluginStatus = 128;
pub const BNPluginStatus_PendingRestartPluginStatus: BNPluginStatus = 512;
pub const BNPluginStatus_BeingUpdatedPluginStatus: BNPluginStatus = 1024;
pub const BNPluginStatus_BeingDeletedPluginStatus: BNPluginStatus = 2048;
pub type BNPluginStatus = ::std::os::raw::c_uint;
pub const BNPluginType_CorePluginType: BNPluginType = 0;
pub const BNPluginType_UiPluginType: BNPluginType = 1;
pub const BNPluginType_ArchitecturePluginType: BNPluginType = 2;
pub const BNPluginType_BinaryViewPluginType: BNPluginType = 3;
pub const BNPluginType_HelperPluginType: BNPluginType = 4;
pub type BNPluginType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLookupTableEntry {
    pub fromValues: *mut i64,
    pub fromCount: size_t,
    pub toValue: i64,
}
#[test]
fn bindgen_test_layout_BNLookupTableEntry() {
    assert_eq!(
        ::std::mem::size_of::<BNLookupTableEntry>(),
        24usize,
        concat!("Size of: ", stringify!(BNLookupTableEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLookupTableEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLookupTableEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLookupTableEntry>())).fromValues as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLookupTableEntry),
            "::",
            stringify!(fromValues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLookupTableEntry>())).fromCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLookupTableEntry),
            "::",
            stringify!(fromCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLookupTableEntry>())).toValue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLookupTableEntry),
            "::",
            stringify!(toValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterValue {
    pub state: BNRegisterValueType,
    pub value: i64,
    pub offset: i64,
}
#[test]
fn bindgen_test_layout_BNRegisterValue() {
    assert_eq!(
        ::std::mem::size_of::<BNRegisterValue>(),
        24usize,
        concat!("Size of: ", stringify!(BNRegisterValue))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterValue>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRegisterValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRegisterValue>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValue),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRegisterValue>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValue),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRegisterValue>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValue),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterValueWithConfidence {
    pub value: BNRegisterValue,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNRegisterValueWithConfidence() {
    assert_eq!(
        ::std::mem::size_of::<BNRegisterValueWithConfidence>(),
        32usize,
        concat!("Size of: ", stringify!(BNRegisterValueWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterValueWithConfidence>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRegisterValueWithConfidence))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterValueWithConfidence>())).value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValueWithConfidence),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterValueWithConfidence>())).confidence as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValueWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNValueRange {
    pub start: u64,
    pub end: u64,
    pub step: u64,
}
#[test]
fn bindgen_test_layout_BNValueRange() {
    assert_eq!(
        ::std::mem::size_of::<BNValueRange>(),
        24usize,
        concat!("Size of: ", stringify!(BNValueRange))
    );
    assert_eq!(
        ::std::mem::align_of::<BNValueRange>(),
        8usize,
        concat!("Alignment of ", stringify!(BNValueRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNValueRange>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNValueRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNValueRange>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNValueRange),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNValueRange>())).step as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNValueRange),
            "::",
            stringify!(step)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNPossibleValueSet {
    pub state: BNRegisterValueType,
    pub value: i64,
    pub offset: i64,
    pub ranges: *mut BNValueRange,
    pub valueSet: *mut i64,
    pub table: *mut BNLookupTableEntry,
    pub count: size_t,
}
#[test]
fn bindgen_test_layout_BNPossibleValueSet() {
    assert_eq!(
        ::std::mem::size_of::<BNPossibleValueSet>(),
        56usize,
        concat!("Size of: ", stringify!(BNPossibleValueSet))
    );
    assert_eq!(
        ::std::mem::align_of::<BNPossibleValueSet>(),
        8usize,
        concat!("Alignment of ", stringify!(BNPossibleValueSet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPossibleValueSet>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPossibleValueSet>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPossibleValueSet>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPossibleValueSet>())).ranges as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(ranges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPossibleValueSet>())).valueSet as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(valueSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPossibleValueSet>())).table as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPossibleValueSet>())).count as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterOrConstant {
    pub constant: bool,
    pub reg: u32,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_BNRegisterOrConstant() {
    assert_eq!(
        ::std::mem::size_of::<BNRegisterOrConstant>(),
        16usize,
        concat!("Size of: ", stringify!(BNRegisterOrConstant))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterOrConstant>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRegisterOrConstant))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRegisterOrConstant>())).constant as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterOrConstant),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRegisterOrConstant>())).reg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterOrConstant),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRegisterOrConstant>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterOrConstant),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDataVariable {
    pub address: u64,
    pub type_: *mut BNType,
    pub autoDiscovered: bool,
    pub typeConfidence: u8,
}
#[test]
fn bindgen_test_layout_BNDataVariable() {
    assert_eq!(
        ::std::mem::size_of::<BNDataVariable>(),
        24usize,
        concat!("Size of: ", stringify!(BNDataVariable))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDataVariable>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDataVariable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDataVariable>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariable),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDataVariable>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariable),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDataVariable>())).autoDiscovered as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariable),
            "::",
            stringify!(autoDiscovered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDataVariable>())).typeConfidence as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariable),
            "::",
            stringify!(typeConfidence)
        )
    );
}
pub const BNMediumLevelILOperation_MLIL_NOP: BNMediumLevelILOperation = 0;
pub const BNMediumLevelILOperation_MLIL_SET_VAR: BNMediumLevelILOperation = 1;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_FIELD: BNMediumLevelILOperation = 2;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_SPLIT: BNMediumLevelILOperation = 3;
pub const BNMediumLevelILOperation_MLIL_LOAD: BNMediumLevelILOperation = 4;
pub const BNMediumLevelILOperation_MLIL_LOAD_STRUCT: BNMediumLevelILOperation = 5;
pub const BNMediumLevelILOperation_MLIL_STORE: BNMediumLevelILOperation = 6;
pub const BNMediumLevelILOperation_MLIL_STORE_STRUCT: BNMediumLevelILOperation = 7;
pub const BNMediumLevelILOperation_MLIL_VAR: BNMediumLevelILOperation = 8;
pub const BNMediumLevelILOperation_MLIL_VAR_FIELD: BNMediumLevelILOperation = 9;
pub const BNMediumLevelILOperation_MLIL_VAR_SPLIT: BNMediumLevelILOperation = 10;
pub const BNMediumLevelILOperation_MLIL_ADDRESS_OF: BNMediumLevelILOperation = 11;
pub const BNMediumLevelILOperation_MLIL_ADDRESS_OF_FIELD: BNMediumLevelILOperation = 12;
pub const BNMediumLevelILOperation_MLIL_CONST: BNMediumLevelILOperation = 13;
pub const BNMediumLevelILOperation_MLIL_CONST_PTR: BNMediumLevelILOperation = 14;
pub const BNMediumLevelILOperation_MLIL_EXTERN_PTR: BNMediumLevelILOperation = 15;
pub const BNMediumLevelILOperation_MLIL_FLOAT_CONST: BNMediumLevelILOperation = 16;
pub const BNMediumLevelILOperation_MLIL_IMPORT: BNMediumLevelILOperation = 17;
pub const BNMediumLevelILOperation_MLIL_ADD: BNMediumLevelILOperation = 18;
pub const BNMediumLevelILOperation_MLIL_ADC: BNMediumLevelILOperation = 19;
pub const BNMediumLevelILOperation_MLIL_SUB: BNMediumLevelILOperation = 20;
pub const BNMediumLevelILOperation_MLIL_SBB: BNMediumLevelILOperation = 21;
pub const BNMediumLevelILOperation_MLIL_AND: BNMediumLevelILOperation = 22;
pub const BNMediumLevelILOperation_MLIL_OR: BNMediumLevelILOperation = 23;
pub const BNMediumLevelILOperation_MLIL_XOR: BNMediumLevelILOperation = 24;
pub const BNMediumLevelILOperation_MLIL_LSL: BNMediumLevelILOperation = 25;
pub const BNMediumLevelILOperation_MLIL_LSR: BNMediumLevelILOperation = 26;
pub const BNMediumLevelILOperation_MLIL_ASR: BNMediumLevelILOperation = 27;
pub const BNMediumLevelILOperation_MLIL_ROL: BNMediumLevelILOperation = 28;
pub const BNMediumLevelILOperation_MLIL_RLC: BNMediumLevelILOperation = 29;
pub const BNMediumLevelILOperation_MLIL_ROR: BNMediumLevelILOperation = 30;
pub const BNMediumLevelILOperation_MLIL_RRC: BNMediumLevelILOperation = 31;
pub const BNMediumLevelILOperation_MLIL_MUL: BNMediumLevelILOperation = 32;
pub const BNMediumLevelILOperation_MLIL_MULU_DP: BNMediumLevelILOperation = 33;
pub const BNMediumLevelILOperation_MLIL_MULS_DP: BNMediumLevelILOperation = 34;
pub const BNMediumLevelILOperation_MLIL_DIVU: BNMediumLevelILOperation = 35;
pub const BNMediumLevelILOperation_MLIL_DIVU_DP: BNMediumLevelILOperation = 36;
pub const BNMediumLevelILOperation_MLIL_DIVS: BNMediumLevelILOperation = 37;
pub const BNMediumLevelILOperation_MLIL_DIVS_DP: BNMediumLevelILOperation = 38;
pub const BNMediumLevelILOperation_MLIL_MODU: BNMediumLevelILOperation = 39;
pub const BNMediumLevelILOperation_MLIL_MODU_DP: BNMediumLevelILOperation = 40;
pub const BNMediumLevelILOperation_MLIL_MODS: BNMediumLevelILOperation = 41;
pub const BNMediumLevelILOperation_MLIL_MODS_DP: BNMediumLevelILOperation = 42;
pub const BNMediumLevelILOperation_MLIL_NEG: BNMediumLevelILOperation = 43;
pub const BNMediumLevelILOperation_MLIL_NOT: BNMediumLevelILOperation = 44;
pub const BNMediumLevelILOperation_MLIL_SX: BNMediumLevelILOperation = 45;
pub const BNMediumLevelILOperation_MLIL_ZX: BNMediumLevelILOperation = 46;
pub const BNMediumLevelILOperation_MLIL_LOW_PART: BNMediumLevelILOperation = 47;
pub const BNMediumLevelILOperation_MLIL_JUMP: BNMediumLevelILOperation = 48;
pub const BNMediumLevelILOperation_MLIL_JUMP_TO: BNMediumLevelILOperation = 49;
pub const BNMediumLevelILOperation_MLIL_RET_HINT: BNMediumLevelILOperation = 50;
pub const BNMediumLevelILOperation_MLIL_CALL: BNMediumLevelILOperation = 51;
pub const BNMediumLevelILOperation_MLIL_CALL_UNTYPED: BNMediumLevelILOperation = 52;
pub const BNMediumLevelILOperation_MLIL_CALL_OUTPUT: BNMediumLevelILOperation = 53;
pub const BNMediumLevelILOperation_MLIL_CALL_PARAM: BNMediumLevelILOperation = 54;
pub const BNMediumLevelILOperation_MLIL_RET: BNMediumLevelILOperation = 55;
pub const BNMediumLevelILOperation_MLIL_NORET: BNMediumLevelILOperation = 56;
pub const BNMediumLevelILOperation_MLIL_IF: BNMediumLevelILOperation = 57;
pub const BNMediumLevelILOperation_MLIL_GOTO: BNMediumLevelILOperation = 58;
pub const BNMediumLevelILOperation_MLIL_CMP_E: BNMediumLevelILOperation = 59;
pub const BNMediumLevelILOperation_MLIL_CMP_NE: BNMediumLevelILOperation = 60;
pub const BNMediumLevelILOperation_MLIL_CMP_SLT: BNMediumLevelILOperation = 61;
pub const BNMediumLevelILOperation_MLIL_CMP_ULT: BNMediumLevelILOperation = 62;
pub const BNMediumLevelILOperation_MLIL_CMP_SLE: BNMediumLevelILOperation = 63;
pub const BNMediumLevelILOperation_MLIL_CMP_ULE: BNMediumLevelILOperation = 64;
pub const BNMediumLevelILOperation_MLIL_CMP_SGE: BNMediumLevelILOperation = 65;
pub const BNMediumLevelILOperation_MLIL_CMP_UGE: BNMediumLevelILOperation = 66;
pub const BNMediumLevelILOperation_MLIL_CMP_SGT: BNMediumLevelILOperation = 67;
pub const BNMediumLevelILOperation_MLIL_CMP_UGT: BNMediumLevelILOperation = 68;
pub const BNMediumLevelILOperation_MLIL_TEST_BIT: BNMediumLevelILOperation = 69;
pub const BNMediumLevelILOperation_MLIL_BOOL_TO_INT: BNMediumLevelILOperation = 70;
pub const BNMediumLevelILOperation_MLIL_ADD_OVERFLOW: BNMediumLevelILOperation = 71;
pub const BNMediumLevelILOperation_MLIL_SYSCALL: BNMediumLevelILOperation = 72;
pub const BNMediumLevelILOperation_MLIL_SYSCALL_UNTYPED: BNMediumLevelILOperation = 73;
pub const BNMediumLevelILOperation_MLIL_TAILCALL: BNMediumLevelILOperation = 74;
pub const BNMediumLevelILOperation_MLIL_TAILCALL_UNTYPED: BNMediumLevelILOperation = 75;
pub const BNMediumLevelILOperation_MLIL_INTRINSIC: BNMediumLevelILOperation = 76;
pub const BNMediumLevelILOperation_MLIL_FREE_VAR_SLOT: BNMediumLevelILOperation = 77;
pub const BNMediumLevelILOperation_MLIL_BP: BNMediumLevelILOperation = 78;
pub const BNMediumLevelILOperation_MLIL_TRAP: BNMediumLevelILOperation = 79;
pub const BNMediumLevelILOperation_MLIL_UNDEF: BNMediumLevelILOperation = 80;
pub const BNMediumLevelILOperation_MLIL_UNIMPL: BNMediumLevelILOperation = 81;
pub const BNMediumLevelILOperation_MLIL_UNIMPL_MEM: BNMediumLevelILOperation = 82;
pub const BNMediumLevelILOperation_MLIL_FADD: BNMediumLevelILOperation = 83;
pub const BNMediumLevelILOperation_MLIL_FSUB: BNMediumLevelILOperation = 84;
pub const BNMediumLevelILOperation_MLIL_FMUL: BNMediumLevelILOperation = 85;
pub const BNMediumLevelILOperation_MLIL_FDIV: BNMediumLevelILOperation = 86;
pub const BNMediumLevelILOperation_MLIL_FSQRT: BNMediumLevelILOperation = 87;
pub const BNMediumLevelILOperation_MLIL_FNEG: BNMediumLevelILOperation = 88;
pub const BNMediumLevelILOperation_MLIL_FABS: BNMediumLevelILOperation = 89;
pub const BNMediumLevelILOperation_MLIL_FLOAT_TO_INT: BNMediumLevelILOperation = 90;
pub const BNMediumLevelILOperation_MLIL_INT_TO_FLOAT: BNMediumLevelILOperation = 91;
pub const BNMediumLevelILOperation_MLIL_FLOAT_CONV: BNMediumLevelILOperation = 92;
pub const BNMediumLevelILOperation_MLIL_ROUND_TO_INT: BNMediumLevelILOperation = 93;
pub const BNMediumLevelILOperation_MLIL_FLOOR: BNMediumLevelILOperation = 94;
pub const BNMediumLevelILOperation_MLIL_CEIL: BNMediumLevelILOperation = 95;
pub const BNMediumLevelILOperation_MLIL_FTRUNC: BNMediumLevelILOperation = 96;
pub const BNMediumLevelILOperation_MLIL_FCMP_E: BNMediumLevelILOperation = 97;
pub const BNMediumLevelILOperation_MLIL_FCMP_NE: BNMediumLevelILOperation = 98;
pub const BNMediumLevelILOperation_MLIL_FCMP_LT: BNMediumLevelILOperation = 99;
pub const BNMediumLevelILOperation_MLIL_FCMP_LE: BNMediumLevelILOperation = 100;
pub const BNMediumLevelILOperation_MLIL_FCMP_GE: BNMediumLevelILOperation = 101;
pub const BNMediumLevelILOperation_MLIL_FCMP_GT: BNMediumLevelILOperation = 102;
pub const BNMediumLevelILOperation_MLIL_FCMP_O: BNMediumLevelILOperation = 103;
pub const BNMediumLevelILOperation_MLIL_FCMP_UO: BNMediumLevelILOperation = 104;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_SSA: BNMediumLevelILOperation = 105;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_SSA_FIELD: BNMediumLevelILOperation = 106;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_SPLIT_SSA: BNMediumLevelILOperation = 107;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_ALIASED: BNMediumLevelILOperation = 108;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_ALIASED_FIELD: BNMediumLevelILOperation = 109;
pub const BNMediumLevelILOperation_MLIL_VAR_SSA: BNMediumLevelILOperation = 110;
pub const BNMediumLevelILOperation_MLIL_VAR_SSA_FIELD: BNMediumLevelILOperation = 111;
pub const BNMediumLevelILOperation_MLIL_VAR_ALIASED: BNMediumLevelILOperation = 112;
pub const BNMediumLevelILOperation_MLIL_VAR_ALIASED_FIELD: BNMediumLevelILOperation = 113;
pub const BNMediumLevelILOperation_MLIL_VAR_SPLIT_SSA: BNMediumLevelILOperation = 114;
pub const BNMediumLevelILOperation_MLIL_CALL_SSA: BNMediumLevelILOperation = 115;
pub const BNMediumLevelILOperation_MLIL_CALL_UNTYPED_SSA: BNMediumLevelILOperation = 116;
pub const BNMediumLevelILOperation_MLIL_SYSCALL_SSA: BNMediumLevelILOperation = 117;
pub const BNMediumLevelILOperation_MLIL_SYSCALL_UNTYPED_SSA: BNMediumLevelILOperation = 118;
pub const BNMediumLevelILOperation_MLIL_TAILCALL_SSA: BNMediumLevelILOperation = 119;
pub const BNMediumLevelILOperation_MLIL_TAILCALL_UNTYPED_SSA: BNMediumLevelILOperation = 120;
pub const BNMediumLevelILOperation_MLIL_CALL_PARAM_SSA: BNMediumLevelILOperation = 121;
pub const BNMediumLevelILOperation_MLIL_CALL_OUTPUT_SSA: BNMediumLevelILOperation = 122;
pub const BNMediumLevelILOperation_MLIL_LOAD_SSA: BNMediumLevelILOperation = 123;
pub const BNMediumLevelILOperation_MLIL_LOAD_STRUCT_SSA: BNMediumLevelILOperation = 124;
pub const BNMediumLevelILOperation_MLIL_STORE_SSA: BNMediumLevelILOperation = 125;
pub const BNMediumLevelILOperation_MLIL_STORE_STRUCT_SSA: BNMediumLevelILOperation = 126;
pub const BNMediumLevelILOperation_MLIL_INTRINSIC_SSA: BNMediumLevelILOperation = 127;
pub const BNMediumLevelILOperation_MLIL_FREE_VAR_SLOT_SSA: BNMediumLevelILOperation = 128;
pub const BNMediumLevelILOperation_MLIL_VAR_PHI: BNMediumLevelILOperation = 129;
pub const BNMediumLevelILOperation_MLIL_MEM_PHI: BNMediumLevelILOperation = 130;
pub type BNMediumLevelILOperation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMediumLevelILInstruction {
    pub operation: BNMediumLevelILOperation,
    pub sourceOperand: u32,
    pub size: size_t,
    pub operands: [u64; 5usize],
    pub address: u64,
}
#[test]
fn bindgen_test_layout_BNMediumLevelILInstruction() {
    assert_eq!(
        ::std::mem::size_of::<BNMediumLevelILInstruction>(),
        64usize,
        concat!("Size of: ", stringify!(BNMediumLevelILInstruction))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMediumLevelILInstruction>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMediumLevelILInstruction))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNMediumLevelILInstruction>())).operation as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNMediumLevelILInstruction>())).sourceOperand as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(sourceOperand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMediumLevelILInstruction>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNMediumLevelILInstruction>())).operands as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(operands)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNMediumLevelILInstruction>())).address as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMediumLevelILLabel {
    pub resolved: bool,
    pub ref_: size_t,
    pub operand: size_t,
}
#[test]
fn bindgen_test_layout_BNMediumLevelILLabel() {
    assert_eq!(
        ::std::mem::size_of::<BNMediumLevelILLabel>(),
        24usize,
        concat!("Size of: ", stringify!(BNMediumLevelILLabel))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMediumLevelILLabel>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMediumLevelILLabel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMediumLevelILLabel>())).resolved as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILLabel),
            "::",
            stringify!(resolved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMediumLevelILLabel>())).ref_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILLabel),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMediumLevelILLabel>())).operand as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILLabel),
            "::",
            stringify!(operand)
        )
    );
}
pub const BNVariableSourceType_StackVariableSourceType: BNVariableSourceType = 0;
pub const BNVariableSourceType_RegisterVariableSourceType: BNVariableSourceType = 1;
pub const BNVariableSourceType_FlagVariableSourceType: BNVariableSourceType = 2;
pub type BNVariableSourceType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNVariable {
    pub type_: BNVariableSourceType,
    pub index: u32,
    pub storage: i64,
}
#[test]
fn bindgen_test_layout_BNVariable() {
    assert_eq!(
        ::std::mem::size_of::<BNVariable>(),
        16usize,
        concat!("Size of: ", stringify!(BNVariable))
    );
    assert_eq!(
        ::std::mem::align_of::<BNVariable>(),
        8usize,
        concat!("Alignment of ", stringify!(BNVariable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNVariable>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariable),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNVariable>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariable),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNVariable>())).storage as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariable),
            "::",
            stringify!(storage)
        )
    );
}
pub const BNHighLevelILOperation_HLIL_NOP: BNHighLevelILOperation = 0;
pub const BNHighLevelILOperation_HLIL_BLOCK: BNHighLevelILOperation = 1;
pub const BNHighLevelILOperation_HLIL_IF: BNHighLevelILOperation = 2;
pub const BNHighLevelILOperation_HLIL_WHILE: BNHighLevelILOperation = 3;
pub const BNHighLevelILOperation_HLIL_DO_WHILE: BNHighLevelILOperation = 4;
pub const BNHighLevelILOperation_HLIL_FOR: BNHighLevelILOperation = 5;
pub const BNHighLevelILOperation_HLIL_SWITCH: BNHighLevelILOperation = 6;
pub const BNHighLevelILOperation_HLIL_CASE: BNHighLevelILOperation = 7;
pub const BNHighLevelILOperation_HLIL_BREAK: BNHighLevelILOperation = 8;
pub const BNHighLevelILOperation_HLIL_CONTINUE: BNHighLevelILOperation = 9;
pub const BNHighLevelILOperation_HLIL_JUMP: BNHighLevelILOperation = 10;
pub const BNHighLevelILOperation_HLIL_RET: BNHighLevelILOperation = 11;
pub const BNHighLevelILOperation_HLIL_NORET: BNHighLevelILOperation = 12;
pub const BNHighLevelILOperation_HLIL_GOTO: BNHighLevelILOperation = 13;
pub const BNHighLevelILOperation_HLIL_LABEL: BNHighLevelILOperation = 14;
pub const BNHighLevelILOperation_HLIL_VAR_DECLARE: BNHighLevelILOperation = 15;
pub const BNHighLevelILOperation_HLIL_VAR_INIT: BNHighLevelILOperation = 16;
pub const BNHighLevelILOperation_HLIL_ASSIGN: BNHighLevelILOperation = 17;
pub const BNHighLevelILOperation_HLIL_ASSIGN_UNPACK: BNHighLevelILOperation = 18;
pub const BNHighLevelILOperation_HLIL_VAR: BNHighLevelILOperation = 19;
pub const BNHighLevelILOperation_HLIL_STRUCT_FIELD: BNHighLevelILOperation = 20;
pub const BNHighLevelILOperation_HLIL_ARRAY_INDEX: BNHighLevelILOperation = 21;
pub const BNHighLevelILOperation_HLIL_SPLIT: BNHighLevelILOperation = 22;
pub const BNHighLevelILOperation_HLIL_DEREF: BNHighLevelILOperation = 23;
pub const BNHighLevelILOperation_HLIL_DEREF_FIELD: BNHighLevelILOperation = 24;
pub const BNHighLevelILOperation_HLIL_ADDRESS_OF: BNHighLevelILOperation = 25;
pub const BNHighLevelILOperation_HLIL_CONST: BNHighLevelILOperation = 26;
pub const BNHighLevelILOperation_HLIL_CONST_PTR: BNHighLevelILOperation = 27;
pub const BNHighLevelILOperation_HLIL_EXTERN_PTR: BNHighLevelILOperation = 28;
pub const BNHighLevelILOperation_HLIL_FLOAT_CONST: BNHighLevelILOperation = 29;
pub const BNHighLevelILOperation_HLIL_IMPORT: BNHighLevelILOperation = 30;
pub const BNHighLevelILOperation_HLIL_ADD: BNHighLevelILOperation = 31;
pub const BNHighLevelILOperation_HLIL_ADC: BNHighLevelILOperation = 32;
pub const BNHighLevelILOperation_HLIL_SUB: BNHighLevelILOperation = 33;
pub const BNHighLevelILOperation_HLIL_SBB: BNHighLevelILOperation = 34;
pub const BNHighLevelILOperation_HLIL_AND: BNHighLevelILOperation = 35;
pub const BNHighLevelILOperation_HLIL_OR: BNHighLevelILOperation = 36;
pub const BNHighLevelILOperation_HLIL_XOR: BNHighLevelILOperation = 37;
pub const BNHighLevelILOperation_HLIL_LSL: BNHighLevelILOperation = 38;
pub const BNHighLevelILOperation_HLIL_LSR: BNHighLevelILOperation = 39;
pub const BNHighLevelILOperation_HLIL_ASR: BNHighLevelILOperation = 40;
pub const BNHighLevelILOperation_HLIL_ROL: BNHighLevelILOperation = 41;
pub const BNHighLevelILOperation_HLIL_RLC: BNHighLevelILOperation = 42;
pub const BNHighLevelILOperation_HLIL_ROR: BNHighLevelILOperation = 43;
pub const BNHighLevelILOperation_HLIL_RRC: BNHighLevelILOperation = 44;
pub const BNHighLevelILOperation_HLIL_MUL: BNHighLevelILOperation = 45;
pub const BNHighLevelILOperation_HLIL_MULU_DP: BNHighLevelILOperation = 46;
pub const BNHighLevelILOperation_HLIL_MULS_DP: BNHighLevelILOperation = 47;
pub const BNHighLevelILOperation_HLIL_DIVU: BNHighLevelILOperation = 48;
pub const BNHighLevelILOperation_HLIL_DIVU_DP: BNHighLevelILOperation = 49;
pub const BNHighLevelILOperation_HLIL_DIVS: BNHighLevelILOperation = 50;
pub const BNHighLevelILOperation_HLIL_DIVS_DP: BNHighLevelILOperation = 51;
pub const BNHighLevelILOperation_HLIL_MODU: BNHighLevelILOperation = 52;
pub const BNHighLevelILOperation_HLIL_MODU_DP: BNHighLevelILOperation = 53;
pub const BNHighLevelILOperation_HLIL_MODS: BNHighLevelILOperation = 54;
pub const BNHighLevelILOperation_HLIL_MODS_DP: BNHighLevelILOperation = 55;
pub const BNHighLevelILOperation_HLIL_NEG: BNHighLevelILOperation = 56;
pub const BNHighLevelILOperation_HLIL_NOT: BNHighLevelILOperation = 57;
pub const BNHighLevelILOperation_HLIL_SX: BNHighLevelILOperation = 58;
pub const BNHighLevelILOperation_HLIL_ZX: BNHighLevelILOperation = 59;
pub const BNHighLevelILOperation_HLIL_LOW_PART: BNHighLevelILOperation = 60;
pub const BNHighLevelILOperation_HLIL_CALL: BNHighLevelILOperation = 61;
pub const BNHighLevelILOperation_HLIL_CMP_E: BNHighLevelILOperation = 62;
pub const BNHighLevelILOperation_HLIL_CMP_NE: BNHighLevelILOperation = 63;
pub const BNHighLevelILOperation_HLIL_CMP_SLT: BNHighLevelILOperation = 64;
pub const BNHighLevelILOperation_HLIL_CMP_ULT: BNHighLevelILOperation = 65;
pub const BNHighLevelILOperation_HLIL_CMP_SLE: BNHighLevelILOperation = 66;
pub const BNHighLevelILOperation_HLIL_CMP_ULE: BNHighLevelILOperation = 67;
pub const BNHighLevelILOperation_HLIL_CMP_SGE: BNHighLevelILOperation = 68;
pub const BNHighLevelILOperation_HLIL_CMP_UGE: BNHighLevelILOperation = 69;
pub const BNHighLevelILOperation_HLIL_CMP_SGT: BNHighLevelILOperation = 70;
pub const BNHighLevelILOperation_HLIL_CMP_UGT: BNHighLevelILOperation = 71;
pub const BNHighLevelILOperation_HLIL_TEST_BIT: BNHighLevelILOperation = 72;
pub const BNHighLevelILOperation_HLIL_BOOL_TO_INT: BNHighLevelILOperation = 73;
pub const BNHighLevelILOperation_HLIL_ADD_OVERFLOW: BNHighLevelILOperation = 74;
pub const BNHighLevelILOperation_HLIL_SYSCALL: BNHighLevelILOperation = 75;
pub const BNHighLevelILOperation_HLIL_TAILCALL: BNHighLevelILOperation = 76;
pub const BNHighLevelILOperation_HLIL_INTRINSIC: BNHighLevelILOperation = 77;
pub const BNHighLevelILOperation_HLIL_BP: BNHighLevelILOperation = 78;
pub const BNHighLevelILOperation_HLIL_TRAP: BNHighLevelILOperation = 79;
pub const BNHighLevelILOperation_HLIL_UNDEF: BNHighLevelILOperation = 80;
pub const BNHighLevelILOperation_HLIL_UNIMPL: BNHighLevelILOperation = 81;
pub const BNHighLevelILOperation_HLIL_UNIMPL_MEM: BNHighLevelILOperation = 82;
pub const BNHighLevelILOperation_HLIL_FADD: BNHighLevelILOperation = 83;
pub const BNHighLevelILOperation_HLIL_FSUB: BNHighLevelILOperation = 84;
pub const BNHighLevelILOperation_HLIL_FMUL: BNHighLevelILOperation = 85;
pub const BNHighLevelILOperation_HLIL_FDIV: BNHighLevelILOperation = 86;
pub const BNHighLevelILOperation_HLIL_FSQRT: BNHighLevelILOperation = 87;
pub const BNHighLevelILOperation_HLIL_FNEG: BNHighLevelILOperation = 88;
pub const BNHighLevelILOperation_HLIL_FABS: BNHighLevelILOperation = 89;
pub const BNHighLevelILOperation_HLIL_FLOAT_TO_INT: BNHighLevelILOperation = 90;
pub const BNHighLevelILOperation_HLIL_INT_TO_FLOAT: BNHighLevelILOperation = 91;
pub const BNHighLevelILOperation_HLIL_FLOAT_CONV: BNHighLevelILOperation = 92;
pub const BNHighLevelILOperation_HLIL_ROUND_TO_INT: BNHighLevelILOperation = 93;
pub const BNHighLevelILOperation_HLIL_FLOOR: BNHighLevelILOperation = 94;
pub const BNHighLevelILOperation_HLIL_CEIL: BNHighLevelILOperation = 95;
pub const BNHighLevelILOperation_HLIL_FTRUNC: BNHighLevelILOperation = 96;
pub const BNHighLevelILOperation_HLIL_FCMP_E: BNHighLevelILOperation = 97;
pub const BNHighLevelILOperation_HLIL_FCMP_NE: BNHighLevelILOperation = 98;
pub const BNHighLevelILOperation_HLIL_FCMP_LT: BNHighLevelILOperation = 99;
pub const BNHighLevelILOperation_HLIL_FCMP_LE: BNHighLevelILOperation = 100;
pub const BNHighLevelILOperation_HLIL_FCMP_GE: BNHighLevelILOperation = 101;
pub const BNHighLevelILOperation_HLIL_FCMP_GT: BNHighLevelILOperation = 102;
pub const BNHighLevelILOperation_HLIL_FCMP_O: BNHighLevelILOperation = 103;
pub const BNHighLevelILOperation_HLIL_FCMP_UO: BNHighLevelILOperation = 104;
pub const BNHighLevelILOperation_HLIL_WHILE_SSA: BNHighLevelILOperation = 105;
pub const BNHighLevelILOperation_HLIL_DO_WHILE_SSA: BNHighLevelILOperation = 106;
pub const BNHighLevelILOperation_HLIL_FOR_SSA: BNHighLevelILOperation = 107;
pub const BNHighLevelILOperation_HLIL_VAR_INIT_SSA: BNHighLevelILOperation = 108;
pub const BNHighLevelILOperation_HLIL_ASSIGN_MEM_SSA: BNHighLevelILOperation = 109;
pub const BNHighLevelILOperation_HLIL_ASSIGN_UNPACK_MEM_SSA: BNHighLevelILOperation = 110;
pub const BNHighLevelILOperation_HLIL_VAR_SSA: BNHighLevelILOperation = 111;
pub const BNHighLevelILOperation_HLIL_ARRAY_INDEX_SSA: BNHighLevelILOperation = 112;
pub const BNHighLevelILOperation_HLIL_DEREF_SSA: BNHighLevelILOperation = 113;
pub const BNHighLevelILOperation_HLIL_DEREF_FIELD_SSA: BNHighLevelILOperation = 114;
pub const BNHighLevelILOperation_HLIL_CALL_SSA: BNHighLevelILOperation = 115;
pub const BNHighLevelILOperation_HLIL_SYSCALL_SSA: BNHighLevelILOperation = 116;
pub const BNHighLevelILOperation_HLIL_INTRINSIC_SSA: BNHighLevelILOperation = 117;
pub const BNHighLevelILOperation_HLIL_VAR_PHI: BNHighLevelILOperation = 118;
pub const BNHighLevelILOperation_HLIL_MEM_PHI: BNHighLevelILOperation = 119;
pub type BNHighLevelILOperation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNHighLevelILInstruction {
    pub operation: BNHighLevelILOperation,
    pub sourceOperand: u32,
    pub size: size_t,
    pub operands: [u64; 5usize],
    pub address: u64,
    pub parent: size_t,
}
#[test]
fn bindgen_test_layout_BNHighLevelILInstruction() {
    assert_eq!(
        ::std::mem::size_of::<BNHighLevelILInstruction>(),
        72usize,
        concat!("Size of: ", stringify!(BNHighLevelILInstruction))
    );
    assert_eq!(
        ::std::mem::align_of::<BNHighLevelILInstruction>(),
        8usize,
        concat!("Alignment of ", stringify!(BNHighLevelILInstruction))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNHighLevelILInstruction>())).operation as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNHighLevelILInstruction>())).sourceOperand as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(sourceOperand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNHighLevelILInstruction>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNHighLevelILInstruction>())).operands as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(operands)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNHighLevelILInstruction>())).address as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNHighLevelILInstruction>())).parent as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(parent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLogListener {
    pub context: *mut ::std::os::raw::c_void,
    pub log: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            level: BNLogLevel,
            msg: *const ::std::os::raw::c_char,
        ),
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub getLogLevel: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> BNLogLevel,
    >,
}
#[test]
fn bindgen_test_layout_BNLogListener() {
    assert_eq!(
        ::std::mem::size_of::<BNLogListener>(),
        32usize,
        concat!("Size of: ", stringify!(BNLogListener))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLogListener>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLogListener))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLogListener>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLogListener),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLogListener>())).log as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLogListener),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLogListener>())).close as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLogListener),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLogListener>())).getLogLevel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLogListener),
            "::",
            stringify!(getLogLevel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNavigationHandler {
    pub context: *mut ::std::os::raw::c_void,
    pub getCurrentView: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char,
    >,
    pub getCurrentOffset:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u64>,
    pub navigate: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *const ::std::os::raw::c_char,
            offset: u64,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNNavigationHandler() {
    assert_eq!(
        ::std::mem::size_of::<BNNavigationHandler>(),
        32usize,
        concat!("Size of: ", stringify!(BNNavigationHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<BNNavigationHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(BNNavigationHandler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNavigationHandler>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNavigationHandler),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNNavigationHandler>())).getCurrentView as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNavigationHandler),
            "::",
            stringify!(getCurrentView)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNNavigationHandler>())).getCurrentOffset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNavigationHandler),
            "::",
            stringify!(getCurrentOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNavigationHandler>())).navigate as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNavigationHandler),
            "::",
            stringify!(navigate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNameList {
    pub name: *mut *mut ::std::os::raw::c_char,
    pub join: *mut ::std::os::raw::c_char,
    pub nameCount: size_t,
}
#[test]
fn bindgen_test_layout_BNNameList() {
    assert_eq!(
        ::std::mem::size_of::<BNNameList>(),
        24usize,
        concat!("Size of: ", stringify!(BNNameList))
    );
    assert_eq!(
        ::std::mem::align_of::<BNNameList>(),
        8usize,
        concat!("Alignment of ", stringify!(BNNameList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNameList>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameList),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNameList>())).join as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameList),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNameList>())).nameCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameList),
            "::",
            stringify!(nameCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNameSpace {
    pub name: *mut *mut ::std::os::raw::c_char,
    pub join: *mut ::std::os::raw::c_char,
    pub nameCount: size_t,
}
#[test]
fn bindgen_test_layout_BNNameSpace() {
    assert_eq!(
        ::std::mem::size_of::<BNNameSpace>(),
        24usize,
        concat!("Size of: ", stringify!(BNNameSpace))
    );
    assert_eq!(
        ::std::mem::align_of::<BNNameSpace>(),
        8usize,
        concat!("Alignment of ", stringify!(BNNameSpace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNameSpace>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameSpace),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNameSpace>())).join as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameSpace),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNameSpace>())).nameCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameSpace),
            "::",
            stringify!(nameCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNQualifiedName {
    pub name: *mut *mut ::std::os::raw::c_char,
    pub join: *mut ::std::os::raw::c_char,
    pub nameCount: size_t,
}
#[test]
fn bindgen_test_layout_BNQualifiedName() {
    assert_eq!(
        ::std::mem::size_of::<BNQualifiedName>(),
        24usize,
        concat!("Size of: ", stringify!(BNQualifiedName))
    );
    assert_eq!(
        ::std::mem::align_of::<BNQualifiedName>(),
        8usize,
        concat!("Alignment of ", stringify!(BNQualifiedName))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNQualifiedName>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedName),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNQualifiedName>())).join as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedName),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNQualifiedName>())).nameCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedName),
            "::",
            stringify!(nameCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryDataNotification {
    pub context: *mut ::std::os::raw::c_void,
    pub dataWritten: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            offset: u64,
            len: size_t,
        ),
    >,
    pub dataInserted: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            offset: u64,
            len: size_t,
        ),
    >,
    pub dataRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            offset: u64,
            len: u64,
        ),
    >,
    pub functionAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ),
    >,
    pub functionRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ),
    >,
    pub functionUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ),
    >,
    pub functionUpdateRequested: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ),
    >,
    pub dataVariableAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            var: *mut BNDataVariable,
        ),
    >,
    pub dataVariableRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            var: *mut BNDataVariable,
        ),
    >,
    pub dataVariableUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            var: *mut BNDataVariable,
        ),
    >,
    pub dataMetadataUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            offset: u64,
        ),
    >,
    pub tagTypeUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            tagType: *mut BNTagType,
        ),
    >,
    pub tagAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            tagRef: *mut BNTagReference,
        ),
    >,
    pub tagUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            tagRef: *mut BNTagReference,
        ),
    >,
    pub tagRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            tagRef: *mut BNTagReference,
        ),
    >,
    pub symbolAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            sym: *mut BNSymbol,
        ),
    >,
    pub symbolUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            sym: *mut BNSymbol,
        ),
    >,
    pub symbolRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            sym: *mut BNSymbol,
        ),
    >,
    pub stringFound: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            type_: BNStringType,
            offset: u64,
            len: size_t,
        ),
    >,
    pub stringRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            type_: BNStringType,
            offset: u64,
            len: size_t,
        ),
    >,
    pub typeDefined: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            name: *mut BNQualifiedName,
            type_: *mut BNType,
        ),
    >,
    pub typeUndefined: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            name: *mut BNQualifiedName,
            type_: *mut BNType,
        ),
    >,
}
#[test]
fn bindgen_test_layout_BNBinaryDataNotification() {
    assert_eq!(
        ::std::mem::size_of::<BNBinaryDataNotification>(),
        184usize,
        concat!("Size of: ", stringify!(BNBinaryDataNotification))
    );
    assert_eq!(
        ::std::mem::align_of::<BNBinaryDataNotification>(),
        8usize,
        concat!("Alignment of ", stringify!(BNBinaryDataNotification))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).dataWritten as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataWritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).dataInserted as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataInserted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).dataRemoved as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataRemoved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).functionAdded as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(functionAdded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).functionRemoved as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(functionRemoved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).functionUpdated as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(functionUpdated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).functionUpdateRequested as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(functionUpdateRequested)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).dataVariableAdded as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataVariableAdded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).dataVariableRemoved as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataVariableRemoved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).dataVariableUpdated as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataVariableUpdated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).dataMetadataUpdated as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataMetadataUpdated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).tagTypeUpdated as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(tagTypeUpdated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).tagAdded as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(tagAdded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).tagUpdated as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(tagUpdated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).tagRemoved as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(tagRemoved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).symbolAdded as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(symbolAdded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).symbolUpdated as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(symbolUpdated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).symbolRemoved as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(symbolRemoved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).stringFound as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(stringFound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).stringRemoved as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(stringRemoved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).typeDefined as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(typeDefined)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNBinaryDataNotification>())).typeUndefined as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(typeUndefined)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFileAccessor {
    pub context: *mut ::std::os::raw::c_void,
    pub getLength:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u64>,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            dest: *mut ::std::os::raw::c_void,
            offset: u64,
            len: size_t,
        ) -> size_t,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            offset: u64,
            src: *const ::std::os::raw::c_void,
            len: size_t,
        ) -> size_t,
    >,
}
#[test]
fn bindgen_test_layout_BNFileAccessor() {
    assert_eq!(
        ::std::mem::size_of::<BNFileAccessor>(),
        32usize,
        concat!("Size of: ", stringify!(BNFileAccessor))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFileAccessor>(),
        8usize,
        concat!("Alignment of ", stringify!(BNFileAccessor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFileAccessor>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFileAccessor),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFileAccessor>())).getLength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFileAccessor),
            "::",
            stringify!(getLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFileAccessor>())).read as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFileAccessor),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFileAccessor>())).write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFileAccessor),
            "::",
            stringify!(write)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomBinaryView {
    pub context: *mut ::std::os::raw::c_void,
    pub init:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub freeObject: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub externalRefTaken:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub externalRefReleased:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            dest: *mut ::std::os::raw::c_void,
            offset: u64,
            len: size_t,
        ) -> size_t,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            offset: u64,
            src: *const ::std::os::raw::c_void,
            len: size_t,
        ) -> size_t,
    >,
    pub insert: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            offset: u64,
            src: *const ::std::os::raw::c_void,
            len: size_t,
        ) -> size_t,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64, len: u64) -> size_t,
    >,
    pub getModification: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            offset: u64,
        ) -> BNModificationStatus,
    >,
    pub isValidOffset: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> bool,
    >,
    pub isOffsetReadable: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> bool,
    >,
    pub isOffsetWritable: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> bool,
    >,
    pub isOffsetExecutable: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> bool,
    >,
    pub isOffsetBackedByFile: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> bool,
    >,
    pub getNextValidOffset: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> u64,
    >,
    pub getStart:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u64>,
    pub getLength:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u64>,
    pub getEntryPoint:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u64>,
    pub isExecutable:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub getDefaultEndianness: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> BNEndianness,
    >,
    pub isRelocatable:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub getAddressSize:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> size_t>,
    pub save: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            accessor: *mut BNFileAccessor,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomBinaryView() {
    assert_eq!(
        ::std::mem::size_of::<BNCustomBinaryView>(),
        192usize,
        concat!("Size of: ", stringify!(BNCustomBinaryView))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomBinaryView>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomBinaryView))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).init as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).freeObject as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(freeObject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).externalRefTaken as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(externalRefTaken)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).externalRefReleased as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(externalRefReleased)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).read as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).write as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).insert as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(insert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).remove as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).getModification as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getModification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).isValidOffset as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isValidOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).isOffsetReadable as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isOffsetReadable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).isOffsetWritable as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isOffsetWritable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).isOffsetExecutable as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isOffsetExecutable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).isOffsetBackedByFile as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isOffsetBackedByFile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).getNextValidOffset as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getNextValidOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).getStart as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).getLength as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).getEntryPoint as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getEntryPoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).isExecutable as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isExecutable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).getDefaultEndianness as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getDefaultEndianness)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).isRelocatable as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isRelocatable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryView>())).getAddressSize as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getAddressSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryView>())).save as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(save)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomBinaryViewType {
    pub context: *mut ::std::os::raw::c_void,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut BNBinaryView,
        ) -> *mut BNBinaryView,
    >,
    pub parse: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut BNBinaryView,
        ) -> *mut BNBinaryView,
    >,
    pub isValidForData: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, data: *mut BNBinaryView) -> bool,
    >,
    pub getLoadSettingsForData: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut BNBinaryView,
        ) -> *mut BNSettings,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomBinaryViewType() {
    assert_eq!(
        ::std::mem::size_of::<BNCustomBinaryViewType>(),
        40usize,
        concat!("Size of: ", stringify!(BNCustomBinaryViewType))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomBinaryViewType>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomBinaryViewType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryViewType>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryViewType>())).create as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomBinaryViewType>())).parse as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(parse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryViewType>())).isValidForData as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(isValidForData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomBinaryViewType>())).getLoadSettingsForData as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(getLoadSettingsForData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTransformParameterInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub longName: *mut ::std::os::raw::c_char,
    pub fixedLength: size_t,
}
#[test]
fn bindgen_test_layout_BNTransformParameterInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNTransformParameterInfo>(),
        24usize,
        concat!("Size of: ", stringify!(BNTransformParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTransformParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTransformParameterInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTransformParameterInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTransformParameterInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNTransformParameterInfo>())).longName as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTransformParameterInfo),
            "::",
            stringify!(longName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNTransformParameterInfo>())).fixedLength as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTransformParameterInfo),
            "::",
            stringify!(fixedLength)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTransformParameter {
    pub name: *const ::std::os::raw::c_char,
    pub value: *mut BNDataBuffer,
}
#[test]
fn bindgen_test_layout_BNTransformParameter() {
    assert_eq!(
        ::std::mem::size_of::<BNTransformParameter>(),
        16usize,
        concat!("Size of: ", stringify!(BNTransformParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTransformParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTransformParameter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTransformParameter>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTransformParameter),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTransformParameter>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTransformParameter),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomTransform {
    pub context: *mut ::std::os::raw::c_void,
    pub getParameters: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            count: *mut size_t,
        ) -> *mut BNTransformParameterInfo,
    >,
    pub freeParameters: ::std::option::Option<
        unsafe extern "C" fn(params: *mut BNTransformParameterInfo, count: size_t),
    >,
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            input: *mut BNDataBuffer,
            output: *mut BNDataBuffer,
            params: *mut BNTransformParameter,
            paramCount: size_t,
        ) -> bool,
    >,
    pub encode: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            input: *mut BNDataBuffer,
            output: *mut BNDataBuffer,
            params: *mut BNTransformParameter,
            paramCount: size_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomTransform() {
    assert_eq!(
        ::std::mem::size_of::<BNCustomTransform>(),
        40usize,
        concat!("Size of: ", stringify!(BNCustomTransform))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomTransform>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomTransform))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomTransform>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomTransform),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomTransform>())).getParameters as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomTransform),
            "::",
            stringify!(getParameters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomTransform>())).freeParameters as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomTransform),
            "::",
            stringify!(freeParameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomTransform>())).decode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomTransform),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomTransform>())).encode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomTransform),
            "::",
            stringify!(encode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNInstructionInfo {
    pub length: size_t,
    pub branchCount: size_t,
    pub archTransitionByTargetAddr: bool,
    pub branchDelay: bool,
    pub branchType: [BNBranchType; 3usize],
    pub branchTarget: [u64; 3usize],
    pub branchArch: [*mut BNArchitecture; 3usize],
}
#[test]
fn bindgen_test_layout_BNInstructionInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNInstructionInfo>(),
        80usize,
        concat!("Size of: ", stringify!(BNInstructionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNInstructionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNInstructionInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionInfo>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionInfo>())).branchCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(branchCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInstructionInfo>())).archTransitionByTargetAddr as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(archTransitionByTargetAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionInfo>())).branchDelay as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(branchDelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionInfo>())).branchType as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(branchType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionInfo>())).branchTarget as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(branchTarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionInfo>())).branchArch as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(branchArch)
        )
    );
}
pub const BNRelocationType_ELFGlobalRelocationType: BNRelocationType = 0;
pub const BNRelocationType_ELFCopyRelocationType: BNRelocationType = 1;
pub const BNRelocationType_ELFJumpSlotRelocationType: BNRelocationType = 2;
pub const BNRelocationType_StandardRelocationType: BNRelocationType = 3;
pub const BNRelocationType_IgnoredRelocation: BNRelocationType = 4;
pub const BNRelocationType_UnhandledRelocation: BNRelocationType = 5;
pub type BNRelocationType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRelocationInfo {
    pub type_: BNRelocationType,
    pub pcRelative: bool,
    pub baseRelative: bool,
    pub base: u64,
    pub size: size_t,
    pub truncateSize: size_t,
    pub nativeType: u64,
    pub addend: size_t,
    pub hasSign: bool,
    pub implicitAddend: bool,
    pub external: bool,
    pub symbolIndex: size_t,
    pub sectionIndex: size_t,
    pub address: u64,
    pub target: u64,
    pub dataRelocation: bool,
    pub relocationDataCache: [u8; 8usize],
    pub prev: *mut BNRelocationInfo,
    pub next: *mut BNRelocationInfo,
}
#[test]
fn bindgen_test_layout_BNRelocationInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNRelocationInfo>(),
        120usize,
        concat!("Size of: ", stringify!(BNRelocationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRelocationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRelocationInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).pcRelative as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(pcRelative)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).baseRelative as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(baseRelative)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).base as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).truncateSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(truncateSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).nativeType as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(nativeType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).addend as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(addend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).hasSign as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(hasSign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).implicitAddend as *const _ as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(implicitAddend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).external as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(external)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).symbolIndex as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(symbolIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).sectionIndex as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(sectionIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).address as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).target as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).dataRelocation as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(dataRelocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRelocationInfo>())).relocationDataCache as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(relocationDataCache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).prev as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRelocationInfo>())).next as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNInstructionTextToken {
    pub type_: BNInstructionTextTokenType,
    pub text: *mut ::std::os::raw::c_char,
    pub value: u64,
    pub width: u64,
    pub size: size_t,
    pub operand: size_t,
    pub context: BNInstructionTextTokenContext,
    pub confidence: u8,
    pub address: u64,
    pub typeNames: *mut *mut ::std::os::raw::c_char,
    pub namesCount: size_t,
}
#[test]
fn bindgen_test_layout_BNInstructionTextToken() {
    assert_eq!(
        ::std::mem::size_of::<BNInstructionTextToken>(),
        80usize,
        concat!("Size of: ", stringify!(BNInstructionTextToken))
    );
    assert_eq!(
        ::std::mem::align_of::<BNInstructionTextToken>(),
        8usize,
        concat!("Alignment of ", stringify!(BNInstructionTextToken))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionTextToken>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionTextToken>())).text as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionTextToken>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionTextToken>())).width as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionTextToken>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionTextToken>())).operand as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(operand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionTextToken>())).context as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInstructionTextToken>())).confidence as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(confidence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionTextToken>())).address as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInstructionTextToken>())).typeNames as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(typeNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInstructionTextToken>())).namesCount as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(namesCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNInstructionTextLine {
    pub tokens: *mut BNInstructionTextToken,
    pub count: size_t,
}
#[test]
fn bindgen_test_layout_BNInstructionTextLine() {
    assert_eq!(
        ::std::mem::size_of::<BNInstructionTextLine>(),
        16usize,
        concat!("Size of: ", stringify!(BNInstructionTextLine))
    );
    assert_eq!(
        ::std::mem::align_of::<BNInstructionTextLine>(),
        8usize,
        concat!("Alignment of ", stringify!(BNInstructionTextLine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionTextLine>())).tokens as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextLine),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNInstructionTextLine>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextLine),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFlagConditionForSemanticClass {
    pub semanticClass: u32,
    pub condition: BNLowLevelILFlagCondition,
}
#[test]
fn bindgen_test_layout_BNFlagConditionForSemanticClass() {
    assert_eq!(
        ::std::mem::size_of::<BNFlagConditionForSemanticClass>(),
        8usize,
        concat!("Size of: ", stringify!(BNFlagConditionForSemanticClass))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFlagConditionForSemanticClass>(),
        4usize,
        concat!("Alignment of ", stringify!(BNFlagConditionForSemanticClass))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNFlagConditionForSemanticClass>())).semanticClass as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlagConditionForSemanticClass),
            "::",
            stringify!(semanticClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNFlagConditionForSemanticClass>())).condition as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlagConditionForSemanticClass),
            "::",
            stringify!(condition)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNameAndType {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut BNType,
    pub typeConfidence: u8,
}
#[test]
fn bindgen_test_layout_BNNameAndType() {
    assert_eq!(
        ::std::mem::size_of::<BNNameAndType>(),
        24usize,
        concat!("Size of: ", stringify!(BNNameAndType))
    );
    assert_eq!(
        ::std::mem::align_of::<BNNameAndType>(),
        8usize,
        concat!("Alignment of ", stringify!(BNNameAndType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNameAndType>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameAndType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNameAndType>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameAndType),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNNameAndType>())).typeConfidence as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameAndType),
            "::",
            stringify!(typeConfidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeWithConfidence {
    pub type_: *mut BNType,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNTypeWithConfidence() {
    assert_eq!(
        ::std::mem::size_of::<BNTypeWithConfidence>(),
        16usize,
        concat!("Size of: ", stringify!(BNTypeWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeWithConfidence>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeWithConfidence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTypeWithConfidence>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeWithConfidence),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTypeWithConfidence>())).confidence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomArchitecture {
    pub context: *mut ::std::os::raw::c_void,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, obj: *mut BNArchitecture),
    >,
    pub getEndianness: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> BNEndianness,
    >,
    pub getAddressSize:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> size_t>,
    pub getDefaultIntegerSize:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> size_t>,
    pub getInstructionAlignment:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> size_t>,
    pub getMaxInstructionLength:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> size_t>,
    pub getOpcodeDisplayLength:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> size_t>,
    pub getAssociatedArchitectureByAddress: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            addr: *mut u64,
        ) -> *mut BNArchitecture,
    >,
    pub getInstructionInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            maxLen: size_t,
            result: *mut BNInstructionInfo,
        ) -> bool,
    >,
    pub getInstructionText: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: *mut size_t,
            result: *mut *mut BNInstructionTextToken,
            count: *mut size_t,
        ) -> bool,
    >,
    pub freeInstructionText: ::std::option::Option<
        unsafe extern "C" fn(tokens: *mut BNInstructionTextToken, count: size_t),
    >,
    pub getInstructionLowLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: *mut size_t,
            il: *mut BNLowLevelILFunction,
        ) -> bool,
    >,
    pub getRegisterName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            reg: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getFlagName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            flag: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getFlagWriteTypeName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            flags: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getSemanticFlagClassName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            semClass: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getSemanticFlagGroupName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            semGroup: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getFullWidthRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getAllRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getAllFlags: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getAllFlagWriteTypes: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getAllSemanticFlagClasses: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getAllSemanticFlagGroups: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getFlagRole: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            flag: u32,
            semClass: u32,
        ) -> BNFlagRole,
    >,
    pub getFlagsRequiredForFlagCondition: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            cond: BNLowLevelILFlagCondition,
            semClass: u32,
            count: *mut size_t,
        ) -> *mut u32,
    >,
    pub getFlagsRequiredForSemanticFlagGroup: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            semGroup: u32,
            count: *mut size_t,
        ) -> *mut u32,
    >,
    pub getFlagConditionsForSemanticFlagGroup: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            semGroup: u32,
            count: *mut size_t,
        ) -> *mut BNFlagConditionForSemanticClass,
    >,
    pub freeFlagConditionsForSemanticFlagGroup: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            conditions: *mut BNFlagConditionForSemanticClass,
        ),
    >,
    pub getFlagsWrittenByFlagWriteType: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            writeType: u32,
            count: *mut size_t,
        ) -> *mut u32,
    >,
    pub getSemanticClassForFlagWriteType: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, writeType: u32) -> u32,
    >,
    pub getFlagWriteLowLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            op: BNLowLevelILOperation,
            size: size_t,
            flagWriteType: u32,
            flag: u32,
            operands: *mut BNRegisterOrConstant,
            operandCount: size_t,
            il: *mut BNLowLevelILFunction,
        ) -> size_t,
    >,
    pub getFlagConditionLowLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            cond: BNLowLevelILFlagCondition,
            semClass: u32,
            il: *mut BNLowLevelILFunction,
        ) -> size_t,
    >,
    pub getSemanticFlagGroupLowLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            semGroup: u32,
            il: *mut BNLowLevelILFunction,
        ) -> size_t,
    >,
    pub freeRegisterList: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, regs: *mut u32),
    >,
    pub getRegisterInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            reg: u32,
            result: *mut BNRegisterInfo,
        ),
    >,
    pub getStackPointerRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getLinkRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getGlobalRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getSystemRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getRegisterStackName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            regStack: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getAllRegisterStacks: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getRegisterStackInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            regStack: u32,
            result: *mut BNRegisterStackInfo,
        ),
    >,
    pub getIntrinsicName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            intrinsic: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getAllIntrinsics: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getIntrinsicInputs: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            intrinsic: u32,
            count: *mut size_t,
        ) -> *mut BNNameAndType,
    >,
    pub freeNameAndTypeList: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            nt: *mut BNNameAndType,
            count: size_t,
        ),
    >,
    pub getIntrinsicOutputs: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            intrinsic: u32,
            count: *mut size_t,
        ) -> *mut BNTypeWithConfidence,
    >,
    pub freeTypeList: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            types: *mut BNTypeWithConfidence,
            count: size_t,
        ),
    >,
    pub canAssemble:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub assemble: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            code: *const ::std::os::raw::c_char,
            addr: u64,
            result: *mut BNDataBuffer,
            errors: *mut *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub isNeverBranchPatchAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: size_t,
        ) -> bool,
    >,
    pub isAlwaysBranchPatchAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: size_t,
        ) -> bool,
    >,
    pub isInvertBranchPatchAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: size_t,
        ) -> bool,
    >,
    pub isSkipAndReturnZeroPatchAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: size_t,
        ) -> bool,
    >,
    pub isSkipAndReturnValuePatchAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: size_t,
        ) -> bool,
    >,
    pub convertToNop: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut u8,
            addr: u64,
            len: size_t,
        ) -> bool,
    >,
    pub alwaysBranch: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut u8,
            addr: u64,
            len: size_t,
        ) -> bool,
    >,
    pub invertBranch: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut u8,
            addr: u64,
            len: size_t,
        ) -> bool,
    >,
    pub skipAndReturnValue: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut u8,
            addr: u64,
            len: size_t,
            value: u64,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomArchitecture() {
    assert_eq!(
        ::std::mem::size_of::<BNCustomArchitecture>(),
        480usize,
        concat!("Size of: ", stringify!(BNCustomArchitecture))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomArchitecture>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomArchitecture))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomArchitecture>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomArchitecture>())).init as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getEndianness as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getEndianness)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getAddressSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAddressSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getDefaultIntegerSize as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getDefaultIntegerSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getInstructionAlignment as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getInstructionAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getMaxInstructionLength as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getMaxInstructionLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getOpcodeDisplayLength as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getOpcodeDisplayLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getAssociatedArchitectureByAddress
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAssociatedArchitectureByAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getInstructionInfo as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getInstructionInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getInstructionText as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getInstructionText)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).freeInstructionText as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(freeInstructionText)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getInstructionLowLevelIL as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getInstructionLowLevelIL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getRegisterName as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getRegisterName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getFlagName as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getFlagWriteTypeName as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagWriteTypeName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getSemanticFlagClassName as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getSemanticFlagClassName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getSemanticFlagGroupName as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getSemanticFlagGroupName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getFullWidthRegisters as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFullWidthRegisters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getAllRegisters as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllRegisters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getAllFlags as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getAllFlagWriteTypes as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllFlagWriteTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getAllSemanticFlagClasses as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllSemanticFlagClasses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getAllSemanticFlagGroups as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllSemanticFlagGroups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getFlagRole as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagRole)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getFlagsRequiredForFlagCondition
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagsRequiredForFlagCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getFlagsRequiredForSemanticFlagGroup
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagsRequiredForSemanticFlagGroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getFlagConditionsForSemanticFlagGroup
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagConditionsForSemanticFlagGroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).freeFlagConditionsForSemanticFlagGroup
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(freeFlagConditionsForSemanticFlagGroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getFlagsWrittenByFlagWriteType
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagsWrittenByFlagWriteType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getSemanticClassForFlagWriteType
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getSemanticClassForFlagWriteType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getFlagWriteLowLevelIL as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagWriteLowLevelIL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getFlagConditionLowLevelIL as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagConditionLowLevelIL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getSemanticFlagGroupLowLevelIL
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getSemanticFlagGroupLowLevelIL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).freeRegisterList as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(freeRegisterList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getRegisterInfo as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getRegisterInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getStackPointerRegister as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getStackPointerRegister)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getLinkRegister as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getLinkRegister)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getGlobalRegisters as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getGlobalRegisters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getSystemRegisters as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getSystemRegisters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getRegisterStackName as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getRegisterStackName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getAllRegisterStacks as *const _
                as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllRegisterStacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getRegisterStackInfo as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getRegisterStackInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getIntrinsicName as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getIntrinsicName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getAllIntrinsics as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllIntrinsics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getIntrinsicInputs as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getIntrinsicInputs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).freeNameAndTypeList as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(freeNameAndTypeList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).getIntrinsicOutputs as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getIntrinsicOutputs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).freeTypeList as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(freeTypeList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).canAssemble as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(canAssemble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomArchitecture>())).assemble as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(assemble)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).isNeverBranchPatchAvailable as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(isNeverBranchPatchAvailable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).isAlwaysBranchPatchAvailable
                as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(isAlwaysBranchPatchAvailable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).isInvertBranchPatchAvailable
                as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(isInvertBranchPatchAvailable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).isSkipAndReturnZeroPatchAvailable
                as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(isSkipAndReturnZeroPatchAvailable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).isSkipAndReturnValuePatchAvailable
                as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(isSkipAndReturnValuePatchAvailable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).convertToNop as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(convertToNop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).alwaysBranch as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(alwaysBranch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).invertBranch as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(invertBranch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomArchitecture>())).skipAndReturnValue as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(skipAndReturnValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBasicBlockEdge {
    pub type_: BNBranchType,
    pub target: *mut BNBasicBlock,
    pub backEdge: bool,
    pub fallThrough: bool,
}
#[test]
fn bindgen_test_layout_BNBasicBlockEdge() {
    assert_eq!(
        ::std::mem::size_of::<BNBasicBlockEdge>(),
        24usize,
        concat!("Size of: ", stringify!(BNBasicBlockEdge))
    );
    assert_eq!(
        ::std::mem::align_of::<BNBasicBlockEdge>(),
        8usize,
        concat!("Alignment of ", stringify!(BNBasicBlockEdge))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNBasicBlockEdge>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBasicBlockEdge),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNBasicBlockEdge>())).target as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBasicBlockEdge),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNBasicBlockEdge>())).backEdge as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBasicBlockEdge),
            "::",
            stringify!(backEdge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNBasicBlockEdge>())).fallThrough as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBasicBlockEdge),
            "::",
            stringify!(fallThrough)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNPoint {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_BNPoint() {
    assert_eq!(
        ::std::mem::size_of::<BNPoint>(),
        8usize,
        concat!("Size of: ", stringify!(BNPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<BNPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(BNPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPoint>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPoint>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPoint),
            "::",
            stringify!(y)
        )
    );
}
pub const BNThemeColor_AddressColor: BNThemeColor = 0;
pub const BNThemeColor_ModifiedColor: BNThemeColor = 1;
pub const BNThemeColor_InsertedColor: BNThemeColor = 2;
pub const BNThemeColor_NotPresentColor: BNThemeColor = 3;
pub const BNThemeColor_SelectionColor: BNThemeColor = 4;
pub const BNThemeColor_OutlineColor: BNThemeColor = 5;
pub const BNThemeColor_BackgroundHighlightDarkColor: BNThemeColor = 6;
pub const BNThemeColor_BackgroundHighlightLightColor: BNThemeColor = 7;
pub const BNThemeColor_BoldBackgroundHighlightDarkColor: BNThemeColor = 8;
pub const BNThemeColor_BoldBackgroundHighlightLightColor: BNThemeColor = 9;
pub const BNThemeColor_AlphanumericHighlightColor: BNThemeColor = 10;
pub const BNThemeColor_PrintableHighlightColor: BNThemeColor = 11;
pub const BNThemeColor_GraphBackgroundDarkColor: BNThemeColor = 12;
pub const BNThemeColor_GraphBackgroundLightColor: BNThemeColor = 13;
pub const BNThemeColor_GraphNodeDarkColor: BNThemeColor = 14;
pub const BNThemeColor_GraphNodeLightColor: BNThemeColor = 15;
pub const BNThemeColor_GraphNodeOutlineColor: BNThemeColor = 16;
pub const BNThemeColor_TrueBranchColor: BNThemeColor = 17;
pub const BNThemeColor_FalseBranchColor: BNThemeColor = 18;
pub const BNThemeColor_UnconditionalBranchColor: BNThemeColor = 19;
pub const BNThemeColor_AltTrueBranchColor: BNThemeColor = 20;
pub const BNThemeColor_AltFalseBranchColor: BNThemeColor = 21;
pub const BNThemeColor_AltUnconditionalBranchColor: BNThemeColor = 22;
pub const BNThemeColor_RegisterColor: BNThemeColor = 23;
pub const BNThemeColor_NumberColor: BNThemeColor = 24;
pub const BNThemeColor_CodeSymbolColor: BNThemeColor = 25;
pub const BNThemeColor_DataSymbolColor: BNThemeColor = 26;
pub const BNThemeColor_StackVariableColor: BNThemeColor = 27;
pub const BNThemeColor_ImportColor: BNThemeColor = 28;
pub const BNThemeColor_InstructionHighlightColor: BNThemeColor = 29;
pub const BNThemeColor_TokenHighlightColor: BNThemeColor = 30;
pub const BNThemeColor_TokenSelectionColor: BNThemeColor = 31;
pub const BNThemeColor_AnnotationColor: BNThemeColor = 32;
pub const BNThemeColor_OpcodeColor: BNThemeColor = 33;
pub const BNThemeColor_LinearDisassemblyFunctionHeaderColor: BNThemeColor = 34;
pub const BNThemeColor_LinearDisassemblyBlockColor: BNThemeColor = 35;
pub const BNThemeColor_LinearDisassemblyNoteColor: BNThemeColor = 36;
pub const BNThemeColor_LinearDisassemblySeparatorColor: BNThemeColor = 37;
pub const BNThemeColor_StringColor: BNThemeColor = 38;
pub const BNThemeColor_TypeNameColor: BNThemeColor = 39;
pub const BNThemeColor_FieldNameColor: BNThemeColor = 40;
pub const BNThemeColor_KeywordColor: BNThemeColor = 41;
pub const BNThemeColor_UncertainColor: BNThemeColor = 42;
pub const BNThemeColor_NameSpaceColor: BNThemeColor = 43;
pub const BNThemeColor_NameSpaceSeparatorColor: BNThemeColor = 44;
pub const BNThemeColor_GotoLabelColor: BNThemeColor = 45;
pub const BNThemeColor_CommentColor: BNThemeColor = 46;
pub const BNThemeColor_ScriptConsoleOutputColor: BNThemeColor = 47;
pub const BNThemeColor_ScriptConsoleErrorColor: BNThemeColor = 48;
pub const BNThemeColor_ScriptConsoleEchoColor: BNThemeColor = 49;
pub const BNThemeColor_BlueStandardHighlightColor: BNThemeColor = 50;
pub const BNThemeColor_GreenStandardHighlightColor: BNThemeColor = 51;
pub const BNThemeColor_CyanStandardHighlightColor: BNThemeColor = 52;
pub const BNThemeColor_RedStandardHighlightColor: BNThemeColor = 53;
pub const BNThemeColor_MagentaStandardHighlightColor: BNThemeColor = 54;
pub const BNThemeColor_YellowStandardHighlightColor: BNThemeColor = 55;
pub const BNThemeColor_OrangeStandardHighlightColor: BNThemeColor = 56;
pub const BNThemeColor_WhiteStandardHighlightColor: BNThemeColor = 57;
pub const BNThemeColor_BlackStandardHighlightColor: BNThemeColor = 58;
pub const BNThemeColor_MiniGraphOverlayColor: BNThemeColor = 59;
pub const BNThemeColor_FeatureMapBaseColor: BNThemeColor = 60;
pub const BNThemeColor_FeatureMapNavLineColor: BNThemeColor = 61;
pub const BNThemeColor_FeatureMapNavHighlightColor: BNThemeColor = 62;
pub const BNThemeColor_FeatureMapDataVariableColor: BNThemeColor = 63;
pub const BNThemeColor_FeatureMapAsciiStringColor: BNThemeColor = 64;
pub const BNThemeColor_FeatureMapUnicodeStringColor: BNThemeColor = 65;
pub const BNThemeColor_FeatureMapFunctionColor: BNThemeColor = 66;
pub const BNThemeColor_FeatureMapImportColor: BNThemeColor = 67;
pub const BNThemeColor_FeatureMapExternColor: BNThemeColor = 68;
pub const BNThemeColor_FeatureMapLibraryColor: BNThemeColor = 69;
pub type BNThemeColor = ::std::os::raw::c_uint;
pub const BNEdgePenStyle_NoPen: BNEdgePenStyle = 0;
pub const BNEdgePenStyle_SolidLine: BNEdgePenStyle = 1;
pub const BNEdgePenStyle_DashLine: BNEdgePenStyle = 2;
pub const BNEdgePenStyle_DotLine: BNEdgePenStyle = 3;
pub const BNEdgePenStyle_DashDotLine: BNEdgePenStyle = 4;
pub const BNEdgePenStyle_DashDotDotLine: BNEdgePenStyle = 5;
pub type BNEdgePenStyle = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNEdgeStyle {
    pub style: BNEdgePenStyle,
    pub width: size_t,
    pub color: BNThemeColor,
}
#[test]
fn bindgen_test_layout_BNEdgeStyle() {
    assert_eq!(
        ::std::mem::size_of::<BNEdgeStyle>(),
        24usize,
        concat!("Size of: ", stringify!(BNEdgeStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<BNEdgeStyle>(),
        8usize,
        concat!("Alignment of ", stringify!(BNEdgeStyle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNEdgeStyle>())).style as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEdgeStyle),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNEdgeStyle>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEdgeStyle),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNEdgeStyle>())).color as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEdgeStyle),
            "::",
            stringify!(color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFlowGraphEdge {
    pub type_: BNBranchType,
    pub target: *mut BNFlowGraphNode,
    pub points: *mut BNPoint,
    pub pointCount: size_t,
    pub backEdge: bool,
    pub style: BNEdgeStyle,
}
#[test]
fn bindgen_test_layout_BNFlowGraphEdge() {
    assert_eq!(
        ::std::mem::size_of::<BNFlowGraphEdge>(),
        64usize,
        concat!("Size of: ", stringify!(BNFlowGraphEdge))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFlowGraphEdge>(),
        8usize,
        concat!("Alignment of ", stringify!(BNFlowGraphEdge))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFlowGraphEdge>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFlowGraphEdge>())).target as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFlowGraphEdge>())).points as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFlowGraphEdge>())).pointCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(pointCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFlowGraphEdge>())).backEdge as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(backEdge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFlowGraphEdge>())).style as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(style)
        )
    );
}
pub const BNHighlightColorStyle_StandardHighlightColor: BNHighlightColorStyle = 0;
pub const BNHighlightColorStyle_MixedHighlightColor: BNHighlightColorStyle = 1;
pub const BNHighlightColorStyle_CustomHighlightColor: BNHighlightColorStyle = 2;
pub type BNHighlightColorStyle = ::std::os::raw::c_uint;
pub const BNHighlightStandardColor_NoHighlightColor: BNHighlightStandardColor = 0;
pub const BNHighlightStandardColor_BlueHighlightColor: BNHighlightStandardColor = 1;
pub const BNHighlightStandardColor_GreenHighlightColor: BNHighlightStandardColor = 2;
pub const BNHighlightStandardColor_CyanHighlightColor: BNHighlightStandardColor = 3;
pub const BNHighlightStandardColor_RedHighlightColor: BNHighlightStandardColor = 4;
pub const BNHighlightStandardColor_MagentaHighlightColor: BNHighlightStandardColor = 5;
pub const BNHighlightStandardColor_YellowHighlightColor: BNHighlightStandardColor = 6;
pub const BNHighlightStandardColor_OrangeHighlightColor: BNHighlightStandardColor = 7;
pub const BNHighlightStandardColor_WhiteHighlightColor: BNHighlightStandardColor = 8;
pub const BNHighlightStandardColor_BlackHighlightColor: BNHighlightStandardColor = 9;
pub type BNHighlightStandardColor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNHighlightColor {
    pub style: BNHighlightColorStyle,
    pub color: BNHighlightStandardColor,
    pub mixColor: BNHighlightStandardColor,
    pub mix: u8,
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub alpha: u8,
}
#[test]
fn bindgen_test_layout_BNHighlightColor() {
    assert_eq!(
        ::std::mem::size_of::<BNHighlightColor>(),
        20usize,
        concat!("Size of: ", stringify!(BNHighlightColor))
    );
    assert_eq!(
        ::std::mem::align_of::<BNHighlightColor>(),
        4usize,
        concat!("Alignment of ", stringify!(BNHighlightColor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNHighlightColor>())).style as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNHighlightColor>())).color as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNHighlightColor>())).mixColor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(mixColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNHighlightColor>())).mix as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(mix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNHighlightColor>())).r as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNHighlightColor>())).g as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNHighlightColor>())).b as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNHighlightColor>())).alpha as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(alpha)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDisassemblyTextLineTypeInfo {
    pub hasTypeInfo: bool,
    pub parentType: *mut BNType,
    pub fieldIndex: size_t,
}
#[test]
fn bindgen_test_layout_BNDisassemblyTextLineTypeInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNDisassemblyTextLineTypeInfo>(),
        24usize,
        concat!("Size of: ", stringify!(BNDisassemblyTextLineTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDisassemblyTextLineTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDisassemblyTextLineTypeInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDisassemblyTextLineTypeInfo>())).hasTypeInfo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLineTypeInfo),
            "::",
            stringify!(hasTypeInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDisassemblyTextLineTypeInfo>())).parentType as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLineTypeInfo),
            "::",
            stringify!(parentType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDisassemblyTextLineTypeInfo>())).fieldIndex as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLineTypeInfo),
            "::",
            stringify!(fieldIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDisassemblyTextLine {
    pub addr: u64,
    pub instrIndex: size_t,
    pub tokens: *mut BNInstructionTextToken,
    pub count: size_t,
    pub highlight: BNHighlightColor,
    pub tags: *mut *mut BNTag,
    pub tagCount: size_t,
    pub typeInfo: BNDisassemblyTextLineTypeInfo,
}
#[test]
fn bindgen_test_layout_BNDisassemblyTextLine() {
    assert_eq!(
        ::std::mem::size_of::<BNDisassemblyTextLine>(),
        96usize,
        concat!("Size of: ", stringify!(BNDisassemblyTextLine))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDisassemblyTextLine>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDisassemblyTextLine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDisassemblyTextLine>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDisassemblyTextLine>())).instrIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(instrIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDisassemblyTextLine>())).tokens as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDisassemblyTextLine>())).count as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDisassemblyTextLine>())).highlight as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(highlight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDisassemblyTextLine>())).tags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDisassemblyTextLine>())).tagCount as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(tagCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNDisassemblyTextLine>())).typeInfo as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(typeInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLinearDisassemblyLine {
    pub type_: BNLinearDisassemblyLineType,
    pub function: *mut BNFunction,
    pub block: *mut BNBasicBlock,
    pub contents: BNDisassemblyTextLine,
}
#[test]
fn bindgen_test_layout_BNLinearDisassemblyLine() {
    assert_eq!(
        ::std::mem::size_of::<BNLinearDisassemblyLine>(),
        120usize,
        concat!("Size of: ", stringify!(BNLinearDisassemblyLine))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLinearDisassemblyLine>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLinearDisassemblyLine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLinearDisassemblyLine>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearDisassemblyLine),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNLinearDisassemblyLine>())).function as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearDisassemblyLine),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNLinearDisassemblyLine>())).block as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearDisassemblyLine),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNLinearDisassemblyLine>())).contents as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearDisassemblyLine),
            "::",
            stringify!(contents)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNReferenceSource {
    pub func: *mut BNFunction,
    pub arch: *mut BNArchitecture,
    pub addr: u64,
}
#[test]
fn bindgen_test_layout_BNReferenceSource() {
    assert_eq!(
        ::std::mem::size_of::<BNReferenceSource>(),
        24usize,
        concat!("Size of: ", stringify!(BNReferenceSource))
    );
    assert_eq!(
        ::std::mem::align_of::<BNReferenceSource>(),
        8usize,
        concat!("Alignment of ", stringify!(BNReferenceSource))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNReferenceSource>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNReferenceSource),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNReferenceSource>())).arch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNReferenceSource),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNReferenceSource>())).addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNReferenceSource),
            "::",
            stringify!(addr)
        )
    );
}
pub const BNTagTypeType_UserTagType: BNTagTypeType = 0;
pub const BNTagTypeType_NotificationTagType: BNTagTypeType = 1;
pub const BNTagTypeType_BookmarksTagType: BNTagTypeType = 2;
pub type BNTagTypeType = ::std::os::raw::c_uint;
pub const BNTagReferenceType_AddressTagReference: BNTagReferenceType = 0;
pub const BNTagReferenceType_FunctionTagReference: BNTagReferenceType = 1;
pub const BNTagReferenceType_DataTagReference: BNTagReferenceType = 2;
pub type BNTagReferenceType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTagReference {
    pub refType: BNTagReferenceType,
    pub autoDefined: bool,
    pub tag: *mut BNTag,
    pub arch: *mut BNArchitecture,
    pub func: *mut BNFunction,
    pub addr: u64,
}
#[test]
fn bindgen_test_layout_BNTagReference() {
    assert_eq!(
        ::std::mem::size_of::<BNTagReference>(),
        40usize,
        concat!("Size of: ", stringify!(BNTagReference))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTagReference>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTagReference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTagReference>())).refType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(refType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTagReference>())).autoDefined as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(autoDefined)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTagReference>())).tag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTagReference>())).arch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTagReference>())).func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTagReference>())).addr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUndoAction {
    pub actionType: BNActionType,
    pub summaryText: *mut ::std::os::raw::c_char,
    pub summaryTokens: *mut BNInstructionTextToken,
    pub summaryTokenCount: size_t,
}
#[test]
fn bindgen_test_layout_BNUndoAction() {
    assert_eq!(
        ::std::mem::size_of::<BNUndoAction>(),
        32usize,
        concat!("Size of: ", stringify!(BNUndoAction))
    );
    assert_eq!(
        ::std::mem::align_of::<BNUndoAction>(),
        8usize,
        concat!("Alignment of ", stringify!(BNUndoAction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUndoAction>())).actionType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoAction),
            "::",
            stringify!(actionType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUndoAction>())).summaryText as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoAction),
            "::",
            stringify!(summaryText)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUndoAction>())).summaryTokens as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoAction),
            "::",
            stringify!(summaryTokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUndoAction>())).summaryTokenCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoAction),
            "::",
            stringify!(summaryTokenCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUndoEntry {
    pub user: *mut BNUser,
    pub hash: *mut ::std::os::raw::c_char,
    pub actions: *mut BNUndoAction,
    pub actionCount: u64,
    pub timestamp: u64,
}
#[test]
fn bindgen_test_layout_BNUndoEntry() {
    assert_eq!(
        ::std::mem::size_of::<BNUndoEntry>(),
        40usize,
        concat!("Size of: ", stringify!(BNUndoEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<BNUndoEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(BNUndoEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUndoEntry>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUndoEntry>())).hash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUndoEntry>())).actions as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUndoEntry>())).actionCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(actionCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUndoEntry>())).timestamp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(timestamp)
        )
    );
}
pub const BNMergeStatus_NOT_APPLICABLE: BNMergeStatus = 0;
pub const BNMergeStatus_OK: BNMergeStatus = 1;
pub const BNMergeStatus_CONFLICT: BNMergeStatus = 2;
pub type BNMergeStatus = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMergeResult {
    pub status: BNMergeStatus,
    pub action: BNUndoAction,
    pub hash: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_BNMergeResult() {
    assert_eq!(
        ::std::mem::size_of::<BNMergeResult>(),
        48usize,
        concat!("Size of: ", stringify!(BNMergeResult))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMergeResult>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMergeResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMergeResult>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMergeResult),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMergeResult>())).action as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMergeResult),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMergeResult>())).hash as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMergeResult),
            "::",
            stringify!(hash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCallingConventionWithConfidence {
    pub convention: *mut BNCallingConvention,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNCallingConventionWithConfidence() {
    assert_eq!(
        ::std::mem::size_of::<BNCallingConventionWithConfidence>(),
        16usize,
        concat!("Size of: ", stringify!(BNCallingConventionWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCallingConventionWithConfidence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNCallingConventionWithConfidence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCallingConventionWithConfidence>())).convention as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCallingConventionWithConfidence),
            "::",
            stringify!(convention)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCallingConventionWithConfidence>())).confidence as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCallingConventionWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBoolWithConfidence {
    pub value: bool,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNBoolWithConfidence() {
    assert_eq!(
        ::std::mem::size_of::<BNBoolWithConfidence>(),
        2usize,
        concat!("Size of: ", stringify!(BNBoolWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNBoolWithConfidence>(),
        1usize,
        concat!("Alignment of ", stringify!(BNBoolWithConfidence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNBoolWithConfidence>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBoolWithConfidence),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNBoolWithConfidence>())).confidence as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBoolWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSizeWithConfidence {
    pub value: size_t,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNSizeWithConfidence() {
    assert_eq!(
        ::std::mem::size_of::<BNSizeWithConfidence>(),
        16usize,
        concat!("Size of: ", stringify!(BNSizeWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNSizeWithConfidence>(),
        8usize,
        concat!("Alignment of ", stringify!(BNSizeWithConfidence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNSizeWithConfidence>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSizeWithConfidence),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNSizeWithConfidence>())).confidence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSizeWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNOffsetWithConfidence {
    pub value: i64,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNOffsetWithConfidence() {
    assert_eq!(
        ::std::mem::size_of::<BNOffsetWithConfidence>(),
        16usize,
        concat!("Size of: ", stringify!(BNOffsetWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNOffsetWithConfidence>(),
        8usize,
        concat!("Alignment of ", stringify!(BNOffsetWithConfidence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNOffsetWithConfidence>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNOffsetWithConfidence),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNOffsetWithConfidence>())).confidence as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNOffsetWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMemberScopeWithConfidence {
    pub value: BNMemberScope,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNMemberScopeWithConfidence() {
    assert_eq!(
        ::std::mem::size_of::<BNMemberScopeWithConfidence>(),
        8usize,
        concat!("Size of: ", stringify!(BNMemberScopeWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMemberScopeWithConfidence>(),
        4usize,
        concat!("Alignment of ", stringify!(BNMemberScopeWithConfidence))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNMemberScopeWithConfidence>())).value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMemberScopeWithConfidence),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNMemberScopeWithConfidence>())).confidence as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMemberScopeWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMemberAccessWithConfidence {
    pub value: BNMemberAccess,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNMemberAccessWithConfidence() {
    assert_eq!(
        ::std::mem::size_of::<BNMemberAccessWithConfidence>(),
        8usize,
        concat!("Size of: ", stringify!(BNMemberAccessWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMemberAccessWithConfidence>(),
        4usize,
        concat!("Alignment of ", stringify!(BNMemberAccessWithConfidence))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNMemberAccessWithConfidence>())).value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMemberAccessWithConfidence),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNMemberAccessWithConfidence>())).confidence as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMemberAccessWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNParameterVariablesWithConfidence {
    pub vars: *mut BNVariable,
    pub count: size_t,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNParameterVariablesWithConfidence() {
    assert_eq!(
        ::std::mem::size_of::<BNParameterVariablesWithConfidence>(),
        24usize,
        concat!("Size of: ", stringify!(BNParameterVariablesWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNParameterVariablesWithConfidence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNParameterVariablesWithConfidence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNParameterVariablesWithConfidence>())).vars as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNParameterVariablesWithConfidence),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNParameterVariablesWithConfidence>())).count as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNParameterVariablesWithConfidence),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNParameterVariablesWithConfidence>())).confidence as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNParameterVariablesWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterSetWithConfidence {
    pub regs: *mut u32,
    pub count: size_t,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNRegisterSetWithConfidence() {
    assert_eq!(
        ::std::mem::size_of::<BNRegisterSetWithConfidence>(),
        24usize,
        concat!("Size of: ", stringify!(BNRegisterSetWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterSetWithConfidence>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRegisterSetWithConfidence))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterSetWithConfidence>())).regs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterSetWithConfidence),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterSetWithConfidence>())).count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterSetWithConfidence),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterSetWithConfidence>())).confidence as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterSetWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFunctionParameter {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut BNType,
    pub typeConfidence: u8,
    pub defaultLocation: bool,
    pub location: BNVariable,
}
#[test]
fn bindgen_test_layout_BNFunctionParameter() {
    assert_eq!(
        ::std::mem::size_of::<BNFunctionParameter>(),
        40usize,
        concat!("Size of: ", stringify!(BNFunctionParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFunctionParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(BNFunctionParameter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFunctionParameter>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionParameter),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFunctionParameter>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionParameter),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNFunctionParameter>())).typeConfidence as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionParameter),
            "::",
            stringify!(typeConfidence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNFunctionParameter>())).defaultLocation as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionParameter),
            "::",
            stringify!(defaultLocation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFunctionParameter>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionParameter),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNQualifiedNameAndType {
    pub name: BNQualifiedName,
    pub type_: *mut BNType,
}
#[test]
fn bindgen_test_layout_BNQualifiedNameAndType() {
    assert_eq!(
        ::std::mem::size_of::<BNQualifiedNameAndType>(),
        32usize,
        concat!("Size of: ", stringify!(BNQualifiedNameAndType))
    );
    assert_eq!(
        ::std::mem::align_of::<BNQualifiedNameAndType>(),
        8usize,
        concat!("Alignment of ", stringify!(BNQualifiedNameAndType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNQualifiedNameAndType>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameAndType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNQualifiedNameAndType>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameAndType),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNStructureMember {
    pub type_: *mut BNType,
    pub name: *mut ::std::os::raw::c_char,
    pub offset: u64,
    pub typeConfidence: u8,
}
#[test]
fn bindgen_test_layout_BNStructureMember() {
    assert_eq!(
        ::std::mem::size_of::<BNStructureMember>(),
        32usize,
        concat!("Size of: ", stringify!(BNStructureMember))
    );
    assert_eq!(
        ::std::mem::align_of::<BNStructureMember>(),
        8usize,
        concat!("Alignment of ", stringify!(BNStructureMember))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNStructureMember>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStructureMember),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNStructureMember>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStructureMember),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNStructureMember>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStructureMember),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNStructureMember>())).typeConfidence as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStructureMember),
            "::",
            stringify!(typeConfidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNEnumerationMember {
    pub name: *mut ::std::os::raw::c_char,
    pub value: u64,
    pub isDefault: bool,
}
#[test]
fn bindgen_test_layout_BNEnumerationMember() {
    assert_eq!(
        ::std::mem::size_of::<BNEnumerationMember>(),
        24usize,
        concat!("Size of: ", stringify!(BNEnumerationMember))
    );
    assert_eq!(
        ::std::mem::align_of::<BNEnumerationMember>(),
        8usize,
        concat!("Alignment of ", stringify!(BNEnumerationMember))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNEnumerationMember>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEnumerationMember),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNEnumerationMember>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEnumerationMember),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNEnumerationMember>())).isDefault as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEnumerationMember),
            "::",
            stringify!(isDefault)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFunctionRecognizer {
    pub context: *mut ::std::os::raw::c_void,
    pub recognizeLowLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut BNBinaryView,
            func: *mut BNFunction,
            il: *mut BNLowLevelILFunction,
        ) -> bool,
    >,
    pub recognizeMediumLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut BNBinaryView,
            func: *mut BNFunction,
            il: *mut BNMediumLevelILFunction,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNFunctionRecognizer() {
    assert_eq!(
        ::std::mem::size_of::<BNFunctionRecognizer>(),
        24usize,
        concat!("Size of: ", stringify!(BNFunctionRecognizer))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFunctionRecognizer>(),
        8usize,
        concat!("Alignment of ", stringify!(BNFunctionRecognizer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFunctionRecognizer>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionRecognizer),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNFunctionRecognizer>())).recognizeLowLevelIL as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionRecognizer),
            "::",
            stringify!(recognizeLowLevelIL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNFunctionRecognizer>())).recognizeMediumLevelIL as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionRecognizer),
            "::",
            stringify!(recognizeMediumLevelIL)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomRelocationHandler {
    pub context: *mut ::std::os::raw::c_void,
    pub freeObject: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub getRelocationInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            arch: *mut BNArchitecture,
            result: *mut BNRelocationInfo,
            resultCount: size_t,
        ) -> bool,
    >,
    pub applyRelocation: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            arch: *mut BNArchitecture,
            reloc: *mut BNRelocation,
            dest: *mut u8,
            len: size_t,
        ) -> bool,
    >,
    pub getOperandForExternalRelocation: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            length: size_t,
            il: *mut BNLowLevelILFunction,
            relocation: *mut BNRelocation,
        ) -> size_t,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomRelocationHandler() {
    assert_eq!(
        ::std::mem::size_of::<BNCustomRelocationHandler>(),
        40usize,
        concat!("Size of: ", stringify!(BNCustomRelocationHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomRelocationHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomRelocationHandler))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomRelocationHandler>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomRelocationHandler),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomRelocationHandler>())).freeObject as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomRelocationHandler),
            "::",
            stringify!(freeObject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomRelocationHandler>())).getRelocationInfo as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomRelocationHandler),
            "::",
            stringify!(getRelocationInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomRelocationHandler>())).applyRelocation as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomRelocationHandler),
            "::",
            stringify!(applyRelocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomRelocationHandler>())).getOperandForExternalRelocation
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomRelocationHandler),
            "::",
            stringify!(getOperandForExternalRelocation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeParserResult {
    pub types: *mut BNQualifiedNameAndType,
    pub variables: *mut BNQualifiedNameAndType,
    pub functions: *mut BNQualifiedNameAndType,
    pub typeCount: size_t,
    pub variableCount: size_t,
    pub functionCount: size_t,
}
#[test]
fn bindgen_test_layout_BNTypeParserResult() {
    assert_eq!(
        ::std::mem::size_of::<BNTypeParserResult>(),
        48usize,
        concat!("Size of: ", stringify!(BNTypeParserResult))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeParserResult>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeParserResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTypeParserResult>())).types as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTypeParserResult>())).variables as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTypeParserResult>())).functions as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTypeParserResult>())).typeCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(typeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNTypeParserResult>())).variableCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(variableCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNTypeParserResult>())).functionCount as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(functionCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNQualifiedNameList {
    pub names: *mut BNQualifiedName,
    pub count: size_t,
}
#[test]
fn bindgen_test_layout_BNQualifiedNameList() {
    assert_eq!(
        ::std::mem::size_of::<BNQualifiedNameList>(),
        16usize,
        concat!("Size of: ", stringify!(BNQualifiedNameList))
    );
    assert_eq!(
        ::std::mem::align_of::<BNQualifiedNameList>(),
        8usize,
        concat!("Alignment of ", stringify!(BNQualifiedNameList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNQualifiedNameList>())).names as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameList),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNQualifiedNameList>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameList),
            "::",
            stringify!(count)
        )
    );
}
pub const BNUpdateResult_UpdateFailed: BNUpdateResult = 0;
pub const BNUpdateResult_UpdateSuccess: BNUpdateResult = 1;
pub const BNUpdateResult_AlreadyUpToDate: BNUpdateResult = 2;
pub const BNUpdateResult_UpdateAvailable: BNUpdateResult = 3;
pub type BNUpdateResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUpdateChannel {
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub latestVersion: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_BNUpdateChannel() {
    assert_eq!(
        ::std::mem::size_of::<BNUpdateChannel>(),
        24usize,
        concat!("Size of: ", stringify!(BNUpdateChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<BNUpdateChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(BNUpdateChannel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUpdateChannel>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateChannel),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUpdateChannel>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateChannel),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUpdateChannel>())).latestVersion as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateChannel),
            "::",
            stringify!(latestVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUpdateVersion {
    pub version: *mut ::std::os::raw::c_char,
    pub notes: *mut ::std::os::raw::c_char,
    pub time: u64,
}
#[test]
fn bindgen_test_layout_BNUpdateVersion() {
    assert_eq!(
        ::std::mem::size_of::<BNUpdateVersion>(),
        24usize,
        concat!("Size of: ", stringify!(BNUpdateVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<BNUpdateVersion>(),
        8usize,
        concat!("Alignment of ", stringify!(BNUpdateVersion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUpdateVersion>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateVersion),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUpdateVersion>())).notes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateVersion),
            "::",
            stringify!(notes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUpdateVersion>())).time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateVersion),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNStringReference {
    pub type_: BNStringType,
    pub start: u64,
    pub length: size_t,
}
#[test]
fn bindgen_test_layout_BNStringReference() {
    assert_eq!(
        ::std::mem::size_of::<BNStringReference>(),
        24usize,
        concat!("Size of: ", stringify!(BNStringReference))
    );
    assert_eq!(
        ::std::mem::align_of::<BNStringReference>(),
        8usize,
        concat!("Alignment of ", stringify!(BNStringReference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNStringReference>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStringReference),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNStringReference>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStringReference),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNStringReference>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStringReference),
            "::",
            stringify!(length)
        )
    );
}
pub const BNPluginCommandType_DefaultPluginCommand: BNPluginCommandType = 0;
pub const BNPluginCommandType_AddressPluginCommand: BNPluginCommandType = 1;
pub const BNPluginCommandType_RangePluginCommand: BNPluginCommandType = 2;
pub const BNPluginCommandType_FunctionPluginCommand: BNPluginCommandType = 3;
pub const BNPluginCommandType_LowLevelILFunctionPluginCommand: BNPluginCommandType = 4;
pub const BNPluginCommandType_LowLevelILInstructionPluginCommand: BNPluginCommandType = 5;
pub const BNPluginCommandType_MediumLevelILFunctionPluginCommand: BNPluginCommandType = 6;
pub const BNPluginCommandType_MediumLevelILInstructionPluginCommand: BNPluginCommandType = 7;
pub type BNPluginCommandType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNPluginCommand {
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub type_: BNPluginCommandType,
    pub context: *mut ::std::os::raw::c_void,
    pub defaultCommand: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
    >,
    pub addressCommand: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView, addr: u64),
    >,
    pub rangeCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            addr: u64,
            len: u64,
        ),
    >,
    pub functionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ),
    >,
    pub lowLevelILFunctionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNLowLevelILFunction,
        ),
    >,
    pub lowLevelILInstructionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNLowLevelILFunction,
            instr: size_t,
        ),
    >,
    pub mediumLevelILFunctionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNMediumLevelILFunction,
        ),
    >,
    pub mediumLevelILInstructionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNMediumLevelILFunction,
            instr: size_t,
        ),
    >,
    pub defaultIsValid: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView) -> bool,
    >,
    pub addressIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            addr: u64,
        ) -> bool,
    >,
    pub rangeIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            addr: u64,
            len: u64,
        ) -> bool,
    >,
    pub functionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ) -> bool,
    >,
    pub lowLevelILFunctionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNLowLevelILFunction,
        ) -> bool,
    >,
    pub lowLevelILInstructionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNLowLevelILFunction,
            instr: size_t,
        ) -> bool,
    >,
    pub mediumLevelILFunctionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNMediumLevelILFunction,
        ) -> bool,
    >,
    pub mediumLevelILInstructionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNMediumLevelILFunction,
            instr: size_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNPluginCommand() {
    assert_eq!(
        ::std::mem::size_of::<BNPluginCommand>(),
        160usize,
        concat!("Size of: ", stringify!(BNPluginCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<BNPluginCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(BNPluginCommand))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).context as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).defaultCommand as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(defaultCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).addressCommand as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(addressCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).rangeCommand as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(rangeCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).functionCommand as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(functionCommand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNPluginCommand>())).lowLevelILFunctionCommand as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(lowLevelILFunctionCommand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNPluginCommand>())).lowLevelILInstructionCommand as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(lowLevelILInstructionCommand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNPluginCommand>())).mediumLevelILFunctionCommand as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(mediumLevelILFunctionCommand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNPluginCommand>())).mediumLevelILInstructionCommand as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(mediumLevelILInstructionCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).defaultIsValid as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(defaultIsValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).addressIsValid as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(addressIsValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).rangeIsValid as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(rangeIsValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPluginCommand>())).functionIsValid as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(functionIsValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNPluginCommand>())).lowLevelILFunctionIsValid as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(lowLevelILFunctionIsValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNPluginCommand>())).lowLevelILInstructionIsValid as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(lowLevelILInstructionIsValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNPluginCommand>())).mediumLevelILFunctionIsValid as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(mediumLevelILFunctionIsValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNPluginCommand>())).mediumLevelILInstructionIsValid as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(mediumLevelILInstructionIsValid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomCallingConvention {
    pub context: *mut ::std::os::raw::c_void,
    pub freeObject: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub getCallerSavedRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getCalleeSavedRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getIntegerArgumentRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getFloatArgumentRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub freeRegisterList: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, regs: *mut u32),
    >,
    pub areArgumentRegistersSharedIndex:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub isStackReservedForArgumentRegisters:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub isStackAdjustedOnReturn:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub isEligibleForHeuristics:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub getIntegerReturnValueRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getHighIntegerReturnValueRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getFloatReturnValueRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getGlobalPointerRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getImplicitlyDefinedRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut size_t) -> *mut u32,
    >,
    pub getIncomingRegisterValue: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            reg: u32,
            func: *mut BNFunction,
            result: *mut BNRegisterValue,
        ),
    >,
    pub getIncomingFlagValue: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            flag: u32,
            func: *mut BNFunction,
            result: *mut BNRegisterValue,
        ),
    >,
    pub getIncomingVariableForParameterVariable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            var: *const BNVariable,
            func: *mut BNFunction,
            result: *mut BNVariable,
        ),
    >,
    pub getParameterVariableForIncomingVariable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            var: *const BNVariable,
            func: *mut BNFunction,
            result: *mut BNVariable,
        ),
    >,
}
#[test]
fn bindgen_test_layout_BNCustomCallingConvention() {
    assert_eq!(
        ::std::mem::size_of::<BNCustomCallingConvention>(),
        160usize,
        concat!("Size of: ", stringify!(BNCustomCallingConvention))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomCallingConvention>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomCallingConvention))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).freeObject as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(freeObject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getCallerSavedRegisters
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getCallerSavedRegisters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getCalleeSavedRegisters
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getCalleeSavedRegisters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getIntegerArgumentRegisters
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getIntegerArgumentRegisters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getFloatArgumentRegisters
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getFloatArgumentRegisters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).freeRegisterList as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(freeRegisterList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).areArgumentRegistersSharedIndex
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(areArgumentRegistersSharedIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>()))
                .isStackReservedForArgumentRegisters as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(isStackReservedForArgumentRegisters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).isStackAdjustedOnReturn
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(isStackAdjustedOnReturn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).isEligibleForHeuristics
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(isEligibleForHeuristics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getIntegerReturnValueRegister
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getIntegerReturnValueRegister)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getHighIntegerReturnValueRegister
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getHighIntegerReturnValueRegister)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getFloatReturnValueRegister
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getFloatReturnValueRegister)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getGlobalPointerRegister
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getGlobalPointerRegister)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getImplicitlyDefinedRegisters
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getImplicitlyDefinedRegisters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getIncomingRegisterValue
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getIncomingRegisterValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>())).getIncomingFlagValue as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getIncomingFlagValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>()))
                .getIncomingVariableForParameterVariable as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getIncomingVariableForParameterVariable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomCallingConvention>()))
                .getParameterVariableForIncomingVariable as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getParameterVariableForIncomingVariable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNVariableNameAndType {
    pub var: BNVariable,
    pub type_: *mut BNType,
    pub name: *mut ::std::os::raw::c_char,
    pub autoDefined: bool,
    pub typeConfidence: u8,
}
#[test]
fn bindgen_test_layout_BNVariableNameAndType() {
    assert_eq!(
        ::std::mem::size_of::<BNVariableNameAndType>(),
        40usize,
        concat!("Size of: ", stringify!(BNVariableNameAndType))
    );
    assert_eq!(
        ::std::mem::align_of::<BNVariableNameAndType>(),
        8usize,
        concat!("Alignment of ", stringify!(BNVariableNameAndType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNVariableNameAndType>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableNameAndType),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNVariableNameAndType>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableNameAndType),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNVariableNameAndType>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableNameAndType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNVariableNameAndType>())).autoDefined as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableNameAndType),
            "::",
            stringify!(autoDefined)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNVariableNameAndType>())).typeConfidence as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableNameAndType),
            "::",
            stringify!(typeConfidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNStackVariableReference {
    pub sourceOperand: u32,
    pub typeConfidence: u8,
    pub type_: *mut BNType,
    pub name: *mut ::std::os::raw::c_char,
    pub varIdentifier: u64,
    pub referencedOffset: i64,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_BNStackVariableReference() {
    assert_eq!(
        ::std::mem::size_of::<BNStackVariableReference>(),
        48usize,
        concat!("Size of: ", stringify!(BNStackVariableReference))
    );
    assert_eq!(
        ::std::mem::align_of::<BNStackVariableReference>(),
        8usize,
        concat!("Alignment of ", stringify!(BNStackVariableReference))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNStackVariableReference>())).sourceOperand as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(sourceOperand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNStackVariableReference>())).typeConfidence as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(typeConfidence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNStackVariableReference>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNStackVariableReference>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNStackVariableReference>())).varIdentifier as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(varIdentifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNStackVariableReference>())).referencedOffset as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(referencedOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNStackVariableReference>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNIndirectBranchInfo {
    pub sourceArch: *mut BNArchitecture,
    pub sourceAddr: u64,
    pub destArch: *mut BNArchitecture,
    pub destAddr: u64,
    pub autoDefined: bool,
}
#[test]
fn bindgen_test_layout_BNIndirectBranchInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNIndirectBranchInfo>(),
        40usize,
        concat!("Size of: ", stringify!(BNIndirectBranchInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNIndirectBranchInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNIndirectBranchInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNIndirectBranchInfo>())).sourceArch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNIndirectBranchInfo),
            "::",
            stringify!(sourceArch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNIndirectBranchInfo>())).sourceAddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNIndirectBranchInfo),
            "::",
            stringify!(sourceAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNIndirectBranchInfo>())).destArch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNIndirectBranchInfo),
            "::",
            stringify!(destArch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNIndirectBranchInfo>())).destAddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNIndirectBranchInfo),
            "::",
            stringify!(destAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNIndirectBranchInfo>())).autoDefined as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNIndirectBranchInfo),
            "::",
            stringify!(autoDefined)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNArchitectureAndAddress {
    pub arch: *mut BNArchitecture,
    pub address: u64,
}
#[test]
fn bindgen_test_layout_BNArchitectureAndAddress() {
    assert_eq!(
        ::std::mem::size_of::<BNArchitectureAndAddress>(),
        16usize,
        concat!("Size of: ", stringify!(BNArchitectureAndAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<BNArchitectureAndAddress>(),
        8usize,
        concat!("Alignment of ", stringify!(BNArchitectureAndAddress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNArchitectureAndAddress>())).arch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNArchitectureAndAddress),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNArchitectureAndAddress>())).address as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNArchitectureAndAddress),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUserVariableValue {
    pub var: BNVariable,
    pub defSite: BNArchitectureAndAddress,
    pub value: BNPossibleValueSet,
}
#[test]
fn bindgen_test_layout_BNUserVariableValue() {
    assert_eq!(
        ::std::mem::size_of::<BNUserVariableValue>(),
        88usize,
        concat!("Size of: ", stringify!(BNUserVariableValue))
    );
    assert_eq!(
        ::std::mem::align_of::<BNUserVariableValue>(),
        8usize,
        concat!("Alignment of ", stringify!(BNUserVariableValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUserVariableValue>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUserVariableValue),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUserVariableValue>())).defSite as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUserVariableValue),
            "::",
            stringify!(defSite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNUserVariableValue>())).value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUserVariableValue),
            "::",
            stringify!(value)
        )
    );
}
pub const BNAnalysisState_IdleState: BNAnalysisState = 0;
pub const BNAnalysisState_DisassembleState: BNAnalysisState = 1;
pub const BNAnalysisState_AnalyzeState: BNAnalysisState = 2;
pub const BNAnalysisState_ExtendedAnalyzeState: BNAnalysisState = 3;
pub type BNAnalysisState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNActiveAnalysisInfo {
    pub func: *mut BNFunction,
    pub analysisTime: u64,
    pub updateCount: size_t,
    pub submitCount: size_t,
}
#[test]
fn bindgen_test_layout_BNActiveAnalysisInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNActiveAnalysisInfo>(),
        32usize,
        concat!("Size of: ", stringify!(BNActiveAnalysisInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNActiveAnalysisInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNActiveAnalysisInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNActiveAnalysisInfo>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNActiveAnalysisInfo),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNActiveAnalysisInfo>())).analysisTime as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNActiveAnalysisInfo),
            "::",
            stringify!(analysisTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNActiveAnalysisInfo>())).updateCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNActiveAnalysisInfo),
            "::",
            stringify!(updateCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNActiveAnalysisInfo>())).submitCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNActiveAnalysisInfo),
            "::",
            stringify!(submitCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAnalysisInfo {
    pub state: BNAnalysisState,
    pub analysisTime: u64,
    pub activeInfo: *mut BNActiveAnalysisInfo,
    pub count: size_t,
}
#[test]
fn bindgen_test_layout_BNAnalysisInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNAnalysisInfo>(),
        32usize,
        concat!("Size of: ", stringify!(BNAnalysisInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNAnalysisInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNAnalysisInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNAnalysisInfo>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisInfo),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNAnalysisInfo>())).analysisTime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisInfo),
            "::",
            stringify!(analysisTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNAnalysisInfo>())).activeInfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisInfo),
            "::",
            stringify!(activeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNAnalysisInfo>())).count as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisInfo),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAnalysisProgress {
    pub state: BNAnalysisState,
    pub count: size_t,
    pub total: size_t,
}
#[test]
fn bindgen_test_layout_BNAnalysisProgress() {
    assert_eq!(
        ::std::mem::size_of::<BNAnalysisProgress>(),
        24usize,
        concat!("Size of: ", stringify!(BNAnalysisProgress))
    );
    assert_eq!(
        ::std::mem::align_of::<BNAnalysisProgress>(),
        8usize,
        concat!("Alignment of ", stringify!(BNAnalysisProgress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNAnalysisProgress>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisProgress),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNAnalysisProgress>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisProgress),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNAnalysisProgress>())).total as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisProgress),
            "::",
            stringify!(total)
        )
    );
}
pub const BNAnalysisMode_FullAnalysisMode: BNAnalysisMode = 0;
pub const BNAnalysisMode_IntermediateAnalysisMode: BNAnalysisMode = 1;
pub const BNAnalysisMode_BasicAnalysisMode: BNAnalysisMode = 2;
pub const BNAnalysisMode_ControlFlowAnalysisMode: BNAnalysisMode = 3;
pub type BNAnalysisMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAnalysisParameters {
    pub maxAnalysisTime: u64,
    pub maxFunctionSize: u64,
    pub maxFunctionAnalysisTime: u64,
    pub maxFunctionUpdateCount: size_t,
    pub maxFunctionSubmitCount: size_t,
    pub suppressNewAutoFunctionAnalysis: bool,
    pub mode: BNAnalysisMode,
    pub alwaysAnalyzeIndirectBranches: bool,
    pub advancedAnalysisCacheSize: size_t,
}
#[test]
fn bindgen_test_layout_BNAnalysisParameters() {
    assert_eq!(
        ::std::mem::size_of::<BNAnalysisParameters>(),
        64usize,
        concat!("Size of: ", stringify!(BNAnalysisParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<BNAnalysisParameters>(),
        8usize,
        concat!("Alignment of ", stringify!(BNAnalysisParameters))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNAnalysisParameters>())).maxAnalysisTime as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(maxAnalysisTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNAnalysisParameters>())).maxFunctionSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(maxFunctionSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNAnalysisParameters>())).maxFunctionAnalysisTime as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(maxFunctionAnalysisTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNAnalysisParameters>())).maxFunctionUpdateCount as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(maxFunctionUpdateCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNAnalysisParameters>())).maxFunctionSubmitCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(maxFunctionSubmitCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNAnalysisParameters>())).suppressNewAutoFunctionAnalysis
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(suppressNewAutoFunctionAnalysis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNAnalysisParameters>())).mode as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNAnalysisParameters>())).alwaysAnalyzeIndirectBranches
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(alwaysAnalyzeIndirectBranches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNAnalysisParameters>())).advancedAnalysisCacheSize as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(advancedAnalysisCacheSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadInstanceResponse {
    pub statusCode: u16,
    pub headerCount: u64,
    pub headerKeys: *mut *mut ::std::os::raw::c_char,
    pub headerValues: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_BNDownloadInstanceResponse() {
    assert_eq!(
        ::std::mem::size_of::<BNDownloadInstanceResponse>(),
        32usize,
        concat!("Size of: ", stringify!(BNDownloadInstanceResponse))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDownloadInstanceResponse>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDownloadInstanceResponse))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceResponse>())).statusCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceResponse),
            "::",
            stringify!(statusCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceResponse>())).headerCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceResponse),
            "::",
            stringify!(headerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceResponse>())).headerKeys as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceResponse),
            "::",
            stringify!(headerKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceResponse>())).headerValues as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceResponse),
            "::",
            stringify!(headerValues)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadInstanceInputOutputCallbacks {
    pub readCallback: ::std::option::Option<
        unsafe extern "C" fn(data: *mut u8, len: u64, ctxt: *mut ::std::os::raw::c_void) -> u64,
    >,
    pub readContext: *mut ::std::os::raw::c_void,
    pub writeCallback: ::std::option::Option<
        unsafe extern "C" fn(data: *mut u8, len: u64, ctxt: *mut ::std::os::raw::c_void) -> u64,
    >,
    pub writeContext: *mut ::std::os::raw::c_void,
    pub progressCallback: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, progress: u64, total: u64) -> bool,
    >,
    pub progressContext: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_BNDownloadInstanceInputOutputCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<BNDownloadInstanceInputOutputCallbacks>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<BNDownloadInstanceInputOutputCallbacks>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNDownloadInstanceInputOutputCallbacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceInputOutputCallbacks>())).readCallback
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(readCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceInputOutputCallbacks>())).readContext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(readContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceInputOutputCallbacks>())).writeCallback
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(writeCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceInputOutputCallbacks>())).writeContext
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(writeContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceInputOutputCallbacks>())).progressCallback
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(progressCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceInputOutputCallbacks>())).progressContext
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(progressContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadInstanceOutputCallbacks {
    pub writeCallback: ::std::option::Option<
        unsafe extern "C" fn(data: *mut u8, len: u64, ctxt: *mut ::std::os::raw::c_void) -> u64,
    >,
    pub writeContext: *mut ::std::os::raw::c_void,
    pub progressCallback: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, progress: u64, total: u64) -> bool,
    >,
    pub progressContext: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_BNDownloadInstanceOutputCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<BNDownloadInstanceOutputCallbacks>(),
        32usize,
        concat!("Size of: ", stringify!(BNDownloadInstanceOutputCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDownloadInstanceOutputCallbacks>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNDownloadInstanceOutputCallbacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceOutputCallbacks>())).writeCallback as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceOutputCallbacks),
            "::",
            stringify!(writeCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceOutputCallbacks>())).writeContext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceOutputCallbacks),
            "::",
            stringify!(writeContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceOutputCallbacks>())).progressCallback
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceOutputCallbacks),
            "::",
            stringify!(progressCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceOutputCallbacks>())).progressContext
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceOutputCallbacks),
            "::",
            stringify!(progressContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadInstanceCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub destroyInstance:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub performRequest: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            url: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub performCustomRequest: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            method: *const ::std::os::raw::c_char,
            url: *const ::std::os::raw::c_char,
            headerCount: u64,
            headerKeys: *const *const ::std::os::raw::c_char,
            headerValues: *const *const ::std::os::raw::c_char,
            response: *mut *mut BNDownloadInstanceResponse,
        ) -> ::std::os::raw::c_int,
    >,
    pub freeResponse: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            response: *mut BNDownloadInstanceResponse,
        ),
    >,
}
#[test]
fn bindgen_test_layout_BNDownloadInstanceCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<BNDownloadInstanceCallbacks>(),
        40usize,
        concat!("Size of: ", stringify!(BNDownloadInstanceCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDownloadInstanceCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDownloadInstanceCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceCallbacks>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceCallbacks>())).destroyInstance as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceCallbacks),
            "::",
            stringify!(destroyInstance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceCallbacks>())).performRequest as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceCallbacks),
            "::",
            stringify!(performRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceCallbacks>())).performCustomRequest as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceCallbacks),
            "::",
            stringify!(performCustomRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadInstanceCallbacks>())).freeResponse as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceCallbacks),
            "::",
            stringify!(freeResponse)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadProviderCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub createInstance: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> *mut BNDownloadInstance,
    >,
}
#[test]
fn bindgen_test_layout_BNDownloadProviderCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<BNDownloadProviderCallbacks>(),
        16usize,
        concat!("Size of: ", stringify!(BNDownloadProviderCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDownloadProviderCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDownloadProviderCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadProviderCallbacks>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadProviderCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNDownloadProviderCallbacks>())).createInstance as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadProviderCallbacks),
            "::",
            stringify!(createInstance)
        )
    );
}
pub const BNFindFlag_FindCaseSensitive: BNFindFlag = 0;
pub const BNFindFlag_FindCaseInsensitive: BNFindFlag = 1;
pub type BNFindFlag = ::std::os::raw::c_uint;
pub const BNScriptingProviderInputReadyState_NotReadyForInput: BNScriptingProviderInputReadyState =
    0;
pub const BNScriptingProviderInputReadyState_ReadyForScriptExecution:
    BNScriptingProviderInputReadyState = 1;
pub const BNScriptingProviderInputReadyState_ReadyForScriptProgramInput:
    BNScriptingProviderInputReadyState = 2;
pub type BNScriptingProviderInputReadyState = ::std::os::raw::c_uint;
pub const BNScriptingProviderExecuteResult_InvalidScriptInput: BNScriptingProviderExecuteResult = 0;
pub const BNScriptingProviderExecuteResult_IncompleteScriptInput: BNScriptingProviderExecuteResult =
    1;
pub const BNScriptingProviderExecuteResult_SuccessfulScriptExecution:
    BNScriptingProviderExecuteResult = 2;
pub const BNScriptingProviderExecuteResult_ScriptExecutionCancelled:
    BNScriptingProviderExecuteResult = 3;
pub type BNScriptingProviderExecuteResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNScriptingInstanceCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub destroyInstance:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub executeScriptInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            input: *const ::std::os::raw::c_char,
        ) -> BNScriptingProviderExecuteResult,
    >,
    pub cancelScriptInput:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub setCurrentBinaryView: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
    >,
    pub setCurrentFunction: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, func: *mut BNFunction),
    >,
    pub setCurrentBasicBlock: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, block: *mut BNBasicBlock),
    >,
    pub setCurrentAddress:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, addr: u64)>,
    pub setCurrentSelection: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, begin: u64, end: u64),
    >,
    pub completeInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
            state: u64,
        ) -> *mut ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_BNScriptingInstanceCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<BNScriptingInstanceCallbacks>(),
        80usize,
        concat!("Size of: ", stringify!(BNScriptingInstanceCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNScriptingInstanceCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNScriptingInstanceCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingInstanceCallbacks>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingInstanceCallbacks>())).destroyInstance as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(destroyInstance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingInstanceCallbacks>())).executeScriptInput as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(executeScriptInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingInstanceCallbacks>())).cancelScriptInput as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(cancelScriptInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingInstanceCallbacks>())).setCurrentBinaryView
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(setCurrentBinaryView)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingInstanceCallbacks>())).setCurrentFunction as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(setCurrentFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingInstanceCallbacks>())).setCurrentBasicBlock
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(setCurrentBasicBlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingInstanceCallbacks>())).setCurrentAddress as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(setCurrentAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingInstanceCallbacks>())).setCurrentSelection as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(setCurrentSelection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingInstanceCallbacks>())).completeInput as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(completeInput)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNScriptingProviderCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub createInstance: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> *mut BNScriptingInstance,
    >,
}
#[test]
fn bindgen_test_layout_BNScriptingProviderCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<BNScriptingProviderCallbacks>(),
        16usize,
        concat!("Size of: ", stringify!(BNScriptingProviderCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNScriptingProviderCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNScriptingProviderCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingProviderCallbacks>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingProviderCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingProviderCallbacks>())).createInstance as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingProviderCallbacks),
            "::",
            stringify!(createInstance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNScriptingOutputListener {
    pub context: *mut ::std::os::raw::c_void,
    pub output: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub error: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub inputReadyStateChanged: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            state: BNScriptingProviderInputReadyState,
        ),
    >,
}
#[test]
fn bindgen_test_layout_BNScriptingOutputListener() {
    assert_eq!(
        ::std::mem::size_of::<BNScriptingOutputListener>(),
        32usize,
        concat!("Size of: ", stringify!(BNScriptingOutputListener))
    );
    assert_eq!(
        ::std::mem::align_of::<BNScriptingOutputListener>(),
        8usize,
        concat!("Alignment of ", stringify!(BNScriptingOutputListener))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingOutputListener>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingOutputListener),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingOutputListener>())).output as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingOutputListener),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNScriptingOutputListener>())).error as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingOutputListener),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNScriptingOutputListener>())).inputReadyStateChanged as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingOutputListener),
            "::",
            stringify!(inputReadyStateChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMainThreadCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub addAction: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, action: *mut BNMainThreadAction),
    >,
}
#[test]
fn bindgen_test_layout_BNMainThreadCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<BNMainThreadCallbacks>(),
        16usize,
        concat!("Size of: ", stringify!(BNMainThreadCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMainThreadCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMainThreadCallbacks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMainThreadCallbacks>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMainThreadCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMainThreadCallbacks>())).addAction as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMainThreadCallbacks),
            "::",
            stringify!(addAction)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNConstantReference {
    pub value: i64,
    pub size: size_t,
    pub pointer: bool,
    pub intermediate: bool,
}
#[test]
fn bindgen_test_layout_BNConstantReference() {
    assert_eq!(
        ::std::mem::size_of::<BNConstantReference>(),
        24usize,
        concat!("Size of: ", stringify!(BNConstantReference))
    );
    assert_eq!(
        ::std::mem::align_of::<BNConstantReference>(),
        8usize,
        concat!("Alignment of ", stringify!(BNConstantReference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNConstantReference>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNConstantReference),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNConstantReference>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNConstantReference),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNConstantReference>())).pointer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNConstantReference),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNConstantReference>())).intermediate as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(BNConstantReference),
            "::",
            stringify!(intermediate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMetadataValueStore {
    pub size: size_t,
    pub keys: *mut *mut ::std::os::raw::c_char,
    pub values: *mut *mut BNMetadata,
}
#[test]
fn bindgen_test_layout_BNMetadataValueStore() {
    assert_eq!(
        ::std::mem::size_of::<BNMetadataValueStore>(),
        24usize,
        concat!("Size of: ", stringify!(BNMetadataValueStore))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMetadataValueStore>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMetadataValueStore))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMetadataValueStore>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMetadataValueStore),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMetadataValueStore>())).keys as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMetadataValueStore),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMetadataValueStore>())).values as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMetadataValueStore),
            "::",
            stringify!(values)
        )
    );
}
pub const BNSaveOption_RemoveUndoData: BNSaveOption = 0;
pub const BNSaveOption_TrimSnapshots: BNSaveOption = 1;
pub type BNSaveOption = ::std::os::raw::c_uint;
pub const BNMessageBoxIcon_InformationIcon: BNMessageBoxIcon = 0;
pub const BNMessageBoxIcon_QuestionIcon: BNMessageBoxIcon = 1;
pub const BNMessageBoxIcon_WarningIcon: BNMessageBoxIcon = 2;
pub const BNMessageBoxIcon_ErrorIcon: BNMessageBoxIcon = 3;
pub type BNMessageBoxIcon = ::std::os::raw::c_uint;
pub const BNMessageBoxButtonSet_OKButtonSet: BNMessageBoxButtonSet = 0;
pub const BNMessageBoxButtonSet_YesNoButtonSet: BNMessageBoxButtonSet = 1;
pub const BNMessageBoxButtonSet_YesNoCancelButtonSet: BNMessageBoxButtonSet = 2;
pub type BNMessageBoxButtonSet = ::std::os::raw::c_uint;
pub const BNMessageBoxButtonResult_NoButton: BNMessageBoxButtonResult = 0;
pub const BNMessageBoxButtonResult_YesButton: BNMessageBoxButtonResult = 1;
pub const BNMessageBoxButtonResult_OKButton: BNMessageBoxButtonResult = 2;
pub const BNMessageBoxButtonResult_CancelButton: BNMessageBoxButtonResult = 3;
pub type BNMessageBoxButtonResult = ::std::os::raw::c_uint;
pub const BNFormInputFieldType_LabelFormField: BNFormInputFieldType = 0;
pub const BNFormInputFieldType_SeparatorFormField: BNFormInputFieldType = 1;
pub const BNFormInputFieldType_TextLineFormField: BNFormInputFieldType = 2;
pub const BNFormInputFieldType_MultilineTextFormField: BNFormInputFieldType = 3;
pub const BNFormInputFieldType_IntegerFormField: BNFormInputFieldType = 4;
pub const BNFormInputFieldType_AddressFormField: BNFormInputFieldType = 5;
pub const BNFormInputFieldType_ChoiceFormField: BNFormInputFieldType = 6;
pub const BNFormInputFieldType_OpenFileNameFormField: BNFormInputFieldType = 7;
pub const BNFormInputFieldType_SaveFileNameFormField: BNFormInputFieldType = 8;
pub const BNFormInputFieldType_DirectoryNameFormField: BNFormInputFieldType = 9;
pub type BNFormInputFieldType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFormInputField {
    pub type_: BNFormInputFieldType,
    pub prompt: *const ::std::os::raw::c_char,
    pub view: *mut BNBinaryView,
    pub currentAddress: u64,
    pub choices: *mut *const ::std::os::raw::c_char,
    pub count: size_t,
    pub ext: *const ::std::os::raw::c_char,
    pub defaultName: *const ::std::os::raw::c_char,
    pub intResult: i64,
    pub addressResult: u64,
    pub stringResult: *mut ::std::os::raw::c_char,
    pub indexResult: size_t,
}
#[test]
fn bindgen_test_layout_BNFormInputField() {
    assert_eq!(
        ::std::mem::size_of::<BNFormInputField>(),
        96usize,
        concat!("Size of: ", stringify!(BNFormInputField))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFormInputField>(),
        8usize,
        concat!("Alignment of ", stringify!(BNFormInputField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).prompt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(prompt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).view as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).currentAddress as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(currentAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).choices as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(choices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).count as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).ext as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).defaultName as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(defaultName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).intResult as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(intResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).addressResult as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(addressResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).stringResult as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(stringResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNFormInputField>())).indexResult as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(indexResult)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNInteractionHandlerCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub showPlainTextReport: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            title: *const ::std::os::raw::c_char,
            contents: *const ::std::os::raw::c_char,
        ),
    >,
    pub showMarkdownReport: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            title: *const ::std::os::raw::c_char,
            contents: *const ::std::os::raw::c_char,
            plaintext: *const ::std::os::raw::c_char,
        ),
    >,
    pub showHTMLReport: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            title: *const ::std::os::raw::c_char,
            contents: *const ::std::os::raw::c_char,
            plaintext: *const ::std::os::raw::c_char,
        ),
    >,
    pub showGraphReport: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            title: *const ::std::os::raw::c_char,
            graph: *mut BNFlowGraph,
        ),
    >,
    pub showReportCollection: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            title: *const ::std::os::raw::c_char,
            reports: *mut BNReportCollection,
        ),
    >,
    pub getTextLineInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut *mut ::std::os::raw::c_char,
            prompt: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getIntegerInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut i64,
            prompt: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getAddressInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut u64,
            prompt: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            view: *mut BNBinaryView,
            currentAddr: u64,
        ) -> bool,
    >,
    pub getChoiceInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut size_t,
            prompt: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            choices: *mut *const ::std::os::raw::c_char,
            count: size_t,
        ) -> bool,
    >,
    pub getOpenFileNameInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut *mut ::std::os::raw::c_char,
            prompt: *const ::std::os::raw::c_char,
            ext: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getSaveFileNameInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut *mut ::std::os::raw::c_char,
            prompt: *const ::std::os::raw::c_char,
            ext: *const ::std::os::raw::c_char,
            defaultName: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getDirectoryNameInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut *mut ::std::os::raw::c_char,
            prompt: *const ::std::os::raw::c_char,
            defaultName: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getFormInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            fields: *mut BNFormInputField,
            count: size_t,
            title: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub showMessageBox: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            title: *const ::std::os::raw::c_char,
            text: *const ::std::os::raw::c_char,
            buttons: BNMessageBoxButtonSet,
            icon: BNMessageBoxIcon,
        ) -> BNMessageBoxButtonResult,
    >,
}
#[test]
fn bindgen_test_layout_BNInteractionHandlerCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<BNInteractionHandlerCallbacks>(),
        120usize,
        concat!("Size of: ", stringify!(BNInteractionHandlerCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNInteractionHandlerCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNInteractionHandlerCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).showPlainTextReport
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showPlainTextReport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).showMarkdownReport as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showMarkdownReport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).showHTMLReport as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showHTMLReport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).showGraphReport as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showGraphReport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).showReportCollection
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showReportCollection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).getTextLineInput as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getTextLineInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).getIntegerInput as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getIntegerInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).getAddressInput as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getAddressInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).getChoiceInput as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getChoiceInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).getOpenFileNameInput
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getOpenFileNameInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).getSaveFileNameInput
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getSaveFileNameInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).getDirectoryNameInput
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getDirectoryNameInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).getFormInput as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getFormInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNInteractionHandlerCallbacks>())).showMessageBox as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showMessageBox)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNObjectDestructionCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub destructBinaryView: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
    >,
    pub destructFileMetadata: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, file: *mut BNFileMetadata),
    >,
    pub destructFunction: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, func: *mut BNFunction),
    >,
}
#[test]
fn bindgen_test_layout_BNObjectDestructionCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<BNObjectDestructionCallbacks>(),
        32usize,
        concat!("Size of: ", stringify!(BNObjectDestructionCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNObjectDestructionCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNObjectDestructionCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNObjectDestructionCallbacks>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNObjectDestructionCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNObjectDestructionCallbacks>())).destructBinaryView as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNObjectDestructionCallbacks),
            "::",
            stringify!(destructBinaryView)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNObjectDestructionCallbacks>())).destructFileMetadata
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNObjectDestructionCallbacks),
            "::",
            stringify!(destructFileMetadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNObjectDestructionCallbacks>())).destructFunction as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNObjectDestructionCallbacks),
            "::",
            stringify!(destructFunction)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeContext {
    pub type_: *mut BNType,
    pub offset: size_t,
}
#[test]
fn bindgen_test_layout_BNTypeContext() {
    assert_eq!(
        ::std::mem::size_of::<BNTypeContext>(),
        16usize,
        concat!("Size of: ", stringify!(BNTypeContext))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeContext>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTypeContext>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeContext),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNTypeContext>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeContext),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomDataRenderer {
    pub context: *mut ::std::os::raw::c_void,
    pub freeObject: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub isValidForData: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            addr: u64,
            type_: *mut BNType,
            typeCtx: *mut BNTypeContext,
            ctxCount: size_t,
        ) -> bool,
    >,
    pub getLinesForData: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            addr: u64,
            type_: *mut BNType,
            prefix: *const BNInstructionTextToken,
            prefixCount: size_t,
            width: size_t,
            count: *mut size_t,
            typeCtx: *mut BNTypeContext,
            ctxCount: size_t,
        ) -> *mut BNDisassemblyTextLine,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomDataRenderer() {
    assert_eq!(
        ::std::mem::size_of::<BNCustomDataRenderer>(),
        32usize,
        concat!("Size of: ", stringify!(BNCustomDataRenderer))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomDataRenderer>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomDataRenderer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomDataRenderer>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomDataRenderer),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomDataRenderer>())).freeObject as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomDataRenderer),
            "::",
            stringify!(freeObject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomDataRenderer>())).isValidForData as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomDataRenderer),
            "::",
            stringify!(isValidForData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomDataRenderer>())).getLinesForData as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomDataRenderer),
            "::",
            stringify!(getLinesForData)
        )
    );
}
pub const BNSegmentFlag_SegmentExecutable: BNSegmentFlag = 1;
pub const BNSegmentFlag_SegmentWritable: BNSegmentFlag = 2;
pub const BNSegmentFlag_SegmentReadable: BNSegmentFlag = 4;
pub const BNSegmentFlag_SegmentContainsData: BNSegmentFlag = 8;
pub const BNSegmentFlag_SegmentContainsCode: BNSegmentFlag = 16;
pub const BNSegmentFlag_SegmentDenyWrite: BNSegmentFlag = 32;
pub const BNSegmentFlag_SegmentDenyExecute: BNSegmentFlag = 64;
pub type BNSegmentFlag = ::std::os::raw::c_uint;
pub const BNSectionSemantics_DefaultSectionSemantics: BNSectionSemantics = 0;
pub const BNSectionSemantics_ReadOnlyCodeSectionSemantics: BNSectionSemantics = 1;
pub const BNSectionSemantics_ReadOnlyDataSectionSemantics: BNSectionSemantics = 2;
pub const BNSectionSemantics_ReadWriteDataSectionSemantics: BNSectionSemantics = 3;
pub const BNSectionSemantics_ExternalSectionSemantics: BNSectionSemantics = 4;
pub type BNSectionSemantics = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAddressRange {
    pub start: u64,
    pub end: u64,
}
#[test]
fn bindgen_test_layout_BNAddressRange() {
    assert_eq!(
        ::std::mem::size_of::<BNAddressRange>(),
        16usize,
        concat!("Size of: ", stringify!(BNAddressRange))
    );
    assert_eq!(
        ::std::mem::align_of::<BNAddressRange>(),
        8usize,
        concat!("Alignment of ", stringify!(BNAddressRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNAddressRange>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAddressRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNAddressRange>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAddressRange),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSystemCallInfo {
    pub number: u32,
    pub name: BNQualifiedName,
    pub type_: *mut BNType,
}
#[test]
fn bindgen_test_layout_BNSystemCallInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNSystemCallInfo>(),
        40usize,
        concat!("Size of: ", stringify!(BNSystemCallInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNSystemCallInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNSystemCallInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNSystemCallInfo>())).number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSystemCallInfo),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNSystemCallInfo>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSystemCallInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNSystemCallInfo>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSystemCallInfo),
            "::",
            stringify!(type_)
        )
    );
}
pub const BNILBranchDependence_NotBranchDependent: BNILBranchDependence = 0;
pub const BNILBranchDependence_TrueBranchDependent: BNILBranchDependence = 1;
pub const BNILBranchDependence_FalseBranchDependent: BNILBranchDependence = 2;
pub type BNILBranchDependence = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNILBranchInstructionAndDependence {
    pub branch: size_t,
    pub dependence: BNILBranchDependence,
}
#[test]
fn bindgen_test_layout_BNILBranchInstructionAndDependence() {
    assert_eq!(
        ::std::mem::size_of::<BNILBranchInstructionAndDependence>(),
        16usize,
        concat!("Size of: ", stringify!(BNILBranchInstructionAndDependence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNILBranchInstructionAndDependence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNILBranchInstructionAndDependence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNILBranchInstructionAndDependence>())).branch as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILBranchInstructionAndDependence),
            "::",
            stringify!(branch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNILBranchInstructionAndDependence>())).dependence as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILBranchInstructionAndDependence),
            "::",
            stringify!(dependence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNPerformanceInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub seconds: f64,
}
#[test]
fn bindgen_test_layout_BNPerformanceInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNPerformanceInfo>(),
        16usize,
        concat!("Size of: ", stringify!(BNPerformanceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNPerformanceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNPerformanceInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPerformanceInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPerformanceInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNPerformanceInfo>())).seconds as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPerformanceInfo),
            "::",
            stringify!(seconds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMemoryUsageInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_BNMemoryUsageInfo() {
    assert_eq!(
        ::std::mem::size_of::<BNMemoryUsageInfo>(),
        16usize,
        concat!("Size of: ", stringify!(BNMemoryUsageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMemoryUsageInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMemoryUsageInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMemoryUsageInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMemoryUsageInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNMemoryUsageInfo>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMemoryUsageInfo),
            "::",
            stringify!(value)
        )
    );
}
pub const BNMetadataType_InvalidDataType: BNMetadataType = 0;
pub const BNMetadataType_BooleanDataType: BNMetadataType = 1;
pub const BNMetadataType_StringDataType: BNMetadataType = 2;
pub const BNMetadataType_UnsignedIntegerDataType: BNMetadataType = 3;
pub const BNMetadataType_SignedIntegerDataType: BNMetadataType = 4;
pub const BNMetadataType_DoubleDataType: BNMetadataType = 5;
pub const BNMetadataType_RawDataType: BNMetadataType = 6;
pub const BNMetadataType_KeyValueDataType: BNMetadataType = 7;
pub const BNMetadataType_ArrayDataType: BNMetadataType = 8;
pub type BNMetadataType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterStackAdjustment {
    pub regStack: u32,
    pub adjustment: i32,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNRegisterStackAdjustment() {
    assert_eq!(
        ::std::mem::size_of::<BNRegisterStackAdjustment>(),
        12usize,
        concat!("Size of: ", stringify!(BNRegisterStackAdjustment))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterStackAdjustment>(),
        4usize,
        concat!("Alignment of ", stringify!(BNRegisterStackAdjustment))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterStackAdjustment>())).regStack as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackAdjustment),
            "::",
            stringify!(regStack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterStackAdjustment>())).adjustment as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackAdjustment),
            "::",
            stringify!(adjustment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNRegisterStackAdjustment>())).confidence as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackAdjustment),
            "::",
            stringify!(confidence)
        )
    );
}
pub const BNFunctionAnalysisSkipOverride_DefaultFunctionAnalysisSkip:
    BNFunctionAnalysisSkipOverride = 0;
pub const BNFunctionAnalysisSkipOverride_NeverSkipFunctionAnalysis: BNFunctionAnalysisSkipOverride =
    1;
pub const BNFunctionAnalysisSkipOverride_AlwaysSkipFunctionAnalysis:
    BNFunctionAnalysisSkipOverride = 2;
pub type BNFunctionAnalysisSkipOverride = ::std::os::raw::c_uint;
pub const BNReportType_PlainTextReportType: BNReportType = 0;
pub const BNReportType_MarkdownReportType: BNReportType = 1;
pub const BNReportType_HTMLReportType: BNReportType = 2;
pub const BNReportType_FlowGraphReportType: BNReportType = 3;
pub type BNReportType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomFlowGraph {
    pub context: *mut ::std::os::raw::c_void,
    pub prepareForLayout:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub populateNodes:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub completeLayout:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> *mut BNFlowGraph,
    >,
    pub freeObject: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub externalRefTaken:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub externalRefReleased:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_BNCustomFlowGraph() {
    assert_eq!(
        ::std::mem::size_of::<BNCustomFlowGraph>(),
        64usize,
        concat!("Size of: ", stringify!(BNCustomFlowGraph))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomFlowGraph>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomFlowGraph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomFlowGraph>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomFlowGraph>())).prepareForLayout as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(prepareForLayout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomFlowGraph>())).populateNodes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(populateNodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomFlowGraph>())).completeLayout as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(completeLayout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomFlowGraph>())).update as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNCustomFlowGraph>())).freeObject as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(freeObject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomFlowGraph>())).externalRefTaken as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(externalRefTaken)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNCustomFlowGraph>())).externalRefReleased as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(externalRefReleased)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRange {
    pub start: u64,
    pub end: u64,
}
#[test]
fn bindgen_test_layout_BNRange() {
    assert_eq!(
        ::std::mem::size_of::<BNRange>(),
        16usize,
        concat!("Size of: ", stringify!(BNRange))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRange>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRange>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNRange>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRange),
            "::",
            stringify!(end)
        )
    );
}
pub const BNAnalysisSkipReason_NoSkipReason: BNAnalysisSkipReason = 0;
pub const BNAnalysisSkipReason_AlwaysSkipReason: BNAnalysisSkipReason = 1;
pub const BNAnalysisSkipReason_ExceedFunctionSizeSkipReason: BNAnalysisSkipReason = 2;
pub const BNAnalysisSkipReason_ExceedFunctionAnalysisTimeSkipReason: BNAnalysisSkipReason = 3;
pub const BNAnalysisSkipReason_ExceedFunctionUpdateCountSkipReason: BNAnalysisSkipReason = 4;
pub const BNAnalysisSkipReason_NewAutoFunctionAnalysisSuppressedReason: BNAnalysisSkipReason = 5;
pub const BNAnalysisSkipReason_BasicAnalysisSkipReason: BNAnalysisSkipReason = 6;
pub const BNAnalysisSkipReason_IntermediateAnalysisSkipReason: BNAnalysisSkipReason = 7;
pub type BNAnalysisSkipReason = ::std::os::raw::c_uint;
pub const BNSettingsScope_SettingsInvalidScope: BNSettingsScope = 0;
pub const BNSettingsScope_SettingsAutoScope: BNSettingsScope = 1;
pub const BNSettingsScope_SettingsDefaultScope: BNSettingsScope = 2;
pub const BNSettingsScope_SettingsUserScope: BNSettingsScope = 4;
pub const BNSettingsScope_SettingsProjectScope: BNSettingsScope = 8;
pub const BNSettingsScope_SettingsResourceScope: BNSettingsScope = 16;
pub type BNSettingsScope = ::std::os::raw::c_uint;
pub const BNLinearViewObjectIdentifierType_SingleLinearViewObject:
    BNLinearViewObjectIdentifierType = 0;
pub const BNLinearViewObjectIdentifierType_AddressLinearViewObject:
    BNLinearViewObjectIdentifierType = 1;
pub const BNLinearViewObjectIdentifierType_AddressRangeLinearViewObject:
    BNLinearViewObjectIdentifierType = 2;
pub type BNLinearViewObjectIdentifierType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLinearViewObjectIdentifier {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: BNLinearViewObjectIdentifierType,
    pub start: u64,
    pub end: u64,
}
#[test]
fn bindgen_test_layout_BNLinearViewObjectIdentifier() {
    assert_eq!(
        ::std::mem::size_of::<BNLinearViewObjectIdentifier>(),
        32usize,
        concat!("Size of: ", stringify!(BNLinearViewObjectIdentifier))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLinearViewObjectIdentifier>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLinearViewObjectIdentifier))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNLinearViewObjectIdentifier>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearViewObjectIdentifier),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNLinearViewObjectIdentifier>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearViewObjectIdentifier),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNLinearViewObjectIdentifier>())).start as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearViewObjectIdentifier),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BNLinearViewObjectIdentifier>())).end as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearViewObjectIdentifier),
            "::",
            stringify!(end)
        )
    );
}
pub const BNBinaryViewEventType_BinaryViewFinalizationEvent: BNBinaryViewEventType = 0;
pub const BNBinaryViewEventType_BinaryViewInitialAnalysisCompletionEvent: BNBinaryViewEventType = 1;
pub type BNBinaryViewEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryViewEvent {
    pub type_: BNBinaryViewEventType,
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
    >,
    pub ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_BNBinaryViewEvent() {
    assert_eq!(
        ::std::mem::size_of::<BNBinaryViewEvent>(),
        24usize,
        concat!("Size of: ", stringify!(BNBinaryViewEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<BNBinaryViewEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(BNBinaryViewEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNBinaryViewEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryViewEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNBinaryViewEvent>())).callback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryViewEvent),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BNBinaryViewEvent>())).ctx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryViewEvent),
            "::",
            stringify!(ctx)
        )
    );
}
pub const BNDeadStoreElimination_DefaultDeadStoreElimination: BNDeadStoreElimination = 0;
pub const BNDeadStoreElimination_PreventDeadStoreElimination: BNDeadStoreElimination = 1;
pub const BNDeadStoreElimination_AllowDeadStoreElimination: BNDeadStoreElimination = 2;
pub type BNDeadStoreElimination = ::std::os::raw::c_uint;
extern "C" {
    pub fn BNAllocString(contents: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreeString(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAllocStringList(
        contents: *mut *const ::std::os::raw::c_char,
        size: size_t,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreeStringList(strs: *mut *mut ::std::os::raw::c_char, count: size_t);
}
extern "C" {
    pub fn BNShutdown();
}
extern "C" {
    pub fn BNIsShutdownRequested() -> bool;
}
extern "C" {
    pub fn BNGetVersionString() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetBuildId() -> u32;
}
extern "C" {
    pub fn BNGetSerialNumber() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetLicenseExpirationTime() -> u64;
}
extern "C" {
    pub fn BNIsLicenseValidated() -> bool;
}
extern "C" {
    pub fn BNGetLicensedUserEmail() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetProduct() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetProductType() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetLicenseCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNIsUIEnabled() -> bool;
}
extern "C" {
    pub fn BNSetLicense(licenseData: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNRegisterObjectDestructionCallbacks(callbacks: *mut BNObjectDestructionCallbacks);
}
extern "C" {
    pub fn BNUnregisterObjectDestructionCallbacks(callbacks: *mut BNObjectDestructionCallbacks);
}
extern "C" {
    pub fn BNGetUniqueIdentifierString() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNInitPlugins(allowUserPlugins: bool) -> bool;
}
extern "C" {
    pub fn BNInitCorePlugins() -> bool;
}
extern "C" {
    pub fn BNDisablePlugins();
}
extern "C" {
    pub fn BNIsPluginsEnabled() -> bool;
}
extern "C" {
    pub fn BNInitUserPlugins();
}
extern "C" {
    pub fn BNInitRepoPlugins();
}
extern "C" {
    pub fn BNGetInstallDirectory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetBundledPluginDirectory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetBundledPluginDirectory(path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetUserDirectory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetUserPluginDirectory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetRepositoriesDirectory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetSettingsFileName() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSaveLastRun();
}
extern "C" {
    pub fn BNGetPathRelativeToBundledPluginDirectory(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetPathRelativeToUserPluginDirectory(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetPathRelativeToUserDirectory(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNExecuteWorkerProcess(
        path: *const ::std::os::raw::c_char,
        args: *mut *const ::std::os::raw::c_char,
        input: *mut BNDataBuffer,
        output: *mut *mut ::std::os::raw::c_char,
        error: *mut *mut ::std::os::raw::c_char,
        stdoutIsText: bool,
        stderrIsText: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNSetCurrentPluginLoadOrder(order: BNPluginLoadOrder);
}
extern "C" {
    pub fn BNAddRequiredPluginDependency(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddOptionalPluginDependency(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNLog(level: BNLogLevel, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogDebug(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogInfo(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogWarn(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogError(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogAlert(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogString(level: BNLogLevel, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNRegisterLogListener(listener: *mut BNLogListener);
}
extern "C" {
    pub fn BNUnregisterLogListener(listener: *mut BNLogListener);
}
extern "C" {
    pub fn BNUpdateLogListeners();
}
extern "C" {
    pub fn BNLogToStdout(minimumLevel: BNLogLevel);
}
extern "C" {
    pub fn BNLogToStderr(minimumLevel: BNLogLevel);
}
extern "C" {
    pub fn BNLogToFile(
        minimumLevel: BNLogLevel,
        path: *const ::std::os::raw::c_char,
        append: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNCloseLogs();
}
extern "C" {
    pub fn BNCreateTemporaryFile() -> *mut BNTemporaryFile;
}
extern "C" {
    pub fn BNCreateTemporaryFileWithContents(data: *mut BNDataBuffer) -> *mut BNTemporaryFile;
}
extern "C" {
    pub fn BNNewTemporaryFileReference(file: *mut BNTemporaryFile) -> *mut BNTemporaryFile;
}
extern "C" {
    pub fn BNFreeTemporaryFile(file: *mut BNTemporaryFile);
}
extern "C" {
    pub fn BNGetTemporaryFilePath(file: *mut BNTemporaryFile) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTemporaryFileContents(file: *mut BNTemporaryFile) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNCreateDataBuffer(
        data: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNDuplicateDataBuffer(buf: *mut BNDataBuffer) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNFreeDataBuffer(buf: *mut BNDataBuffer);
}
extern "C" {
    pub fn BNGetDataBufferContents(buf: *mut BNDataBuffer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BNGetDataBufferContentsAt(
        buf: *mut BNDataBuffer,
        offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BNGetDataBufferLength(buf: *mut BNDataBuffer) -> size_t;
}
extern "C" {
    pub fn BNGetDataBufferSlice(
        buf: *mut BNDataBuffer,
        start: size_t,
        len: size_t,
    ) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNSetDataBufferLength(buf: *mut BNDataBuffer, len: size_t);
}
extern "C" {
    pub fn BNClearDataBuffer(buf: *mut BNDataBuffer);
}
extern "C" {
    pub fn BNSetDataBufferContents(
        buf: *mut BNDataBuffer,
        data: *mut ::std::os::raw::c_void,
        len: size_t,
    );
}
extern "C" {
    pub fn BNAssignDataBuffer(dest: *mut BNDataBuffer, src: *mut BNDataBuffer);
}
extern "C" {
    pub fn BNAppendDataBuffer(dest: *mut BNDataBuffer, src: *mut BNDataBuffer);
}
extern "C" {
    pub fn BNAppendDataBufferContents(
        dest: *mut BNDataBuffer,
        src: *const ::std::os::raw::c_void,
        len: size_t,
    );
}
extern "C" {
    pub fn BNGetDataBufferByte(buf: *mut BNDataBuffer, offset: size_t) -> u8;
}
extern "C" {
    pub fn BNSetDataBufferByte(buf: *mut BNDataBuffer, offset: size_t, val: u8);
}
extern "C" {
    pub fn BNDataBufferToEscapedString(buf: *mut BNDataBuffer) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNDecodeEscapedString(str_: *const ::std::os::raw::c_char) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNDataBufferToBase64(buf: *mut BNDataBuffer) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNDecodeBase64(str_: *const ::std::os::raw::c_char) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNZlibCompress(buf: *mut BNDataBuffer) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNZlibDecompress(buf: *mut BNDataBuffer) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNCreateSaveSettings() -> *mut BNSaveSettings;
}
extern "C" {
    pub fn BNNewSaveSettingsReference(settings: *mut BNSaveSettings) -> *mut BNSaveSettings;
}
extern "C" {
    pub fn BNFreeSaveSettings(settings: *mut BNSaveSettings);
}
extern "C" {
    pub fn BNIsSaveSettingsOptionSet(settings: *mut BNSaveSettings, option: BNSaveOption) -> bool;
}
extern "C" {
    pub fn BNSetSaveSettingsOption(
        settings: *mut BNSaveSettings,
        option: BNSaveOption,
        state: bool,
    );
}
extern "C" {
    pub fn BNCreateFileMetadata() -> *mut BNFileMetadata;
}
extern "C" {
    pub fn BNNewFileReference(file: *mut BNFileMetadata) -> *mut BNFileMetadata;
}
extern "C" {
    pub fn BNFreeFileMetadata(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNCloseFile(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNSetFileMetadataNavigationHandler(
        file: *mut BNFileMetadata,
        handler: *mut BNNavigationHandler,
    );
}
extern "C" {
    pub fn BNIsFileModified(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNIsAnalysisChanged(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNMarkFileModified(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNMarkFileSaved(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNIsBackedByDatabase(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNCreateDatabase(
        data: *mut BNBinaryView,
        path: *const ::std::os::raw::c_char,
        settings: *mut BNSaveSettings,
    ) -> bool;
}
extern "C" {
    pub fn BNCreateDatabaseWithProgress(
        data: *mut BNBinaryView,
        path: *const ::std::os::raw::c_char,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: size_t,
                total: size_t,
            ),
        >,
        settings: *mut BNSaveSettings,
    ) -> bool;
}
extern "C" {
    pub fn BNOpenExistingDatabase(
        file: *mut BNFileMetadata,
        path: *const ::std::os::raw::c_char,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNOpenExistingDatabaseWithProgress(
        file: *mut BNFileMetadata,
        path: *const ::std::os::raw::c_char,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: size_t,
                total: size_t,
            ),
        >,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNOpenDatabaseForConfiguration(
        file: *mut BNFileMetadata,
        path: *const ::std::os::raw::c_char,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNSaveAutoSnapshot(data: *mut BNBinaryView, settings: *mut BNSaveSettings) -> bool;
}
extern "C" {
    pub fn BNSaveAutoSnapshotWithProgress(
        data: *mut BNBinaryView,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: size_t,
                total: size_t,
            ),
        >,
        settings: *mut BNSaveSettings,
    ) -> bool;
}
extern "C" {
    pub fn BNRebase(data: *mut BNBinaryView, address: u64) -> bool;
}
extern "C" {
    pub fn BNRebaseWithProgress(
        data: *mut BNBinaryView,
        address: u64,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: size_t,
                total: size_t,
            ),
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNMergeUserAnalysis(
        file: *mut BNFileMetadata,
        name: *const ::std::os::raw::c_char,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: size_t,
                total: size_t,
            ),
        >,
        excludedHashes: *mut *mut ::std::os::raw::c_char,
        excludedHashesCount: size_t,
    ) -> BNMergeResult;
}
extern "C" {
    pub fn BNGetOriginalFilename(file: *mut BNFileMetadata) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetOriginalFilename(file: *mut BNFileMetadata, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetFilename(file: *mut BNFileMetadata) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetFilename(file: *mut BNFileMetadata, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNBeginUndoActions(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNCommitUndoActions(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNUndo(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNRedo(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNGetUndoEntries(file: *mut BNFileMetadata, count: *mut size_t) -> *mut BNUndoEntry;
}
extern "C" {
    pub fn BNFreeUndoEntries(entries: *mut BNUndoEntry, count: size_t);
}
extern "C" {
    pub fn BNNewUserReference(user: *mut BNUser) -> *mut BNUser;
}
extern "C" {
    pub fn BNFreeUser(user: *mut BNUser);
}
extern "C" {
    pub fn BNGetUsers(file: *mut BNFileMetadata, count: *mut size_t) -> *mut *mut BNUser;
}
extern "C" {
    pub fn BNFreeUserList(users: *mut *mut BNUser, count: size_t);
}
extern "C" {
    pub fn BNGetUserName(user: *mut BNUser) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetUserEmail(user: *mut BNUser) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetUserId(user: *mut BNUser) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNOpenProject(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNCloseProject(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNIsProjectOpen(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNGetCurrentView(file: *mut BNFileMetadata) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetCurrentOffset(file: *mut BNFileMetadata) -> u64;
}
extern "C" {
    pub fn BNNavigate(
        file: *mut BNFileMetadata,
        view: *const ::std::os::raw::c_char,
        offset: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetFileViewOfType(
        file: *mut BNFileMetadata,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNGetExistingViews(
        file: *mut BNFileMetadata,
        count: *mut size_t,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNIsSnapshotDataAppliedWithoutError(view: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNNewViewReference(view: *mut BNBinaryView) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNFreeBinaryView(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNGetFileForView(view: *mut BNBinaryView) -> *mut BNFileMetadata;
}
extern "C" {
    pub fn BNGetViewType(view: *mut BNBinaryView) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetParentView(view: *mut BNBinaryView) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNReadViewData(
        view: *mut BNBinaryView,
        dest: *mut ::std::os::raw::c_void,
        offset: u64,
        len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNReadViewBuffer(view: *mut BNBinaryView, offset: u64, len: size_t)
        -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNWriteViewData(
        view: *mut BNBinaryView,
        offset: u64,
        data: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNWriteViewBuffer(
        view: *mut BNBinaryView,
        offset: u64,
        data: *mut BNDataBuffer,
    ) -> size_t;
}
extern "C" {
    pub fn BNInsertViewData(
        view: *mut BNBinaryView,
        offset: u64,
        data: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNInsertViewBuffer(
        view: *mut BNBinaryView,
        offset: u64,
        data: *mut BNDataBuffer,
    ) -> size_t;
}
extern "C" {
    pub fn BNRemoveViewData(view: *mut BNBinaryView, offset: u64, len: u64) -> size_t;
}
extern "C" {
    pub fn BNNotifyDataWritten(view: *mut BNBinaryView, offset: u64, len: size_t);
}
extern "C" {
    pub fn BNNotifyDataInserted(view: *mut BNBinaryView, offset: u64, len: size_t);
}
extern "C" {
    pub fn BNNotifyDataRemoved(view: *mut BNBinaryView, offset: u64, len: u64);
}
extern "C" {
    pub fn BNGetEntropy(
        view: *mut BNBinaryView,
        offset: u64,
        len: size_t,
        blockSize: size_t,
        result: *mut f32,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetModification(view: *mut BNBinaryView, offset: u64) -> BNModificationStatus;
}
extern "C" {
    pub fn BNGetModificationArray(
        view: *mut BNBinaryView,
        offset: u64,
        result: *mut BNModificationStatus,
        len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNIsValidOffset(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetReadable(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetWritable(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetExecutable(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetBackedByFile(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetCodeSemantics(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetExternSemantics(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetWritableSemantics(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNGetNextValidOffset(view: *mut BNBinaryView, offset: u64) -> u64;
}
extern "C" {
    pub fn BNGetStartOffset(view: *mut BNBinaryView) -> u64;
}
extern "C" {
    pub fn BNGetEndOffset(view: *mut BNBinaryView) -> u64;
}
extern "C" {
    pub fn BNGetViewLength(view: *mut BNBinaryView) -> u64;
}
extern "C" {
    pub fn BNGetEntryPoint(view: *mut BNBinaryView) -> u64;
}
extern "C" {
    pub fn BNGetDefaultArchitecture(view: *mut BNBinaryView) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNSetDefaultArchitecture(view: *mut BNBinaryView, arch: *mut BNArchitecture);
}
extern "C" {
    pub fn BNGetDefaultPlatform(view: *mut BNBinaryView) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNSetDefaultPlatform(view: *mut BNBinaryView, platform: *mut BNPlatform);
}
extern "C" {
    pub fn BNGetDefaultEndianness(view: *mut BNBinaryView) -> BNEndianness;
}
extern "C" {
    pub fn BNIsRelocatable(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNGetViewAddressSize(view: *mut BNBinaryView) -> size_t;
}
extern "C" {
    pub fn BNIsViewModified(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNIsExecutableView(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNSaveToFile(view: *mut BNBinaryView, file: *mut BNFileAccessor) -> bool;
}
extern "C" {
    pub fn BNSaveToFilename(
        view: *mut BNBinaryView,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNDefineRelocation(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        info: *mut BNRelocationInfo,
        target: u64,
        reloc: u64,
    );
}
extern "C" {
    pub fn BNDefineSymbolRelocation(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        info: *mut BNRelocationInfo,
        target: *mut BNSymbol,
        reloc: u64,
    );
}
extern "C" {
    pub fn BNGetRelocationRanges(segment: *mut BNBinaryView, count: *mut size_t) -> *mut BNRange;
}
extern "C" {
    pub fn BNGetRelocationRangesAtAddress(
        segment: *mut BNBinaryView,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNRange;
}
extern "C" {
    pub fn BNRegisterDataNotification(
        view: *mut BNBinaryView,
        notify: *mut BNBinaryDataNotification,
    );
}
extern "C" {
    pub fn BNUnregisterDataNotification(
        view: *mut BNBinaryView,
        notify: *mut BNBinaryDataNotification,
    );
}
extern "C" {
    pub fn BNCanAssemble(view: *mut BNBinaryView, arch: *mut BNArchitecture) -> bool;
}
extern "C" {
    pub fn BNIsNeverBranchPatchAvailable(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNIsAlwaysBranchPatchAvailable(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNIsInvertBranchPatchAvailable(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNIsSkipAndReturnZeroPatchAvailable(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNIsSkipAndReturnValuePatchAvailable(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNConvertToNop(view: *mut BNBinaryView, arch: *mut BNArchitecture, addr: u64) -> bool;
}
extern "C" {
    pub fn BNAlwaysBranch(view: *mut BNBinaryView, arch: *mut BNArchitecture, addr: u64) -> bool;
}
extern "C" {
    pub fn BNInvertBranch(view: *mut BNBinaryView, arch: *mut BNArchitecture, addr: u64) -> bool;
}
extern "C" {
    pub fn BNSkipAndReturnValue(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
        value: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetInstructionLength(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNFindNextData(
        view: *mut BNBinaryView,
        start: u64,
        data: *mut BNDataBuffer,
        result: *mut u64,
        flags: BNFindFlag,
    ) -> bool;
}
extern "C" {
    pub fn BNFindNextText(
        view: *mut BNBinaryView,
        start: u64,
        data: *const ::std::os::raw::c_char,
        result: *mut u64,
        settings: *mut BNDisassemblySettings,
        flags: BNFindFlag,
    ) -> bool;
}
extern "C" {
    pub fn BNFindNextConstant(
        view: *mut BNBinaryView,
        start: u64,
        constant: u64,
        result: *mut u64,
        settings: *mut BNDisassemblySettings,
    ) -> bool;
}
extern "C" {
    pub fn BNFindNextDataWithProgress(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        data: *mut BNDataBuffer,
        result: *mut u64,
        flags: BNFindFlag,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: size_t,
                total: size_t,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNFindNextTextWithProgress(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        data: *const ::std::os::raw::c_char,
        result: *mut u64,
        settings: *mut BNDisassemblySettings,
        flags: BNFindFlag,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: size_t,
                total: size_t,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNFindNextConstantWithProgress(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        constant: u64,
        result: *mut u64,
        settings: *mut BNDisassemblySettings,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: size_t,
                total: size_t,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNAddAutoSegment(
        view: *mut BNBinaryView,
        start: u64,
        length: u64,
        dataOffset: u64,
        dataLength: u64,
        flags: u32,
    );
}
extern "C" {
    pub fn BNRemoveAutoSegment(view: *mut BNBinaryView, start: u64, length: u64);
}
extern "C" {
    pub fn BNAddUserSegment(
        view: *mut BNBinaryView,
        start: u64,
        length: u64,
        dataOffset: u64,
        dataLength: u64,
        flags: u32,
    );
}
extern "C" {
    pub fn BNRemoveUserSegment(view: *mut BNBinaryView, start: u64, length: u64);
}
extern "C" {
    pub fn BNGetSegments(view: *mut BNBinaryView, count: *mut size_t) -> *mut *mut BNSegment;
}
extern "C" {
    pub fn BNFreeSegmentList(segments: *mut *mut BNSegment, count: size_t);
}
extern "C" {
    pub fn BNGetSegmentAt(view: *mut BNBinaryView, addr: u64) -> *mut BNSegment;
}
extern "C" {
    pub fn BNGetAddressForDataOffset(view: *mut BNBinaryView, offset: u64, addr: *mut u64) -> bool;
}
extern "C" {
    pub fn BNAddAutoSection(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        start: u64,
        length: u64,
        semantics: BNSectionSemantics,
        type_: *const ::std::os::raw::c_char,
        align: u64,
        entrySize: u64,
        linkedSection: *const ::std::os::raw::c_char,
        infoSection: *const ::std::os::raw::c_char,
        infoData: u64,
    );
}
extern "C" {
    pub fn BNRemoveAutoSection(view: *mut BNBinaryView, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddUserSection(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        start: u64,
        length: u64,
        semantics: BNSectionSemantics,
        type_: *const ::std::os::raw::c_char,
        align: u64,
        entrySize: u64,
        linkedSection: *const ::std::os::raw::c_char,
        infoSection: *const ::std::os::raw::c_char,
        infoData: u64,
    );
}
extern "C" {
    pub fn BNRemoveUserSection(view: *mut BNBinaryView, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetSections(view: *mut BNBinaryView, count: *mut size_t) -> *mut *mut BNSection;
}
extern "C" {
    pub fn BNGetSectionsAt(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut size_t,
    ) -> *mut *mut BNSection;
}
extern "C" {
    pub fn BNFreeSectionList(sections: *mut *mut BNSection, count: size_t);
}
extern "C" {
    pub fn BNGetSectionByName(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNSection;
}
extern "C" {
    pub fn BNGetUniqueSectionNames(
        view: *mut BNBinaryView,
        names: *mut *const ::std::os::raw::c_char,
        count: size_t,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetNameSpaces(view: *mut BNBinaryView, count: *mut size_t) -> *mut BNNameSpace;
}
extern "C" {
    pub fn BNFreeNameSpaceList(nameSpace: *mut BNNameSpace, count: size_t);
}
extern "C" {
    pub fn BNGetExternalNameSpace() -> BNNameSpace;
}
extern "C" {
    pub fn BNGetInternalNameSpace() -> BNNameSpace;
}
extern "C" {
    pub fn BNFreeNameSpace(name: *mut BNNameSpace);
}
extern "C" {
    pub fn BNGetAllocatedRanges(view: *mut BNBinaryView, count: *mut size_t)
        -> *mut BNAddressRange;
}
extern "C" {
    pub fn BNFreeAddressRanges(ranges: *mut BNAddressRange);
}
extern "C" {
    pub fn BNGetGlobalPointerValue(view: *mut BNBinaryView) -> BNRegisterValueWithConfidence;
}
extern "C" {
    pub fn BNCreateBinaryDataView(file: *mut BNFileMetadata) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNCreateBinaryDataViewFromBuffer(
        file: *mut BNFileMetadata,
        buf: *mut BNDataBuffer,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNCreateBinaryDataViewFromData(
        file: *mut BNFileMetadata,
        data: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNCreateBinaryDataViewFromFilename(
        file: *mut BNFileMetadata,
        filename: *const ::std::os::raw::c_char,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNCreateBinaryDataViewFromFile(
        file: *mut BNFileMetadata,
        accessor: *mut BNFileAccessor,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNCreateCustomBinaryView(
        name: *const ::std::os::raw::c_char,
        file: *mut BNFileMetadata,
        parent: *mut BNBinaryView,
        view: *mut BNCustomBinaryView,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNGetBinaryViewTypeByName(name: *const ::std::os::raw::c_char) -> *mut BNBinaryViewType;
}
extern "C" {
    pub fn BNGetBinaryViewTypes(count: *mut size_t) -> *mut *mut BNBinaryViewType;
}
extern "C" {
    pub fn BNGetBinaryViewTypesForData(
        data: *mut BNBinaryView,
        count: *mut size_t,
    ) -> *mut *mut BNBinaryViewType;
}
extern "C" {
    pub fn BNFreeBinaryViewTypeList(types: *mut *mut BNBinaryViewType);
}
extern "C" {
    pub fn BNGetBinaryViewTypeName(type_: *mut BNBinaryViewType) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetBinaryViewTypeLongName(type_: *mut BNBinaryViewType)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNIsBinaryViewTypeDeprecated(type_: *mut BNBinaryViewType) -> bool;
}
extern "C" {
    pub fn BNCreateBinaryViewOfType(
        type_: *mut BNBinaryViewType,
        data: *mut BNBinaryView,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNParseBinaryViewOfType(
        type_: *mut BNBinaryViewType,
        data: *mut BNBinaryView,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNIsBinaryViewTypeValidForData(
        type_: *mut BNBinaryViewType,
        data: *mut BNBinaryView,
    ) -> bool;
}
extern "C" {
    pub fn BNGetBinaryViewDefaultLoadSettingsForData(
        type_: *mut BNBinaryViewType,
        data: *mut BNBinaryView,
    ) -> *mut BNSettings;
}
extern "C" {
    pub fn BNGetBinaryViewLoadSettingsForData(
        type_: *mut BNBinaryViewType,
        data: *mut BNBinaryView,
    ) -> *mut BNSettings;
}
extern "C" {
    pub fn BNRegisterBinaryViewType(
        name: *const ::std::os::raw::c_char,
        longName: *const ::std::os::raw::c_char,
        type_: *mut BNCustomBinaryViewType,
    ) -> *mut BNBinaryViewType;
}
extern "C" {
    pub fn BNRegisterArchitectureForViewType(
        type_: *mut BNBinaryViewType,
        id: u32,
        endian: BNEndianness,
        arch: *mut BNArchitecture,
    );
}
extern "C" {
    pub fn BNGetArchitectureForViewType(
        type_: *mut BNBinaryViewType,
        id: u32,
        endian: BNEndianness,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNRegisterPlatformForViewType(
        type_: *mut BNBinaryViewType,
        id: u32,
        arch: *mut BNArchitecture,
        platform: *mut BNPlatform,
    );
}
extern "C" {
    pub fn BNRegisterDefaultPlatformForViewType(
        type_: *mut BNBinaryViewType,
        arch: *mut BNArchitecture,
        platform: *mut BNPlatform,
    );
}
extern "C" {
    pub fn BNGetPlatformForViewType(
        type_: *mut BNBinaryViewType,
        id: u32,
        arch: *mut BNArchitecture,
    ) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNRegisterBinaryViewEvent(
        type_: BNBinaryViewEventType,
        callback: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
        >,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNCreateBinaryReader(view: *mut BNBinaryView) -> *mut BNBinaryReader;
}
extern "C" {
    pub fn BNFreeBinaryReader(stream: *mut BNBinaryReader);
}
extern "C" {
    pub fn BNGetBinaryReaderEndianness(stream: *mut BNBinaryReader) -> BNEndianness;
}
extern "C" {
    pub fn BNSetBinaryReaderEndianness(stream: *mut BNBinaryReader, endian: BNEndianness);
}
extern "C" {
    pub fn BNReadData(
        stream: *mut BNBinaryReader,
        dest: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNRead8(stream: *mut BNBinaryReader, result: *mut u8) -> bool;
}
extern "C" {
    pub fn BNRead16(stream: *mut BNBinaryReader, result: *mut u16) -> bool;
}
extern "C" {
    pub fn BNRead32(stream: *mut BNBinaryReader, result: *mut u32) -> bool;
}
extern "C" {
    pub fn BNRead64(stream: *mut BNBinaryReader, result: *mut u64) -> bool;
}
extern "C" {
    pub fn BNReadLE16(stream: *mut BNBinaryReader, result: *mut u16) -> bool;
}
extern "C" {
    pub fn BNReadLE32(stream: *mut BNBinaryReader, result: *mut u32) -> bool;
}
extern "C" {
    pub fn BNReadLE64(stream: *mut BNBinaryReader, result: *mut u64) -> bool;
}
extern "C" {
    pub fn BNReadBE16(stream: *mut BNBinaryReader, result: *mut u16) -> bool;
}
extern "C" {
    pub fn BNReadBE32(stream: *mut BNBinaryReader, result: *mut u32) -> bool;
}
extern "C" {
    pub fn BNReadBE64(stream: *mut BNBinaryReader, result: *mut u64) -> bool;
}
extern "C" {
    pub fn BNGetReaderPosition(stream: *mut BNBinaryReader) -> u64;
}
extern "C" {
    pub fn BNSeekBinaryReader(stream: *mut BNBinaryReader, offset: u64);
}
extern "C" {
    pub fn BNSeekBinaryReaderRelative(stream: *mut BNBinaryReader, offset: i64);
}
extern "C" {
    pub fn BNIsEndOfFile(stream: *mut BNBinaryReader) -> bool;
}
extern "C" {
    pub fn BNCreateBinaryWriter(view: *mut BNBinaryView) -> *mut BNBinaryWriter;
}
extern "C" {
    pub fn BNFreeBinaryWriter(stream: *mut BNBinaryWriter);
}
extern "C" {
    pub fn BNGetBinaryWriterEndianness(stream: *mut BNBinaryWriter) -> BNEndianness;
}
extern "C" {
    pub fn BNSetBinaryWriterEndianness(stream: *mut BNBinaryWriter, endian: BNEndianness);
}
extern "C" {
    pub fn BNWriteData(
        stream: *mut BNBinaryWriter,
        src: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNWrite8(stream: *mut BNBinaryWriter, val: u8) -> bool;
}
extern "C" {
    pub fn BNWrite16(stream: *mut BNBinaryWriter, val: u16) -> bool;
}
extern "C" {
    pub fn BNWrite32(stream: *mut BNBinaryWriter, val: u32) -> bool;
}
extern "C" {
    pub fn BNWrite64(stream: *mut BNBinaryWriter, val: u64) -> bool;
}
extern "C" {
    pub fn BNWriteLE16(stream: *mut BNBinaryWriter, val: u16) -> bool;
}
extern "C" {
    pub fn BNWriteLE32(stream: *mut BNBinaryWriter, val: u32) -> bool;
}
extern "C" {
    pub fn BNWriteLE64(stream: *mut BNBinaryWriter, val: u64) -> bool;
}
extern "C" {
    pub fn BNWriteBE16(stream: *mut BNBinaryWriter, val: u16) -> bool;
}
extern "C" {
    pub fn BNWriteBE32(stream: *mut BNBinaryWriter, val: u32) -> bool;
}
extern "C" {
    pub fn BNWriteBE64(stream: *mut BNBinaryWriter, val: u64) -> bool;
}
extern "C" {
    pub fn BNGetWriterPosition(stream: *mut BNBinaryWriter) -> u64;
}
extern "C" {
    pub fn BNSeekBinaryWriter(stream: *mut BNBinaryWriter, offset: u64);
}
extern "C" {
    pub fn BNSeekBinaryWriterRelative(stream: *mut BNBinaryWriter, offset: i64);
}
extern "C" {
    pub fn BNGetTransformByName(name: *const ::std::os::raw::c_char) -> *mut BNTransform;
}
extern "C" {
    pub fn BNGetTransformTypeList(count: *mut size_t) -> *mut *mut BNTransform;
}
extern "C" {
    pub fn BNFreeTransformTypeList(xforms: *mut *mut BNTransform);
}
extern "C" {
    pub fn BNRegisterTransformType(
        type_: BNTransformType,
        name: *const ::std::os::raw::c_char,
        longName: *const ::std::os::raw::c_char,
        group: *const ::std::os::raw::c_char,
        xform: *mut BNCustomTransform,
    ) -> *mut BNTransform;
}
extern "C" {
    pub fn BNGetTransformType(xform: *mut BNTransform) -> BNTransformType;
}
extern "C" {
    pub fn BNGetTransformName(xform: *mut BNTransform) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTransformLongName(xform: *mut BNTransform) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTransformGroup(xform: *mut BNTransform) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTransformParameterList(
        xform: *mut BNTransform,
        count: *mut size_t,
    ) -> *mut BNTransformParameterInfo;
}
extern "C" {
    pub fn BNFreeTransformParameterList(params: *mut BNTransformParameterInfo, count: size_t);
}
extern "C" {
    pub fn BNDecode(
        xform: *mut BNTransform,
        input: *mut BNDataBuffer,
        output: *mut BNDataBuffer,
        params: *mut BNTransformParameter,
        paramCount: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNEncode(
        xform: *mut BNTransform,
        input: *mut BNDataBuffer,
        output: *mut BNDataBuffer,
        params: *mut BNTransformParameter,
        paramCount: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetArchitectureByName(name: *const ::std::os::raw::c_char) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetArchitectureList(count: *mut size_t) -> *mut *mut BNArchitecture;
}
extern "C" {
    pub fn BNFreeArchitectureList(archs: *mut *mut BNArchitecture);
}
extern "C" {
    pub fn BNRegisterArchitecture(
        name: *const ::std::os::raw::c_char,
        arch: *mut BNCustomArchitecture,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNRegisterArchitectureExtension(
        name: *const ::std::os::raw::c_char,
        base: *mut BNArchitecture,
        arch: *mut BNCustomArchitecture,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNAddArchitectureRedirection(
        arch: *mut BNArchitecture,
        from: *mut BNArchitecture,
        to: *mut BNArchitecture,
    );
}
extern "C" {
    pub fn BNRegisterArchitectureHook(
        base: *mut BNArchitecture,
        arch: *mut BNCustomArchitecture,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNFinalizeArchitectureHook(base: *mut BNArchitecture);
}
extern "C" {
    pub fn BNGetArchitectureName(arch: *mut BNArchitecture) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetArchitectureEndianness(arch: *mut BNArchitecture) -> BNEndianness;
}
extern "C" {
    pub fn BNGetArchitectureAddressSize(arch: *mut BNArchitecture) -> size_t;
}
extern "C" {
    pub fn BNGetArchitectureDefaultIntegerSize(arch: *mut BNArchitecture) -> size_t;
}
extern "C" {
    pub fn BNGetArchitectureInstructionAlignment(arch: *mut BNArchitecture) -> size_t;
}
extern "C" {
    pub fn BNGetArchitectureMaxInstructionLength(arch: *mut BNArchitecture) -> size_t;
}
extern "C" {
    pub fn BNGetArchitectureOpcodeDisplayLength(arch: *mut BNArchitecture) -> size_t;
}
extern "C" {
    pub fn BNGetAssociatedArchitectureByAddress(
        arch: *mut BNArchitecture,
        addr: *mut u64,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetInstructionInfo(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        maxLen: size_t,
        result: *mut BNInstructionInfo,
    ) -> bool;
}
extern "C" {
    pub fn BNGetInstructionText(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: *mut size_t,
        result: *mut *mut BNInstructionTextToken,
        count: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetInstructionLowLevelIL(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: *mut size_t,
        il: *mut BNLowLevelILFunction,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeInstructionText(tokens: *mut BNInstructionTextToken, count: size_t);
}
extern "C" {
    pub fn BNFreeInstructionTextLines(lines: *mut BNInstructionTextLine, count: size_t);
}
extern "C" {
    pub fn BNGetArchitectureRegisterName(
        arch: *mut BNArchitecture,
        reg: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetArchitectureFlagName(
        arch: *mut BNArchitecture,
        flag: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetArchitectureFlagWriteTypeName(
        arch: *mut BNArchitecture,
        flags: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetArchitectureSemanticFlagClassName(
        arch: *mut BNArchitecture,
        semClass: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetArchitectureSemanticFlagGroupName(
        arch: *mut BNArchitecture,
        semGroup: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetFullWidthArchitectureRegisters(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetAllArchitectureRegisters(arch: *mut BNArchitecture, count: *mut size_t)
        -> *mut u32;
}
extern "C" {
    pub fn BNGetAllArchitectureFlags(arch: *mut BNArchitecture, count: *mut size_t) -> *mut u32;
}
extern "C" {
    pub fn BNGetAllArchitectureFlagWriteTypes(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetAllArchitectureSemanticFlagClasses(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetAllArchitectureSemanticFlagGroups(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureFlagRole(
        arch: *mut BNArchitecture,
        flag: u32,
        semClass: u32,
    ) -> BNFlagRole;
}
extern "C" {
    pub fn BNGetArchitectureFlagsRequiredForFlagCondition(
        arch: *mut BNArchitecture,
        cond: BNLowLevelILFlagCondition,
        semClass: u32,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureFlagsRequiredForSemanticFlagGroup(
        arch: *mut BNArchitecture,
        semGroup: u32,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureFlagConditionsForSemanticFlagGroup(
        arch: *mut BNArchitecture,
        semGroup: u32,
        count: *mut size_t,
    ) -> *mut BNFlagConditionForSemanticClass;
}
extern "C" {
    pub fn BNFreeFlagConditionsForSemanticFlagGroup(
        conditions: *mut BNFlagConditionForSemanticClass,
    );
}
extern "C" {
    pub fn BNGetArchitectureFlagsWrittenByFlagWriteType(
        arch: *mut BNArchitecture,
        writeType: u32,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureSemanticClassForFlagWriteType(
        arch: *mut BNArchitecture,
        writeType: u32,
    ) -> u32;
}
extern "C" {
    pub fn BNGetArchitectureFlagWriteLowLevelIL(
        arch: *mut BNArchitecture,
        op: BNLowLevelILOperation,
        size: size_t,
        flagWriteType: u32,
        flag: u32,
        operands: *mut BNRegisterOrConstant,
        operandCount: size_t,
        il: *mut BNLowLevelILFunction,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetDefaultArchitectureFlagWriteLowLevelIL(
        arch: *mut BNArchitecture,
        op: BNLowLevelILOperation,
        size: size_t,
        role: BNFlagRole,
        operands: *mut BNRegisterOrConstant,
        operandCount: size_t,
        il: *mut BNLowLevelILFunction,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetArchitectureFlagConditionLowLevelIL(
        arch: *mut BNArchitecture,
        cond: BNLowLevelILFlagCondition,
        semClass: u32,
        il: *mut BNLowLevelILFunction,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetDefaultArchitectureFlagConditionLowLevelIL(
        arch: *mut BNArchitecture,
        cond: BNLowLevelILFlagCondition,
        semClass: u32,
        il: *mut BNLowLevelILFunction,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetArchitectureSemanticFlagGroupLowLevelIL(
        arch: *mut BNArchitecture,
        semGroup: u32,
        il: *mut BNLowLevelILFunction,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetModifiedArchitectureRegistersOnWrite(
        arch: *mut BNArchitecture,
        reg: u32,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNFreeRegisterList(regs: *mut u32);
}
extern "C" {
    pub fn BNGetArchitectureRegisterInfo(arch: *mut BNArchitecture, reg: u32) -> BNRegisterInfo;
}
extern "C" {
    pub fn BNGetArchitectureStackPointerRegister(arch: *mut BNArchitecture) -> u32;
}
extern "C" {
    pub fn BNGetArchitectureLinkRegister(arch: *mut BNArchitecture) -> u32;
}
extern "C" {
    pub fn BNGetArchitectureGlobalRegisters(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNIsArchitectureGlobalRegister(arch: *mut BNArchitecture, reg: u32) -> bool;
}
extern "C" {
    pub fn BNGetArchitectureSystemRegisters(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNIsArchitectureSystemRegister(arch: *mut BNArchitecture, reg: u32) -> bool;
}
extern "C" {
    pub fn BNGetArchitectureRegisterByName(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
    ) -> u32;
}
extern "C" {
    pub fn BNGetArchitectureRegisterStackName(
        arch: *mut BNArchitecture,
        regStack: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAllArchitectureRegisterStacks(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureRegisterStackInfo(
        arch: *mut BNArchitecture,
        regStack: u32,
    ) -> BNRegisterStackInfo;
}
extern "C" {
    pub fn BNGetArchitectureRegisterStackForRegister(arch: *mut BNArchitecture, reg: u32) -> u32;
}
extern "C" {
    pub fn BNGetArchitectureIntrinsicName(
        arch: *mut BNArchitecture,
        intrinsic: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAllArchitectureIntrinsics(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureIntrinsicInputs(
        arch: *mut BNArchitecture,
        intrinsic: u32,
        count: *mut size_t,
    ) -> *mut BNNameAndType;
}
extern "C" {
    pub fn BNFreeNameAndTypeList(nt: *mut BNNameAndType, count: size_t);
}
extern "C" {
    pub fn BNGetArchitectureIntrinsicOutputs(
        arch: *mut BNArchitecture,
        intrinsic: u32,
        count: *mut size_t,
    ) -> *mut BNTypeWithConfidence;
}
extern "C" {
    pub fn BNFreeOutputTypeList(types: *mut BNTypeWithConfidence, count: size_t);
}
extern "C" {
    pub fn BNCanArchitectureAssemble(arch: *mut BNArchitecture) -> bool;
}
extern "C" {
    pub fn BNAssemble(
        arch: *mut BNArchitecture,
        code: *const ::std::os::raw::c_char,
        addr: u64,
        result: *mut BNDataBuffer,
        errors: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNIsArchitectureNeverBranchPatchAvailable(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNIsArchitectureAlwaysBranchPatchAvailable(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNIsArchitectureInvertBranchPatchAvailable(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNIsArchitectureSkipAndReturnZeroPatchAvailable(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNIsArchitectureSkipAndReturnValuePatchAvailable(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNArchitectureConvertToNop(
        arch: *mut BNArchitecture,
        data: *mut u8,
        addr: u64,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNArchitectureAlwaysBranch(
        arch: *mut BNArchitecture,
        data: *mut u8,
        addr: u64,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNArchitectureInvertBranch(
        arch: *mut BNArchitecture,
        data: *mut u8,
        addr: u64,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNArchitectureSkipAndReturnValue(
        arch: *mut BNArchitecture,
        data: *mut u8,
        addr: u64,
        len: size_t,
        value: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNRegisterArchitectureFunctionRecognizer(
        arch: *mut BNArchitecture,
        rec: *mut BNFunctionRecognizer,
    );
}
extern "C" {
    pub fn BNIsBinaryViewTypeArchitectureConstantDefined(
        arch: *mut BNArchitecture,
        type_: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetBinaryViewTypeArchitectureConstant(
        arch: *mut BNArchitecture,
        type_: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        defaultValue: u64,
    ) -> u64;
}
extern "C" {
    pub fn BNSetBinaryViewTypeArchitectureConstant(
        arch: *mut BNArchitecture,
        type_: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: u64,
    );
}
extern "C" {
    pub fn BNArchitectureRegisterRelocationHandler(
        arch: *mut BNArchitecture,
        viewName: *const ::std::os::raw::c_char,
        handler: *mut BNRelocationHandler,
    );
}
extern "C" {
    pub fn BNCreateRelocationHandler(
        handler: *mut BNCustomRelocationHandler,
    ) -> *mut BNRelocationHandler;
}
extern "C" {
    pub fn BNArchitectureGetRelocationHandler(
        arch: *mut BNArchitecture,
        viewName: *const ::std::os::raw::c_char,
    ) -> *mut BNRelocationHandler;
}
extern "C" {
    pub fn BNNewRelocationHandlerReference(
        handler: *mut BNRelocationHandler,
    ) -> *mut BNRelocationHandler;
}
extern "C" {
    pub fn BNFreeRelocationHandler(handler: *mut BNRelocationHandler);
}
extern "C" {
    pub fn BNRelocationHandlerGetRelocationInfo(
        handler: *mut BNRelocationHandler,
        data: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        info: *mut BNRelocationInfo,
        infoCount: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNRelocationHandlerApplyRelocation(
        handler: *mut BNRelocationHandler,
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        reloc: *mut BNRelocation,
        dest: *mut u8,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNRelocationHandlerDefaultApplyRelocation(
        handler: *mut BNRelocationHandler,
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        reloc: *mut BNRelocation,
        dest: *mut u8,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNRelocationHandlerGetOperandForExternalRelocation(
        handler: *mut BNRelocationHandler,
        data: *const u8,
        addr: u64,
        length: size_t,
        il: *const BNLowLevelILFunction,
        relocation: *mut BNRelocation,
    ) -> size_t;
}
extern "C" {
    pub fn BNAddAnalysisOption(view: *mut BNBinaryView, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddFunctionForAnalysis(view: *mut BNBinaryView, platform: *mut BNPlatform, addr: u64);
}
extern "C" {
    pub fn BNAddEntryPointForAnalysis(
        view: *mut BNBinaryView,
        platform: *mut BNPlatform,
        addr: u64,
    );
}
extern "C" {
    pub fn BNRemoveAnalysisFunction(view: *mut BNBinaryView, func: *mut BNFunction);
}
extern "C" {
    pub fn BNCreateUserFunction(view: *mut BNBinaryView, platform: *mut BNPlatform, addr: u64);
}
extern "C" {
    pub fn BNRemoveUserFunction(view: *mut BNBinaryView, func: *mut BNFunction);
}
extern "C" {
    pub fn BNUpdateAnalysisAndWait(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNUpdateAnalysis(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNAbortAnalysis(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNIsFunctionUpdateNeeded(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNRequestAdvancedFunctionAnalysisData(func: *mut BNFunction);
}
extern "C" {
    pub fn BNReleaseAdvancedFunctionAnalysisData(func: *mut BNFunction);
}
extern "C" {
    pub fn BNReleaseAdvancedFunctionAnalysisDataMultiple(func: *mut BNFunction, count: size_t);
}
extern "C" {
    pub fn BNNewFunctionReference(func: *mut BNFunction) -> *mut BNFunction;
}
extern "C" {
    pub fn BNFreeFunction(func: *mut BNFunction);
}
extern "C" {
    pub fn BNGetAnalysisFunctionList(
        view: *mut BNBinaryView,
        count: *mut size_t,
    ) -> *mut *mut BNFunction;
}
extern "C" {
    pub fn BNFreeFunctionList(funcs: *mut *mut BNFunction, count: size_t);
}
extern "C" {
    pub fn BNHasFunctions(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNHasSymbols(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNHasDataVariables(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNGetAnalysisFunction(
        view: *mut BNBinaryView,
        platform: *mut BNPlatform,
        addr: u64,
    ) -> *mut BNFunction;
}
extern "C" {
    pub fn BNGetRecentAnalysisFunctionForAddress(
        view: *mut BNBinaryView,
        addr: u64,
    ) -> *mut BNFunction;
}
extern "C" {
    pub fn BNGetAnalysisFunctionsForAddress(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut size_t,
    ) -> *mut *mut BNFunction;
}
extern "C" {
    pub fn BNGetAnalysisEntryPoint(view: *mut BNBinaryView) -> *mut BNFunction;
}
extern "C" {
    pub fn BNGetGlobalCommentForAddress(
        view: *mut BNBinaryView,
        addr: u64,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetGlobalCommentedAddresses(view: *mut BNBinaryView, count: *mut size_t) -> *mut u64;
}
extern "C" {
    pub fn BNSetGlobalCommentForAddress(
        view: *mut BNBinaryView,
        addr: u64,
        comment: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetFunctionData(func: *mut BNFunction) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNGetFunctionArchitecture(func: *mut BNFunction) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetFunctionPlatform(func: *mut BNFunction) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNGetFunctionStart(func: *mut BNFunction) -> u64;
}
extern "C" {
    pub fn BNGetFunctionSymbol(func: *mut BNFunction) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNWasFunctionAutomaticallyDiscovered(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNCanFunctionReturn(func: *mut BNFunction) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNSetFunctionAutoType(func: *mut BNFunction, type_: *mut BNType);
}
extern "C" {
    pub fn BNSetFunctionUserType(func: *mut BNFunction, type_: *mut BNType);
}
extern "C" {
    pub fn BNGetFunctionComment(func: *mut BNFunction) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetCommentForAddress(func: *mut BNFunction, addr: u64) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetCommentedAddresses(func: *mut BNFunction, count: *mut size_t) -> *mut u64;
}
extern "C" {
    pub fn BNFreeAddressList(addrs: *mut u64);
}
extern "C" {
    pub fn BNSetFunctionComment(func: *mut BNFunction, comment: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNSetCommentForAddress(
        func: *mut BNFunction,
        addr: u64,
        comment: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddUserCodeReference(
        func: *mut BNFunction,
        fromArch: *mut BNArchitecture,
        fromAddr: u64,
        toAddr: u64,
    );
}
extern "C" {
    pub fn BNRemoveUserCodeReference(
        func: *mut BNFunction,
        fromArch: *mut BNArchitecture,
        fromAddr: u64,
        toAddr: u64,
    );
}
extern "C" {
    pub fn BNNewBasicBlockReference(block: *mut BNBasicBlock) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNFreeBasicBlock(block: *mut BNBasicBlock);
}
extern "C" {
    pub fn BNGetFunctionBasicBlockList(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNFreeBasicBlockList(blocks: *mut *mut BNBasicBlock, count: size_t);
}
extern "C" {
    pub fn BNGetFunctionBasicBlockAtAddress(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetRecentBasicBlockForAddress(view: *mut BNBinaryView, addr: u64)
        -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlocksForAddress(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut size_t,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlocksStartingAtAddress(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut size_t,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetFunctionLowLevelIL(func: *mut BNFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionLowLevelILIfAvailable(func: *mut BNFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetLowLevelILForInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILInstructionsForAddress(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetLowLevelILExitsForInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNFreeILInstructionList(list: *mut size_t);
}
extern "C" {
    pub fn BNGetFunctionMediumLevelIL(func: *mut BNFunction) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionMediumLevelILIfAvailable(
        func: *mut BNFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionHighLevelIL(func: *mut BNFunction) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionHighLevelILIfAvailable(func: *mut BNFunction)
        -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetRegisterValueAtInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        reg: u32,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetRegisterValueAfterInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        reg: u32,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetStackContentsAtInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        offset: i64,
        size: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetStackContentsAfterInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        offset: i64,
        size: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetParameterValueAtInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        functionType: *mut BNType,
        i: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetParameterValueAtLowLevelILInstruction(
        func: *mut BNFunction,
        instr: size_t,
        functionType: *mut BNType,
        i: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNFreePossibleValueSet(value: *mut BNPossibleValueSet);
}
extern "C" {
    pub fn BNGetRegistersReadByInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetRegistersWrittenByInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetStackVariablesReferencedByInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNStackVariableReference;
}
extern "C" {
    pub fn BNFreeStackVariableReferenceList(refs: *mut BNStackVariableReference, count: size_t);
}
extern "C" {
    pub fn BNGetConstantsReferencedByInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNConstantReference;
}
extern "C" {
    pub fn BNFreeConstantReferenceList(refs: *mut BNConstantReference);
}
extern "C" {
    pub fn BNGetFunctionLiftedIL(func: *mut BNFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionLiftedILIfAvailable(func: *mut BNFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetLiftedILForInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetLiftedILInstructionsForAddress(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetLiftedILFlagUsesForDefinition(
        func: *mut BNFunction,
        i: size_t,
        flag: u32,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetLiftedILFlagDefinitionsForUse(
        func: *mut BNFunction,
        i: size_t,
        flag: u32,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetFlagsReadByLiftedILInstruction(
        func: *mut BNFunction,
        i: size_t,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetFlagsWrittenByLiftedILInstruction(
        func: *mut BNFunction,
        i: size_t,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetFunctionType(func: *mut BNFunction) -> *mut BNType;
}
extern "C" {
    pub fn BNGetFunctionReturnType(func: *mut BNFunction) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionReturnRegisters(func: *mut BNFunction) -> BNRegisterSetWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionCallingConvention(
        func: *mut BNFunction,
    ) -> BNCallingConventionWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionParameterVariables(
        func: *mut BNFunction,
    ) -> BNParameterVariablesWithConfidence;
}
extern "C" {
    pub fn BNFreeParameterVariables(vars: *mut BNParameterVariablesWithConfidence);
}
extern "C" {
    pub fn BNFunctionHasVariableArguments(func: *mut BNFunction) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionStackAdjustment(func: *mut BNFunction) -> BNOffsetWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionRegisterStackAdjustments(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNRegisterStackAdjustment;
}
extern "C" {
    pub fn BNFreeRegisterStackAdjustments(adjustments: *mut BNRegisterStackAdjustment);
}
extern "C" {
    pub fn BNGetFunctionClobberedRegisters(func: *mut BNFunction) -> BNRegisterSetWithConfidence;
}
extern "C" {
    pub fn BNFreeRegisterSet(regs: *mut BNRegisterSetWithConfidence);
}
extern "C" {
    pub fn BNSetAutoFunctionReturnType(func: *mut BNFunction, type_: *mut BNTypeWithConfidence);
}
extern "C" {
    pub fn BNSetAutoFunctionReturnRegisters(
        func: *mut BNFunction,
        regs: *mut BNRegisterSetWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionCallingConvention(
        func: *mut BNFunction,
        convention: *mut BNCallingConventionWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionParameterVariables(
        func: *mut BNFunction,
        vars: *mut BNParameterVariablesWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionHasVariableArguments(
        func: *mut BNFunction,
        varArgs: *mut BNBoolWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionCanReturn(func: *mut BNFunction, returns: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNSetAutoFunctionStackAdjustment(
        func: *mut BNFunction,
        stackAdjust: *mut BNOffsetWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionRegisterStackAdjustments(
        func: *mut BNFunction,
        adjustments: *mut BNRegisterStackAdjustment,
        count: size_t,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionClobberedRegisters(
        func: *mut BNFunction,
        regs: *mut BNRegisterSetWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionReturnType(func: *mut BNFunction, type_: *mut BNTypeWithConfidence);
}
extern "C" {
    pub fn BNSetUserFunctionReturnRegisters(
        func: *mut BNFunction,
        regs: *mut BNRegisterSetWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionCallingConvention(
        func: *mut BNFunction,
        convention: *mut BNCallingConventionWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionParameterVariables(
        func: *mut BNFunction,
        vars: *mut BNParameterVariablesWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionHasVariableArguments(
        func: *mut BNFunction,
        varArgs: *mut BNBoolWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionCanReturn(func: *mut BNFunction, returns: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNSetUserFunctionStackAdjustment(
        func: *mut BNFunction,
        stackAdjust: *mut BNOffsetWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionRegisterStackAdjustments(
        func: *mut BNFunction,
        adjustments: *mut BNRegisterStackAdjustment,
        count: size_t,
    );
}
extern "C" {
    pub fn BNSetUserFunctionClobberedRegisters(
        func: *mut BNFunction,
        regs: *mut BNRegisterSetWithConfidence,
    );
}
extern "C" {
    pub fn BNApplyImportedTypes(func: *mut BNFunction, sym: *mut BNSymbol, type_: *mut BNType);
}
extern "C" {
    pub fn BNApplyAutoDiscoveredFunctionType(func: *mut BNFunction, type_: *mut BNType);
}
extern "C" {
    pub fn BNFunctionHasExplicitlyDefinedType(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNGetFunctionTypeTokens(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
        count: *mut size_t,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNGetFunctionGlobalPointerValue(func: *mut BNFunction) -> BNRegisterValueWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionRegisterValueAtExit(
        func: *mut BNFunction,
        reg: u32,
    ) -> BNRegisterValueWithConfidence;
}
extern "C" {
    pub fn BNGetBasicBlockFunction(block: *mut BNBasicBlock) -> *mut BNFunction;
}
extern "C" {
    pub fn BNGetBasicBlockArchitecture(block: *mut BNBasicBlock) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetBasicBlockSource(block: *mut BNBasicBlock) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockStart(block: *mut BNBasicBlock) -> u64;
}
extern "C" {
    pub fn BNGetBasicBlockEnd(block: *mut BNBasicBlock) -> u64;
}
extern "C" {
    pub fn BNGetBasicBlockLength(block: *mut BNBasicBlock) -> u64;
}
extern "C" {
    pub fn BNGetBasicBlockOutgoingEdges(
        block: *mut BNBasicBlock,
        count: *mut size_t,
    ) -> *mut BNBasicBlockEdge;
}
extern "C" {
    pub fn BNGetBasicBlockIncomingEdges(
        block: *mut BNBasicBlock,
        count: *mut size_t,
    ) -> *mut BNBasicBlockEdge;
}
extern "C" {
    pub fn BNFreeBasicBlockEdgeList(edges: *mut BNBasicBlockEdge, count: size_t);
}
extern "C" {
    pub fn BNBasicBlockHasUndeterminedOutgoingEdges(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNBasicBlockCanExit(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNBasicBlockHasInvalidInstructions(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNGetBasicBlockIndex(block: *mut BNBasicBlock) -> size_t;
}
extern "C" {
    pub fn BNGetBasicBlockDominators(
        block: *mut BNBasicBlock,
        count: *mut size_t,
        post: bool,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockStrictDominators(
        block: *mut BNBasicBlock,
        count: *mut size_t,
        post: bool,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockImmediateDominator(
        block: *mut BNBasicBlock,
        post: bool,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockDominatorTreeChildren(
        block: *mut BNBasicBlock,
        count: *mut size_t,
        post: bool,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockDominanceFrontier(
        block: *mut BNBasicBlock,
        count: *mut size_t,
        post: bool,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockIteratedDominanceFrontier(
        blocks: *mut *mut BNBasicBlock,
        incomingCount: size_t,
        outputCount: *mut size_t,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNIsILBasicBlock(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNIsLowLevelILBasicBlock(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNIsMediumLevelILBasicBlock(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNGetBasicBlockLowLevelILFunction(block: *mut BNBasicBlock)
        -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetBasicBlockMediumLevelILFunction(
        block: *mut BNBasicBlock,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetBasicBlockDisassemblyText(
        block: *mut BNBasicBlock,
        settings: *mut BNDisassemblySettings,
        count: *mut size_t,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNFreeDisassemblyTextLines(lines: *mut BNDisassemblyTextLine, count: size_t);
}
extern "C" {
    pub fn BNGetDisplayStringForInteger(
        binaryView: *mut BNBinaryView,
        type_: BNIntegerDisplayType,
        value: u64,
        inputWidth: size_t,
        isSigned: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCreateDisassemblyTextRenderer(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblyTextRenderer;
}
extern "C" {
    pub fn BNCreateLowLevelILDisassemblyTextRenderer(
        func: *mut BNLowLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblyTextRenderer;
}
extern "C" {
    pub fn BNCreateMediumLevelILDisassemblyTextRenderer(
        func: *mut BNMediumLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblyTextRenderer;
}
extern "C" {
    pub fn BNCreateHighLevelILDisassemblyTextRenderer(
        func: *mut BNHighLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblyTextRenderer;
}
extern "C" {
    pub fn BNNewDisassemblyTextRendererReference(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNDisassemblyTextRenderer;
}
extern "C" {
    pub fn BNFreeDisassemblyTextRenderer(renderer: *mut BNDisassemblyTextRenderer);
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererFunction(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNFunction;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererLowLevelILFunction(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererMediumLevelILFunction(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererHighLevelILFunction(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererBasicBlock(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererArchitecture(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererSettings(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNDisassemblySettings;
}
extern "C" {
    pub fn BNSetDisassemblyTextRendererBasicBlock(
        renderer: *mut BNDisassemblyTextRenderer,
        block: *mut BNBasicBlock,
    );
}
extern "C" {
    pub fn BNSetDisassemblyTextRendererArchitecture(
        renderer: *mut BNDisassemblyTextRenderer,
        arch: *mut BNArchitecture,
    );
}
extern "C" {
    pub fn BNSetDisassemblyTextRendererSettings(
        renderer: *mut BNDisassemblyTextRenderer,
        settings: *mut BNDisassemblySettings,
    );
}
extern "C" {
    pub fn BNIsILDisassemblyTextRenderer(renderer: *mut BNDisassemblyTextRenderer) -> bool;
}
extern "C" {
    pub fn BNDisassemblyTextRendererHasDataFlow(renderer: *mut BNDisassemblyTextRenderer) -> bool;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererInstructionAnnotations(
        renderer: *mut BNDisassemblyTextRenderer,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererInstructionText(
        renderer: *mut BNDisassemblyTextRenderer,
        addr: u64,
        len: *mut size_t,
        result: *mut *mut BNDisassemblyTextLine,
        count: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererLines(
        renderer: *mut BNDisassemblyTextRenderer,
        addr: u64,
        len: *mut size_t,
        result: *mut *mut BNDisassemblyTextLine,
        count: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNPostProcessDisassemblyTextRendererLines(
        renderer: *mut BNDisassemblyTextRenderer,
        addr: u64,
        len: size_t,
        inLines: *mut BNDisassemblyTextLine,
        inCount: size_t,
        outCount: *mut size_t,
        indentSpaces: *const ::std::os::raw::c_char,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNResetDisassemblyTextRendererDeduplicatedComments(
        renderer: *mut BNDisassemblyTextRenderer,
    );
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererSymbolTokens(
        renderer: *mut BNDisassemblyTextRenderer,
        addr: u64,
        size: size_t,
        operand: size_t,
        result: *mut *mut BNInstructionTextToken,
        count: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererStackVariableReferenceTokens(
        renderer: *mut BNDisassemblyTextRenderer,
        ref_: *mut BNStackVariableReference,
        count: *mut size_t,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNIsIntegerToken(type_: BNInstructionTextTokenType) -> bool;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererIntegerTokens(
        renderer: *mut BNDisassemblyTextRenderer,
        token: *mut BNInstructionTextToken,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNDisassemblyTextRendererWrapComment(
        renderer: *mut BNDisassemblyTextRenderer,
        inLine: *const BNDisassemblyTextLine,
        outLineCount: *mut size_t,
        comment: *const ::std::os::raw::c_char,
        hasAutoAnnotations: bool,
        leadingSpaces: *const ::std::os::raw::c_char,
        indentSpaces: *const ::std::os::raw::c_char,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNMarkFunctionAsRecentlyUsed(func: *mut BNFunction);
}
extern "C" {
    pub fn BNMarkBasicBlockAsRecentlyUsed(block: *mut BNBasicBlock);
}
extern "C" {
    pub fn BNGetCodeReferences(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNReferenceSource;
}
extern "C" {
    pub fn BNGetCodeReferencesInRange(
        view: *mut BNBinaryView,
        addr: u64,
        len: u64,
        count: *mut size_t,
    ) -> *mut BNReferenceSource;
}
extern "C" {
    pub fn BNFreeCodeReferences(refs: *mut BNReferenceSource, count: size_t);
}
extern "C" {
    pub fn BNGetCodeReferencesFrom(
        view: *mut BNBinaryView,
        src: *mut BNReferenceSource,
        count: *mut size_t,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetCodeReferencesFromInRange(
        view: *mut BNBinaryView,
        src: *mut BNReferenceSource,
        len: u64,
        count: *mut size_t,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetDataReferences(view: *mut BNBinaryView, addr: u64, count: *mut size_t) -> *mut u64;
}
extern "C" {
    pub fn BNGetDataReferencesInRange(
        view: *mut BNBinaryView,
        addr: u64,
        len: u64,
        count: *mut size_t,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetDataReferencesFrom(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut size_t,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetDataReferencesFromInRange(
        view: *mut BNBinaryView,
        addr: u64,
        len: u64,
        count: *mut size_t,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNAddUserDataReference(view: *mut BNBinaryView, fromAddr: u64, toAddr: u64);
}
extern "C" {
    pub fn BNRemoveUserDataReference(view: *mut BNBinaryView, fromAddr: u64, toAddr: u64);
}
extern "C" {
    pub fn BNFreeDataReferences(refs: *mut u64);
}
extern "C" {
    pub fn BNRegisterGlobalFunctionRecognizer(rec: *mut BNFunctionRecognizer);
}
extern "C" {
    pub fn BNGetStringAtAddress(
        view: *mut BNBinaryView,
        addr: u64,
        strRef: *mut BNStringReference,
    ) -> bool;
}
extern "C" {
    pub fn BNGetStrings(view: *mut BNBinaryView, count: *mut size_t) -> *mut BNStringReference;
}
extern "C" {
    pub fn BNGetStringsInRange(
        view: *mut BNBinaryView,
        start: u64,
        len: u64,
        count: *mut size_t,
    ) -> *mut BNStringReference;
}
extern "C" {
    pub fn BNFreeStringReferenceList(strings: *mut BNStringReference);
}
extern "C" {
    pub fn BNGetStackLayout(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNVariableNameAndType;
}
extern "C" {
    pub fn BNFreeVariableNameAndTypeList(vars: *mut BNVariableNameAndType, count: size_t);
}
extern "C" {
    pub fn BNCreateAutoStackVariable(
        func: *mut BNFunction,
        offset: i64,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNCreateUserStackVariable(
        func: *mut BNFunction,
        offset: i64,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNDeleteAutoStackVariable(func: *mut BNFunction, offset: i64);
}
extern "C" {
    pub fn BNDeleteUserStackVariable(func: *mut BNFunction, offset: i64);
}
extern "C" {
    pub fn BNGetStackVariableAtFrameOffset(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        offset: i64,
        var: *mut BNVariableNameAndType,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeVariableNameAndType(var: *mut BNVariableNameAndType);
}
extern "C" {
    pub fn BNGetFunctionVariables(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNVariableNameAndType;
}
extern "C" {
    pub fn BNCreateAutoVariable(
        func: *mut BNFunction,
        var: *const BNVariable,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
        ignoreDisjointUses: bool,
    );
}
extern "C" {
    pub fn BNCreateUserVariable(
        func: *mut BNFunction,
        var: *const BNVariable,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
        ignoreDisjointUses: bool,
    );
}
extern "C" {
    pub fn BNDeleteAutoVariable(func: *mut BNFunction, var: *const BNVariable);
}
extern "C" {
    pub fn BNDeleteUserVariable(func: *mut BNFunction, var: *const BNVariable);
}
extern "C" {
    pub fn BNIsVariableUserDefined(func: *mut BNFunction, var: *const BNVariable) -> bool;
}
extern "C" {
    pub fn BNGetVariableType(func: *mut BNFunction, var: *const BNVariable)
        -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetVariableName(
        func: *mut BNFunction,
        var: *const BNVariable,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNToVariableIdentifier(var: *const BNVariable) -> u64;
}
extern "C" {
    pub fn BNFromVariableIdentifier(id: u64) -> BNVariable;
}
extern "C" {
    pub fn BNGetFunctionVariableDeadStoreElimination(
        func: *mut BNFunction,
        var: *const BNVariable,
    ) -> BNDeadStoreElimination;
}
extern "C" {
    pub fn BNSetFunctionVariableDeadStoreElimination(
        func: *mut BNFunction,
        var: *const BNVariable,
        mode: BNDeadStoreElimination,
    );
}
extern "C" {
    pub fn BNGetFunctionCallSites(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNReferenceSource;
}
extern "C" {
    pub fn BNGetCallees(
        view: *mut BNBinaryView,
        callSite: *mut BNReferenceSource,
        count: *mut size_t,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetCallers(
        view: *mut BNBinaryView,
        callee: u64,
        count: *mut size_t,
    ) -> *mut BNReferenceSource;
}
extern "C" {
    pub fn BNSetAutoIndirectBranches(
        func: *mut BNFunction,
        sourceArch: *mut BNArchitecture,
        source: u64,
        branches: *mut BNArchitectureAndAddress,
        count: size_t,
    );
}
extern "C" {
    pub fn BNSetUserIndirectBranches(
        func: *mut BNFunction,
        sourceArch: *mut BNArchitecture,
        source: u64,
        branches: *mut BNArchitectureAndAddress,
        count: size_t,
    );
}
extern "C" {
    pub fn BNGetIndirectBranches(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNIndirectBranchInfo;
}
extern "C" {
    pub fn BNGetIndirectBranchesAt(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNIndirectBranchInfo;
}
extern "C" {
    pub fn BNFreeIndirectBranchList(branches: *mut BNIndirectBranchInfo);
}
extern "C" {
    pub fn BNSetAutoCallTypeAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        type_: *mut BNTypeWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserCallTypeAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        type_: *mut BNTypeWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoCallStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        adjust: i64,
        confidence: u8,
    );
}
extern "C" {
    pub fn BNSetUserCallStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        adjust: i64,
        confidence: u8,
    );
}
extern "C" {
    pub fn BNSetAutoCallRegisterStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        adjust: *mut BNRegisterStackAdjustment,
        count: size_t,
    );
}
extern "C" {
    pub fn BNSetUserCallRegisterStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        adjust: *mut BNRegisterStackAdjustment,
        count: size_t,
    );
}
extern "C" {
    pub fn BNSetAutoCallRegisterStackAdjustmentForRegisterStack(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        regStack: u32,
        adjust: i32,
        confidence: u8,
    );
}
extern "C" {
    pub fn BNSetUserCallRegisterStackAdjustmentForRegisterStack(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        regStack: u32,
        adjust: i32,
        confidence: u8,
    );
}
extern "C" {
    pub fn BNGetCallTypeAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetCallStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> BNOffsetWithConfidence;
}
extern "C" {
    pub fn BNGetCallRegisterStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNRegisterStackAdjustment;
}
extern "C" {
    pub fn BNGetCallRegisterStackAdjustmentForRegisterStack(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        regStack: u32,
    ) -> BNRegisterStackAdjustment;
}
extern "C" {
    pub fn BNIsCallInstruction(func: *mut BNFunction, arch: *mut BNArchitecture, addr: u64)
        -> bool;
}
extern "C" {
    pub fn BNGetFunctionBlockAnnotations(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNInstructionTextLine;
}
extern "C" {
    pub fn BNGetIntegerConstantDisplayType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        instrAddr: u64,
        value: u64,
        operand: size_t,
    ) -> BNIntegerDisplayType;
}
extern "C" {
    pub fn BNSetIntegerConstantDisplayType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        instrAddr: u64,
        value: u64,
        operand: size_t,
        type_: BNIntegerDisplayType,
    );
}
extern "C" {
    pub fn BNIsFunctionTooLarge(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNIsFunctionAnalysisSkipped(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNGetAnalysisSkipReason(func: *mut BNFunction) -> BNAnalysisSkipReason;
}
extern "C" {
    pub fn BNGetFunctionAnalysisSkipOverride(
        func: *mut BNFunction,
    ) -> BNFunctionAnalysisSkipOverride;
}
extern "C" {
    pub fn BNSetFunctionAnalysisSkipOverride(
        func: *mut BNFunction,
        skip: BNFunctionAnalysisSkipOverride,
    );
}
extern "C" {
    pub fn BNGetGotoLabelName(func: *mut BNFunction, labelId: u64) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetUserGotoLabelName(
        func: *mut BNFunction,
        labelId: u64,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetParametersForAnalysis(view: *mut BNBinaryView) -> BNAnalysisParameters;
}
extern "C" {
    pub fn BNSetParametersForAnalysis(view: *mut BNBinaryView, params: BNAnalysisParameters);
}
extern "C" {
    pub fn BNGetMaxFunctionSizeForAnalysis(view: *mut BNBinaryView) -> u64;
}
extern "C" {
    pub fn BNSetMaxFunctionSizeForAnalysis(view: *mut BNBinaryView, size: u64);
}
extern "C" {
    pub fn BNGetNewAutoFunctionAnalysisSuppressed(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNSetNewAutoFunctionAnalysisSuppressed(view: *mut BNBinaryView, suppress: bool);
}
extern "C" {
    pub fn BNAddAnalysisCompletionEvent(
        view: *mut BNBinaryView,
        ctxt: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    ) -> *mut BNAnalysisCompletionEvent;
}
extern "C" {
    pub fn BNNewAnalysisCompletionEventReference(
        event: *mut BNAnalysisCompletionEvent,
    ) -> *mut BNAnalysisCompletionEvent;
}
extern "C" {
    pub fn BNFreeAnalysisCompletionEvent(event: *mut BNAnalysisCompletionEvent);
}
extern "C" {
    pub fn BNCancelAnalysisCompletionEvent(event: *mut BNAnalysisCompletionEvent);
}
extern "C" {
    pub fn BNGetAnalysisInfo(view: *mut BNBinaryView) -> *mut BNAnalysisInfo;
}
extern "C" {
    pub fn BNFreeAnalysisInfo(info: *mut BNAnalysisInfo);
}
extern "C" {
    pub fn BNGetAnalysisProgress(view: *mut BNBinaryView) -> BNAnalysisProgress;
}
extern "C" {
    pub fn BNGetBackgroundAnalysisTask(view: *mut BNBinaryView) -> *mut BNBackgroundTask;
}
extern "C" {
    pub fn BNGetNextFunctionStartAfterAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetNextBasicBlockStartAfterAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetNextDataAfterAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetNextDataVariableStartAfterAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetPreviousFunctionStartBeforeAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetPreviousBasicBlockStartBeforeAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetPreviousBasicBlockEndBeforeAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetPreviousDataBeforeAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetPreviousDataVariableStartBeforeAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNCreateLinearViewDisassembly(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewLiftedIL(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewLowLevelIL(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewLowLevelILSSAForm(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewMediumLevelIL(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewMediumLevelILSSAForm(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewMappedMediumLevelIL(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewMappedMediumLevelILSSAForm(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewHighLevelIL(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewHighLevelILSSAForm(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNNewLinearViewObjectReference(obj: *mut BNLinearViewObject) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNFreeLinearViewObject(obj: *mut BNLinearViewObject);
}
extern "C" {
    pub fn BNGetFirstLinearViewObjectChild(obj: *mut BNLinearViewObject)
        -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetLastLinearViewObjectChild(obj: *mut BNLinearViewObject) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetPreviousLinearViewObjectChild(
        parent: *mut BNLinearViewObject,
        child: *mut BNLinearViewObject,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetNextLinearViewObjectChild(
        parent: *mut BNLinearViewObject,
        child: *mut BNLinearViewObject,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetLinearViewObjectChildForAddress(
        parent: *mut BNLinearViewObject,
        addr: u64,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetLinearViewObjectChildForIdentifier(
        parent: *mut BNLinearViewObject,
        id: *mut BNLinearViewObjectIdentifier,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetLinearViewObjectLines(
        obj: *mut BNLinearViewObject,
        prev: *mut BNLinearViewObject,
        next: *mut BNLinearViewObject,
        count: *mut size_t,
    ) -> *mut BNLinearDisassemblyLine;
}
extern "C" {
    pub fn BNFreeLinearDisassemblyLines(lines: *mut BNLinearDisassemblyLine, count: size_t);
}
extern "C" {
    pub fn BNGetLinearViewObjectStart(obj: *mut BNLinearViewObject) -> u64;
}
extern "C" {
    pub fn BNGetLinearViewObjectEnd(obj: *mut BNLinearViewObject) -> u64;
}
extern "C" {
    pub fn BNGetLinearViewObjectIdentifier(
        obj: *mut BNLinearViewObject,
    ) -> BNLinearViewObjectIdentifier;
}
extern "C" {
    pub fn BNFreeLinearViewObjectIdentifier(id: *mut BNLinearViewObjectIdentifier);
}
extern "C" {
    pub fn BNCompareLinearViewObjectChildren(
        obj: *mut BNLinearViewObject,
        a: *mut BNLinearViewObject,
        b: *mut BNLinearViewObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetLinearViewObjectOrderingIndexTotal(obj: *mut BNLinearViewObject) -> u64;
}
extern "C" {
    pub fn BNGetLinearViewObjectOrderingIndexForChild(
        parent: *mut BNLinearViewObject,
        child: *mut BNLinearViewObject,
    ) -> u64;
}
extern "C" {
    pub fn BNGetLinearViewObjectChildForOrderingIndex(
        parent: *mut BNLinearViewObject,
        idx: u64,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewCursor(root: *mut BNLinearViewObject) -> *mut BNLinearViewCursor;
}
extern "C" {
    pub fn BNDuplicateLinearViewCursor(cursor: *mut BNLinearViewCursor) -> *mut BNLinearViewCursor;
}
extern "C" {
    pub fn BNNewLinearViewCursorReference(
        cursor: *mut BNLinearViewCursor,
    ) -> *mut BNLinearViewCursor;
}
extern "C" {
    pub fn BNFreeLinearViewCursor(cursor: *mut BNLinearViewCursor);
}
extern "C" {
    pub fn BNIsLinearViewCursorBeforeBegin(cursor: *mut BNLinearViewCursor) -> bool;
}
extern "C" {
    pub fn BNIsLinearViewCursorAfterEnd(cursor: *mut BNLinearViewCursor) -> bool;
}
extern "C" {
    pub fn BNGetLinearViewCursorCurrentObject(
        cursor: *mut BNLinearViewCursor,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetLinearViewCursorPath(
        cursor: *mut BNLinearViewCursor,
        count: *mut size_t,
    ) -> *mut BNLinearViewObjectIdentifier;
}
extern "C" {
    pub fn BNFreeLinearViewCursorPath(objs: *mut BNLinearViewObjectIdentifier, count: size_t);
}
extern "C" {
    pub fn BNGetLinearViewCursorPathObjects(
        cursor: *mut BNLinearViewCursor,
        count: *mut size_t,
    ) -> *mut *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNFreeLinearViewCursorPathObjects(objs: *mut *mut BNLinearViewObject, count: size_t);
}
extern "C" {
    pub fn BNGetLinearViewCursorOrderingIndex(cursor: *mut BNLinearViewCursor) -> BNAddressRange;
}
extern "C" {
    pub fn BNGetLinearViewCursorOrderingIndexTotal(cursor: *mut BNLinearViewCursor) -> u64;
}
extern "C" {
    pub fn BNSeekLinearViewCursorToBegin(cursor: *mut BNLinearViewCursor);
}
extern "C" {
    pub fn BNSeekLinearViewCursorToEnd(cursor: *mut BNLinearViewCursor);
}
extern "C" {
    pub fn BNSeekLinearViewCursorToAddress(cursor: *mut BNLinearViewCursor, addr: u64);
}
extern "C" {
    pub fn BNSeekLinearViewCursorToPath(
        cursor: *mut BNLinearViewCursor,
        ids: *mut BNLinearViewObjectIdentifier,
        count: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNSeekLinearViewCursorToPathAndAddress(
        cursor: *mut BNLinearViewCursor,
        ids: *mut BNLinearViewObjectIdentifier,
        count: size_t,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNSeekLinearViewCursorToCursorPath(
        cursor: *mut BNLinearViewCursor,
        path: *mut BNLinearViewCursor,
    ) -> bool;
}
extern "C" {
    pub fn BNSeekLinearViewCursorToCursorPathAndAddress(
        cursor: *mut BNLinearViewCursor,
        path: *mut BNLinearViewCursor,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNSeekLinearViewCursorToOrderingIndex(cursor: *mut BNLinearViewCursor, idx: u64);
}
extern "C" {
    pub fn BNLinearViewCursorNext(cursor: *mut BNLinearViewCursor) -> bool;
}
extern "C" {
    pub fn BNLinearViewCursorPrevious(cursor: *mut BNLinearViewCursor) -> bool;
}
extern "C" {
    pub fn BNGetLinearViewCursorLines(
        cursor: *mut BNLinearViewCursor,
        count: *mut size_t,
    ) -> *mut BNLinearDisassemblyLine;
}
extern "C" {
    pub fn BNCompareLinearViewCursors(
        a: *mut BNLinearViewCursor,
        b: *mut BNLinearViewCursor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNDefineDataVariable(
        view: *mut BNBinaryView,
        addr: u64,
        type_: *mut BNTypeWithConfidence,
    );
}
extern "C" {
    pub fn BNDefineUserDataVariable(
        view: *mut BNBinaryView,
        addr: u64,
        type_: *mut BNTypeWithConfidence,
    );
}
extern "C" {
    pub fn BNUndefineDataVariable(view: *mut BNBinaryView, addr: u64);
}
extern "C" {
    pub fn BNUndefineUserDataVariable(view: *mut BNBinaryView, addr: u64);
}
extern "C" {
    pub fn BNGetDataVariables(view: *mut BNBinaryView, count: *mut size_t) -> *mut BNDataVariable;
}
extern "C" {
    pub fn BNFreeDataVariables(vars: *mut BNDataVariable, count: size_t);
}
extern "C" {
    pub fn BNGetDataVariableAtAddress(
        view: *mut BNBinaryView,
        addr: u64,
        var: *mut BNDataVariable,
    ) -> bool;
}
extern "C" {
    pub fn BNParseTypeString(
        view: *mut BNBinaryView,
        text: *const ::std::os::raw::c_char,
        result: *mut BNQualifiedNameAndType,
        errors: *mut *mut ::std::os::raw::c_char,
        typesAllowRedefinition: *mut BNQualifiedNameList,
    ) -> bool;
}
extern "C" {
    pub fn BNParseTypesString(
        view: *mut BNBinaryView,
        text: *const ::std::os::raw::c_char,
        result: *mut BNTypeParserResult,
        errors: *mut *mut ::std::os::raw::c_char,
        typesAllowRedefinition: *mut BNQualifiedNameList,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeQualifiedNameAndType(obj: *mut BNQualifiedNameAndType);
}
extern "C" {
    pub fn BNFreeQualifiedNameAndTypeArray(obj: *mut BNQualifiedNameAndType, count: size_t);
}
extern "C" {
    pub fn BNGetAnalysisTypeList(
        view: *mut BNBinaryView,
        count: *mut size_t,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNFreeTypeList(types: *mut BNQualifiedNameAndType, count: size_t);
}
extern "C" {
    pub fn BNGetAnalysisTypeNames(
        view: *mut BNBinaryView,
        count: *mut size_t,
        matching: *const ::std::os::raw::c_char,
    ) -> *mut BNQualifiedName;
}
extern "C" {
    pub fn BNFreeTypeNameList(names: *mut BNQualifiedName, count: size_t);
}
extern "C" {
    pub fn BNGetAnalysisTypeByName(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetAnalysisTypeById(
        view: *mut BNBinaryView,
        id: *const ::std::os::raw::c_char,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetAnalysisTypeId(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAnalysisTypeNameById(
        view: *mut BNBinaryView,
        id: *const ::std::os::raw::c_char,
    ) -> BNQualifiedName;
}
extern "C" {
    pub fn BNIsAnalysisTypeAutoDefined(view: *mut BNBinaryView, name: *mut BNQualifiedName)
        -> bool;
}
extern "C" {
    pub fn BNDefineAnalysisType(
        view: *mut BNBinaryView,
        id: *const ::std::os::raw::c_char,
        defaultName: *mut BNQualifiedName,
        type_: *mut BNType,
    ) -> BNQualifiedName;
}
extern "C" {
    pub fn BNDefineUserAnalysisType(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNUndefineAnalysisType(view: *mut BNBinaryView, id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNUndefineUserAnalysisType(view: *mut BNBinaryView, name: *mut BNQualifiedName);
}
extern "C" {
    pub fn BNRenameAnalysisType(
        view: *mut BNBinaryView,
        oldName: *mut BNQualifiedName,
        newName: *mut BNQualifiedName,
    );
}
extern "C" {
    pub fn BNGenerateAutoTypeId(
        source: *const ::std::os::raw::c_char,
        name: *mut BNQualifiedName,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGenerateAutoPlatformTypeId(
        platform: *mut BNPlatform,
        name: *mut BNQualifiedName,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGenerateAutoDemangledTypeId(name: *mut BNQualifiedName)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAutoPlatformTypeIdSource(platform: *mut BNPlatform) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAutoDemangledTypeIdSource() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGenerateAutoDebugTypeId(name: *mut BNQualifiedName) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAutoDebugTypeIdSource() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRegisterPlatformTypes(view: *mut BNBinaryView, platform: *mut BNPlatform);
}
extern "C" {
    pub fn BNReanalyzeAllFunctions(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNReanalyzeFunction(func: *mut BNFunction);
}
extern "C" {
    pub fn BNGetInstructionHighlight(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> BNHighlightColor;
}
extern "C" {
    pub fn BNSetAutoInstructionHighlight(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        color: BNHighlightColor,
    );
}
extern "C" {
    pub fn BNSetUserInstructionHighlight(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        color: BNHighlightColor,
    );
}
extern "C" {
    pub fn BNGetBasicBlockHighlight(block: *mut BNBasicBlock) -> BNHighlightColor;
}
extern "C" {
    pub fn BNSetAutoBasicBlockHighlight(block: *mut BNBasicBlock, color: BNHighlightColor);
}
extern "C" {
    pub fn BNSetUserBasicBlockHighlight(block: *mut BNBasicBlock, color: BNHighlightColor);
}
extern "C" {
    pub fn BNCreateTagType(view: *mut BNBinaryView) -> *mut BNTagType;
}
extern "C" {
    pub fn BNNewTagTypeReference(tagType: *mut BNTagType) -> *mut BNTagType;
}
extern "C" {
    pub fn BNFreeTagType(tagType: *mut BNTagType);
}
extern "C" {
    pub fn BNFreeTagTypeList(tagTypes: *mut *mut BNTagType, count: size_t);
}
extern "C" {
    pub fn BNTagTypeGetView(tagType: *mut BNTagType) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNTagTypeGetName(tagType: *mut BNTagType) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTagTypeSetName(tagType: *mut BNTagType, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNTagTypeGetIcon(tagType: *mut BNTagType) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTagTypeSetIcon(tagType: *mut BNTagType, icon: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNTagTypeGetVisible(tagType: *mut BNTagType) -> bool;
}
extern "C" {
    pub fn BNTagTypeSetVisible(tagType: *mut BNTagType, visible: bool);
}
extern "C" {
    pub fn BNTagTypeGetType(tagType: *mut BNTagType) -> BNTagTypeType;
}
extern "C" {
    pub fn BNTagTypeSetType(tagType: *mut BNTagType, type_: BNTagTypeType);
}
extern "C" {
    pub fn BNCreateTag(type_: *mut BNTagType, data: *const ::std::os::raw::c_char) -> *mut BNTag;
}
extern "C" {
    pub fn BNNewTagReference(tag: *mut BNTag) -> *mut BNTag;
}
extern "C" {
    pub fn BNFreeTag(tag: *mut BNTag);
}
extern "C" {
    pub fn BNFreeTagList(tags: *mut *mut BNTag, count: size_t);
}
extern "C" {
    pub fn BNTagGetType(tag: *mut BNTag) -> *mut BNTagType;
}
extern "C" {
    pub fn BNTagGetData(tag: *mut BNTag) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTagSetData(tag: *mut BNTag, data: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddTagType(view: *mut BNBinaryView, tagType: *mut BNTagType);
}
extern "C" {
    pub fn BNRemoveTagType(view: *mut BNBinaryView, tagType: *mut BNTagType);
}
extern "C" {
    pub fn BNGetTagType(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNTagType;
}
extern "C" {
    pub fn BNGetTagTypeWithType(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        type_: BNTagTypeType,
    ) -> *mut BNTagType;
}
extern "C" {
    pub fn BNGetTagTypes(view: *mut BNBinaryView, count: *mut size_t) -> *mut *mut BNTagType;
}
extern "C" {
    pub fn BNAddTag(view: *mut BNBinaryView, tag: *mut BNTag, user: bool);
}
extern "C" {
    pub fn BNGetTag(view: *mut BNBinaryView, tagId: u64) -> *mut BNTag;
}
extern "C" {
    pub fn BNRemoveTag(view: *mut BNBinaryView, tag: *mut BNTag, user: bool);
}
extern "C" {
    pub fn BNGetAllTagReferences(
        view: *mut BNBinaryView,
        count: *mut size_t,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAllAddressTagReferences(
        view: *mut BNBinaryView,
        count: *mut size_t,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAllFunctionTagReferences(
        view: *mut BNBinaryView,
        count: *mut size_t,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAllTagReferencesOfType(
        view: *mut BNBinaryView,
        tagType: *mut BNTagType,
        count: *mut size_t,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetTagReferencesOfType(
        view: *mut BNBinaryView,
        tagType: *mut BNTagType,
        count: *mut size_t,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetDataTagReferences(
        view: *mut BNBinaryView,
        count: *mut size_t,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNFreeTagReferences(refs: *mut BNTagReference, count: size_t);
}
extern "C" {
    pub fn BNGetDataTags(view: *mut BNBinaryView, addr: u64, count: *mut size_t)
        -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetDataTagsOfType(
        view: *mut BNBinaryView,
        addr: u64,
        tagType: *mut BNTagType,
        count: *mut size_t,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetDataTagsInRange(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        count: *mut size_t,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNAddAutoDataTag(view: *mut BNBinaryView, addr: u64, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveAutoDataTag(view: *mut BNBinaryView, addr: u64, tag: *mut BNTag);
}
extern "C" {
    pub fn BNAddUserDataTag(view: *mut BNBinaryView, addr: u64, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveUserDataTag(view: *mut BNBinaryView, addr: u64, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveTagReference(view: *mut BNBinaryView, ref_: BNTagReference);
}
extern "C" {
    pub fn BNGetTagReferencesOfTypeCount(
        view: *mut BNBinaryView,
        tagType: *mut BNTagType,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetAllTagReferencesOfTypeCount(
        view: *mut BNBinaryView,
        tagType: *mut BNTagType,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetFunctionAllTagReferences(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetFunctionTagReferencesOfType(
        func: *mut BNFunction,
        tagType: *mut BNTagType,
        count: *mut size_t,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAddressTagReferences(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAddressTags(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut size_t,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetAddressTagsOfType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tagType: *mut BNTagType,
        count: *mut size_t,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNAddAutoAddressTag(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tag: *mut BNTag,
    );
}
extern "C" {
    pub fn BNRemoveAutoAddressTag(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tag: *mut BNTag,
    );
}
extern "C" {
    pub fn BNAddUserAddressTag(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tag: *mut BNTag,
    );
}
extern "C" {
    pub fn BNRemoveUserAddressTag(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tag: *mut BNTag,
    );
}
extern "C" {
    pub fn BNGetFunctionTagReferences(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetFunctionTags(func: *mut BNFunction, count: *mut size_t) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetFunctionTagsOfType(
        func: *mut BNFunction,
        tagType: *mut BNTagType,
        count: *mut size_t,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNAddAutoFunctionTag(func: *mut BNFunction, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveAutoFunctionTag(func: *mut BNFunction, tag: *mut BNTag);
}
extern "C" {
    pub fn BNAddUserFunctionTag(func: *mut BNFunction, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveUserFunctionTag(func: *mut BNFunction, tag: *mut BNTag);
}
extern "C" {
    pub fn BNGetFunctionAnalysisPerformanceInfo(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNPerformanceInfo;
}
extern "C" {
    pub fn BNFreeAnalysisPerformanceInfo(info: *mut BNPerformanceInfo, count: size_t);
}
extern "C" {
    pub fn BNGetUnresolvedStackAdjustmentGraph(func: *mut BNFunction) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNSetUserVariableValue(
        func: *mut BNFunction,
        var: *const BNVariable,
        defSite: *const BNArchitectureAndAddress,
        value: *const BNPossibleValueSet,
    );
}
extern "C" {
    pub fn BNClearUserVariableValue(
        func: *mut BNFunction,
        var: *const BNVariable,
        defSite: *const BNArchitectureAndAddress,
    );
}
extern "C" {
    pub fn BNGetAllUserVariableValues(
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNUserVariableValue;
}
extern "C" {
    pub fn BNFreeUserVariableValues(result: *mut BNUserVariableValue);
}
extern "C" {
    pub fn BNParsePossibleValueSet(
        view: *mut BNBinaryView,
        valueText: *const ::std::os::raw::c_char,
        state: BNRegisterValueType,
        result: *mut BNPossibleValueSet,
        here: u64,
        errors: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNRequestFunctionDebugReport(func: *mut BNFunction, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNCreateDisassemblySettings() -> *mut BNDisassemblySettings;
}
extern "C" {
    pub fn BNNewDisassemblySettingsReference(
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblySettings;
}
extern "C" {
    pub fn BNFreeDisassemblySettings(settings: *mut BNDisassemblySettings);
}
extern "C" {
    pub fn BNIsDisassemblySettingsOptionSet(
        settings: *mut BNDisassemblySettings,
        option: BNDisassemblyOption,
    ) -> bool;
}
extern "C" {
    pub fn BNSetDisassemblySettingsOption(
        settings: *mut BNDisassemblySettings,
        option: BNDisassemblyOption,
        state: bool,
    );
}
extern "C" {
    pub fn BNGetDisassemblyWidth(settings: *mut BNDisassemblySettings) -> size_t;
}
extern "C" {
    pub fn BNSetDisassemblyWidth(settings: *mut BNDisassemblySettings, width: size_t);
}
extern "C" {
    pub fn BNGetDisassemblyMaximumSymbolWidth(settings: *mut BNDisassemblySettings) -> size_t;
}
extern "C" {
    pub fn BNSetDisassemblyMaximumSymbolWidth(settings: *mut BNDisassemblySettings, width: size_t);
}
extern "C" {
    pub fn BNGetDisassemblyGutterWidth(settings: *mut BNDisassemblySettings) -> size_t;
}
extern "C" {
    pub fn BNSetDisassemblyGutterWidth(settings: *mut BNDisassemblySettings, width: size_t);
}
extern "C" {
    pub fn BNCreateFlowGraph() -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNCreateFunctionGraph(
        func: *mut BNFunction,
        type_: BNFunctionGraphType,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNCreateLowLevelILFunctionGraph(
        func: *mut BNLowLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNCreateMediumLevelILFunctionGraph(
        func: *mut BNMediumLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNCreateHighLevelILFunctionGraph(
        func: *mut BNHighLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNCreateCustomFlowGraph(callbacks: *mut BNCustomFlowGraph) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNNewFlowGraphReference(graph: *mut BNFlowGraph) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNFreeFlowGraph(graph: *mut BNFlowGraph);
}
extern "C" {
    pub fn BNGetFunctionForFlowGraph(graph: *mut BNFlowGraph) -> *mut BNFunction;
}
extern "C" {
    pub fn BNSetFunctionForFlowGraph(graph: *mut BNFlowGraph, func: *mut BNFunction);
}
extern "C" {
    pub fn BNGetViewForFlowGraph(graph: *mut BNFlowGraph) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNSetViewForFlowGraph(graph: *mut BNFlowGraph, view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNGetHorizontalFlowGraphNodeMargin(graph: *mut BNFlowGraph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetVerticalFlowGraphNodeMargin(graph: *mut BNFlowGraph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNSetFlowGraphNodeMargins(
        graph: *mut BNFlowGraph,
        horiz: ::std::os::raw::c_int,
        vert: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BNStartFlowGraphLayout(
        graph: *mut BNFlowGraph,
        ctxt: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    ) -> *mut BNFlowGraphLayoutRequest;
}
extern "C" {
    pub fn BNIsFlowGraphLayoutComplete(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNNewFlowGraphLayoutRequestReference(
        layout: *mut BNFlowGraphLayoutRequest,
    ) -> *mut BNFlowGraphLayoutRequest;
}
extern "C" {
    pub fn BNFreeFlowGraphLayoutRequest(layout: *mut BNFlowGraphLayoutRequest);
}
extern "C" {
    pub fn BNIsFlowGraphLayoutRequestComplete(layout: *mut BNFlowGraphLayoutRequest) -> bool;
}
extern "C" {
    pub fn BNGetGraphForFlowGraphLayoutRequest(
        layout: *mut BNFlowGraphLayoutRequest,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNAbortFlowGraphLayoutRequest(graph: *mut BNFlowGraphLayoutRequest);
}
extern "C" {
    pub fn BNIsILFlowGraph(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNIsLowLevelILFlowGraph(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNIsMediumLevelILFlowGraph(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNIsHighLevelILFlowGraph(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNGetFlowGraphLowLevelILFunction(graph: *mut BNFlowGraph) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetFlowGraphMediumLevelILFunction(
        graph: *mut BNFlowGraph,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetFlowGraphHighLevelILFunction(graph: *mut BNFlowGraph)
        -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNSetFlowGraphLowLevelILFunction(
        graph: *mut BNFlowGraph,
        func: *mut BNLowLevelILFunction,
    );
}
extern "C" {
    pub fn BNSetFlowGraphMediumLevelILFunction(
        graph: *mut BNFlowGraph,
        func: *mut BNMediumLevelILFunction,
    );
}
extern "C" {
    pub fn BNSetFlowGraphHighLevelILFunction(
        graph: *mut BNFlowGraph,
        func: *mut BNHighLevelILFunction,
    );
}
extern "C" {
    pub fn BNGetFlowGraphNodes(
        graph: *mut BNFlowGraph,
        count: *mut size_t,
    ) -> *mut *mut BNFlowGraphNode;
}
extern "C" {
    pub fn BNGetFlowGraphNode(graph: *mut BNFlowGraph, i: size_t) -> *mut BNFlowGraphNode;
}
extern "C" {
    pub fn BNGetFlowGraphNodesInRegion(
        graph: *mut BNFlowGraph,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        count: *mut size_t,
    ) -> *mut *mut BNFlowGraphNode;
}
extern "C" {
    pub fn BNFreeFlowGraphNodeList(nodes: *mut *mut BNFlowGraphNode, count: size_t);
}
extern "C" {
    pub fn BNFlowGraphHasNodes(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNAddFlowGraphNode(graph: *mut BNFlowGraph, node: *mut BNFlowGraphNode) -> size_t;
}
extern "C" {
    pub fn BNGetFlowGraphWidth(graph: *mut BNFlowGraph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetFlowGraphHeight(graph: *mut BNFlowGraph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNCreateFlowGraphNode(graph: *mut BNFlowGraph) -> *mut BNFlowGraphNode;
}
extern "C" {
    pub fn BNNewFlowGraphNodeReference(node: *mut BNFlowGraphNode) -> *mut BNFlowGraphNode;
}
extern "C" {
    pub fn BNFreeFlowGraphNode(node: *mut BNFlowGraphNode);
}
extern "C" {
    pub fn BNGetFlowGraphNodeOwner(node: *mut BNFlowGraphNode) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNGetFlowGraphBasicBlock(node: *mut BNFlowGraphNode) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNSetFlowGraphBasicBlock(node: *mut BNFlowGraphNode, block: *mut BNBasicBlock);
}
extern "C" {
    pub fn BNGetFlowGraphNodeX(node: *mut BNFlowGraphNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetFlowGraphNodeY(node: *mut BNFlowGraphNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetFlowGraphNodeWidth(node: *mut BNFlowGraphNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetFlowGraphNodeHeight(node: *mut BNFlowGraphNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetFlowGraphNodeLines(
        node: *mut BNFlowGraphNode,
        count: *mut size_t,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNSetFlowGraphNodeLines(
        node: *mut BNFlowGraphNode,
        lines: *mut BNDisassemblyTextLine,
        count: size_t,
    );
}
extern "C" {
    pub fn BNGetFlowGraphNodeOutgoingEdges(
        node: *mut BNFlowGraphNode,
        count: *mut size_t,
    ) -> *mut BNFlowGraphEdge;
}
extern "C" {
    pub fn BNGetFlowGraphNodeIncomingEdges(
        node: *mut BNFlowGraphNode,
        count: *mut size_t,
    ) -> *mut BNFlowGraphEdge;
}
extern "C" {
    pub fn BNFreeFlowGraphNodeEdgeList(edges: *mut BNFlowGraphEdge, count: size_t);
}
extern "C" {
    pub fn BNAddFlowGraphNodeOutgoingEdge(
        node: *mut BNFlowGraphNode,
        type_: BNBranchType,
        target: *mut BNFlowGraphNode,
        edgeStyle: BNEdgeStyle,
    );
}
extern "C" {
    pub fn BNGetFlowGraphNodeHighlight(node: *mut BNFlowGraphNode) -> BNHighlightColor;
}
extern "C" {
    pub fn BNSetFlowGraphNodeHighlight(node: *mut BNFlowGraphNode, color: BNHighlightColor);
}
extern "C" {
    pub fn BNFinishPrepareForLayout(graph: *mut BNFlowGraph);
}
extern "C" {
    pub fn BNUpdateFlowGraph(graph: *mut BNFlowGraph) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNSetFlowGraphOption(graph: *mut BNFlowGraph, option: BNFlowGraphOption, value: bool);
}
extern "C" {
    pub fn BNIsFlowGraphOptionSet(graph: *mut BNFlowGraph, option: BNFlowGraphOption) -> bool;
}
extern "C" {
    pub fn BNIsNodeValidForFlowGraph(graph: *mut BNFlowGraph, node: *mut BNFlowGraphNode) -> bool;
}
extern "C" {
    pub fn BNCreateSymbol(
        type_: BNSymbolType,
        shortName: *const ::std::os::raw::c_char,
        fullName: *const ::std::os::raw::c_char,
        rawName: *const ::std::os::raw::c_char,
        addr: u64,
        binding: BNSymbolBinding,
        nameSpace: *const BNNameSpace,
        ordinal: u64,
    ) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNNewSymbolReference(sym: *mut BNSymbol) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNFreeSymbol(sym: *mut BNSymbol);
}
extern "C" {
    pub fn BNGetSymbolType(sym: *mut BNSymbol) -> BNSymbolType;
}
extern "C" {
    pub fn BNGetSymbolBinding(sym: *mut BNSymbol) -> BNSymbolBinding;
}
extern "C" {
    pub fn BNGetSymbolNameSpace(sym: *mut BNSymbol) -> BNNameSpace;
}
extern "C" {
    pub fn BNGetSymbolShortName(sym: *mut BNSymbol) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetSymbolFullName(sym: *mut BNSymbol) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetSymbolRawName(sym: *mut BNSymbol) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetSymbolAddress(sym: *mut BNSymbol) -> u64;
}
extern "C" {
    pub fn BNGetSymbolOrdinal(sym: *mut BNSymbol) -> u64;
}
extern "C" {
    pub fn BNIsSymbolAutoDefined(sym: *mut BNSymbol) -> bool;
}
extern "C" {
    pub fn BNGetSymbolAliases(
        sym: *mut BNSymbol,
        count: *mut size_t,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetSymbolByAddress(
        view: *mut BNBinaryView,
        addr: u64,
        nameSpace: *const BNNameSpace,
    ) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolByRawName(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        nameSpace: *const BNNameSpace,
    ) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolsByName(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        count: *mut size_t,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbols(
        view: *mut BNBinaryView,
        count: *mut size_t,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolsInRange(
        view: *mut BNBinaryView,
        start: u64,
        len: u64,
        count: *mut size_t,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolsOfType(
        view: *mut BNBinaryView,
        type_: BNSymbolType,
        count: *mut size_t,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolsOfTypeInRange(
        view: *mut BNBinaryView,
        type_: BNSymbolType,
        start: u64,
        len: u64,
        count: *mut size_t,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNFreeSymbolList(syms: *mut *mut BNSymbol, count: size_t);
}
extern "C" {
    pub fn BNGetVisibleSymbols(
        view: *mut BNBinaryView,
        count: *mut size_t,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNDefineAutoSymbol(view: *mut BNBinaryView, sym: *mut BNSymbol);
}
extern "C" {
    pub fn BNUndefineAutoSymbol(view: *mut BNBinaryView, sym: *mut BNSymbol);
}
extern "C" {
    pub fn BNDefineUserSymbol(view: *mut BNBinaryView, sym: *mut BNSymbol);
}
extern "C" {
    pub fn BNUndefineUserSymbol(view: *mut BNBinaryView, sym: *mut BNSymbol);
}
extern "C" {
    pub fn BNDefineImportedFunction(
        view: *mut BNBinaryView,
        importAddressSym: *mut BNSymbol,
        func: *mut BNFunction,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNDefineAutoSymbolAndVariableOrFunction(
        view: *mut BNBinaryView,
        platform: *mut BNPlatform,
        sym: *mut BNSymbol,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNImportedFunctionFromImportAddressSymbol(
        sym: *mut BNSymbol,
        addr: u64,
    ) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNCreateLowLevelILFunction(
        arch: *mut BNArchitecture,
        func: *mut BNFunction,
    ) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNNewLowLevelILFunctionReference(
        func: *mut BNLowLevelILFunction,
    ) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNFreeLowLevelILFunction(func: *mut BNLowLevelILFunction);
}
extern "C" {
    pub fn BNGetLowLevelILOwnerFunction(func: *mut BNLowLevelILFunction) -> *mut BNFunction;
}
extern "C" {
    pub fn BNLowLevelILGetCurrentAddress(func: *mut BNLowLevelILFunction) -> u64;
}
extern "C" {
    pub fn BNLowLevelILSetCurrentAddress(
        func: *mut BNLowLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    );
}
extern "C" {
    pub fn BNLowLevelILSetCurrentSourceBlock(
        func: *mut BNLowLevelILFunction,
        source: *mut BNBasicBlock,
    );
}
extern "C" {
    pub fn BNLowLevelILGetInstructionStart(
        func: *mut BNLowLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNLowLevelILClearIndirectBranches(func: *mut BNLowLevelILFunction);
}
extern "C" {
    pub fn BNLowLevelILSetIndirectBranches(
        func: *mut BNLowLevelILFunction,
        branches: *mut BNArchitectureAndAddress,
        count: size_t,
    );
}
extern "C" {
    pub fn BNLowLevelILAddExpr(
        func: *mut BNLowLevelILFunction,
        operation: BNLowLevelILOperation,
        size: size_t,
        flags: u32,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNLowLevelILAddExprWithLocation(
        func: *mut BNLowLevelILFunction,
        addr: u64,
        sourceOperand: u32,
        operation: BNLowLevelILOperation,
        size: size_t,
        flags: u32,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNLowLevelILSetExprSourceOperand(
        func: *mut BNLowLevelILFunction,
        expr: size_t,
        operand: u32,
    );
}
extern "C" {
    pub fn BNLowLevelILAddInstruction(func: *mut BNLowLevelILFunction, expr: size_t) -> size_t;
}
extern "C" {
    pub fn BNLowLevelILGoto(
        func: *mut BNLowLevelILFunction,
        label: *mut BNLowLevelILLabel,
    ) -> size_t;
}
extern "C" {
    pub fn BNLowLevelILGotoWithLocation(
        func: *mut BNLowLevelILFunction,
        label: *mut BNLowLevelILLabel,
        addr: u64,
        sourceOperand: u32,
    ) -> size_t;
}
extern "C" {
    pub fn BNLowLevelILIf(
        func: *mut BNLowLevelILFunction,
        op: u64,
        t: *mut BNLowLevelILLabel,
        f: *mut BNLowLevelILLabel,
    ) -> size_t;
}
extern "C" {
    pub fn BNLowLevelILIfWithLocation(
        func: *mut BNLowLevelILFunction,
        op: u64,
        t: *mut BNLowLevelILLabel,
        f: *mut BNLowLevelILLabel,
        addr: u64,
        sourceOperand: u32,
    ) -> size_t;
}
extern "C" {
    pub fn BNLowLevelILInitLabel(label: *mut BNLowLevelILLabel);
}
extern "C" {
    pub fn BNLowLevelILMarkLabel(func: *mut BNLowLevelILFunction, label: *mut BNLowLevelILLabel);
}
extern "C" {
    pub fn BNFinalizeLowLevelILFunction(func: *mut BNLowLevelILFunction);
}
extern "C" {
    pub fn BNPrepareToCopyLowLevelILFunction(
        func: *mut BNLowLevelILFunction,
        src: *mut BNLowLevelILFunction,
    );
}
extern "C" {
    pub fn BNPrepareToCopyLowLevelILBasicBlock(
        func: *mut BNLowLevelILFunction,
        block: *mut BNBasicBlock,
    );
}
extern "C" {
    pub fn BNGetLabelForLowLevelILSourceInstruction(
        func: *mut BNLowLevelILFunction,
        instr: size_t,
    ) -> *mut BNLowLevelILLabel;
}
extern "C" {
    pub fn BNLowLevelILAddLabelMap(
        func: *mut BNLowLevelILFunction,
        values: *mut u64,
        labels: *mut *mut BNLowLevelILLabel,
        count: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNLowLevelILAddOperandList(
        func: *mut BNLowLevelILFunction,
        operands: *mut u64,
        count: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNLowLevelILGetOperandList(
        func: *mut BNLowLevelILFunction,
        expr: size_t,
        operand: size_t,
        count: *mut size_t,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNLowLevelILFreeOperandList(operands: *mut u64);
}
extern "C" {
    pub fn BNGetLowLevelILByIndex(
        func: *mut BNLowLevelILFunction,
        i: size_t,
    ) -> BNLowLevelILInstruction;
}
extern "C" {
    pub fn BNGetLowLevelILIndexForInstruction(func: *mut BNLowLevelILFunction, i: size_t)
        -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILInstructionForExpr(
        func: *mut BNLowLevelILFunction,
        expr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILInstructionCount(func: *mut BNLowLevelILFunction) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILExprCount(func: *mut BNLowLevelILFunction) -> size_t;
}
extern "C" {
    pub fn BNUpdateLowLevelILOperand(
        func: *mut BNLowLevelILFunction,
        instr: size_t,
        operandIndex: size_t,
        value: u64,
    );
}
extern "C" {
    pub fn BNReplaceLowLevelILExpr(func: *mut BNLowLevelILFunction, expr: size_t, newExpr: size_t);
}
extern "C" {
    pub fn BNAddLowLevelILLabelForAddress(
        func: *mut BNLowLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    );
}
extern "C" {
    pub fn BNGetLowLevelILLabelForAddress(
        func: *mut BNLowLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> *mut BNLowLevelILLabel;
}
extern "C" {
    pub fn BNGetLowLevelILExprText(
        func: *mut BNLowLevelILFunction,
        arch: *mut BNArchitecture,
        i: size_t,
        tokens: *mut *mut BNInstructionTextToken,
        count: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetLowLevelILInstructionText(
        il: *mut BNLowLevelILFunction,
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        i: size_t,
        tokens: *mut *mut BNInstructionTextToken,
        count: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetLowLevelILTemporaryRegisterCount(func: *mut BNLowLevelILFunction) -> u32;
}
extern "C" {
    pub fn BNGetLowLevelILTemporaryFlagCount(func: *mut BNLowLevelILFunction) -> u32;
}
extern "C" {
    pub fn BNGetLowLevelILBasicBlockList(
        func: *mut BNLowLevelILFunction,
        count: *mut size_t,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetLowLevelILBasicBlockForInstruction(
        func: *mut BNLowLevelILFunction,
        i: size_t,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetLowLevelILSSAForm(func: *mut BNLowLevelILFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetLowLevelILNonSSAForm(func: *mut BNLowLevelILFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetLowLevelILSSAInstructionIndex(
        func: *mut BNLowLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILNonSSAInstructionIndex(
        func: *mut BNLowLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILSSAExprIndex(func: *mut BNLowLevelILFunction, expr: size_t) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILNonSSAExprIndex(func: *mut BNLowLevelILFunction, expr: size_t) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILSSARegisterDefinition(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        version: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILSSAFlagDefinition(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        version: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILSSAMemoryDefinition(
        func: *mut BNLowLevelILFunction,
        version: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILSSARegisterUses(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        version: size_t,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetLowLevelILSSAFlagUses(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        version: size_t,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetLowLevelILSSAMemoryUses(
        func: *mut BNLowLevelILFunction,
        version: size_t,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetLowLevelILSSARegisterValue(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        version: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILSSAFlagValue(
        func: *mut BNLowLevelILFunction,
        flag: u32,
        version: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILExprValue(
        func: *mut BNLowLevelILFunction,
        expr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleExprValues(
        func: *mut BNLowLevelILFunction,
        expr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILRegisterValueAtInstruction(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILRegisterValueAfterInstruction(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleRegisterValuesAtInstruction(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleRegisterValuesAfterInstruction(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILFlagValueAtInstruction(
        func: *mut BNLowLevelILFunction,
        flag: u32,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILFlagValueAfterInstruction(
        func: *mut BNLowLevelILFunction,
        flag: u32,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleFlagValuesAtInstruction(
        func: *mut BNLowLevelILFunction,
        flag: u32,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleFlagValuesAfterInstruction(
        func: *mut BNLowLevelILFunction,
        flag: u32,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILStackContentsAtInstruction(
        func: *mut BNLowLevelILFunction,
        offset: i64,
        len: size_t,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILStackContentsAfterInstruction(
        func: *mut BNLowLevelILFunction,
        offset: i64,
        len: size_t,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleStackContentsAtInstruction(
        func: *mut BNLowLevelILFunction,
        offset: i64,
        len: size_t,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleStackContentsAfterInstruction(
        func: *mut BNLowLevelILFunction,
        offset: i64,
        len: size_t,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILForLowLevelIL(
        func: *mut BNLowLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetMappedMediumLevelIL(
        func: *mut BNLowLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetMediumLevelILInstructionIndex(
        func: *mut BNLowLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILExprIndex(func: *mut BNLowLevelILFunction, expr: size_t) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILExprIndexes(
        func: *mut BNLowLevelILFunction,
        expr: size_t,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetMappedMediumLevelILInstructionIndex(
        func: *mut BNLowLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMappedMediumLevelILExprIndex(
        func: *mut BNLowLevelILFunction,
        expr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNCreateMediumLevelILFunction(
        arch: *mut BNArchitecture,
        func: *mut BNFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNNewMediumLevelILFunctionReference(
        func: *mut BNMediumLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNFreeMediumLevelILFunction(func: *mut BNMediumLevelILFunction);
}
extern "C" {
    pub fn BNGetMediumLevelILOwnerFunction(func: *mut BNMediumLevelILFunction) -> *mut BNFunction;
}
extern "C" {
    pub fn BNMediumLevelILGetCurrentAddress(func: *mut BNMediumLevelILFunction) -> u64;
}
extern "C" {
    pub fn BNMediumLevelILSetCurrentAddress(
        func: *mut BNMediumLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    );
}
extern "C" {
    pub fn BNMediumLevelILGetInstructionStart(
        func: *mut BNMediumLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNMediumLevelILAddExpr(
        func: *mut BNMediumLevelILFunction,
        operation: BNMediumLevelILOperation,
        size: size_t,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
        e: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNMediumLevelILAddExprWithLocation(
        func: *mut BNMediumLevelILFunction,
        operation: BNMediumLevelILOperation,
        addr: u64,
        sourceOperand: u32,
        size: size_t,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
        e: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNMediumLevelILAddInstruction(
        func: *mut BNMediumLevelILFunction,
        expr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNMediumLevelILGoto(
        func: *mut BNMediumLevelILFunction,
        label: *mut BNMediumLevelILLabel,
    ) -> size_t;
}
extern "C" {
    pub fn BNMediumLevelILGotoWithLocation(
        func: *mut BNMediumLevelILFunction,
        label: *mut BNMediumLevelILLabel,
        addr: u64,
        sourceOperand: u32,
    ) -> size_t;
}
extern "C" {
    pub fn BNMediumLevelILIf(
        func: *mut BNMediumLevelILFunction,
        op: u64,
        t: *mut BNMediumLevelILLabel,
        f: *mut BNMediumLevelILLabel,
    ) -> size_t;
}
extern "C" {
    pub fn BNMediumLevelILIfWithLocation(
        func: *mut BNMediumLevelILFunction,
        op: u64,
        t: *mut BNMediumLevelILLabel,
        f: *mut BNMediumLevelILLabel,
        addr: u64,
        sourceOperand: u32,
    ) -> size_t;
}
extern "C" {
    pub fn BNMediumLevelILInitLabel(label: *mut BNMediumLevelILLabel);
}
extern "C" {
    pub fn BNMediumLevelILMarkLabel(
        func: *mut BNMediumLevelILFunction,
        label: *mut BNMediumLevelILLabel,
    );
}
extern "C" {
    pub fn BNFinalizeMediumLevelILFunction(func: *mut BNMediumLevelILFunction);
}
extern "C" {
    pub fn BNGenerateMediumLevelILSSAForm(
        func: *mut BNMediumLevelILFunction,
        analyzeConditionals: bool,
        handleAliases: bool,
        knownNotAliases: *mut BNVariable,
        knownNotAliasCount: size_t,
        knownAliases: *mut BNVariable,
        knownAliasCount: size_t,
    );
}
extern "C" {
    pub fn BNPrepareToCopyMediumLevelILFunction(
        func: *mut BNMediumLevelILFunction,
        src: *mut BNMediumLevelILFunction,
    );
}
extern "C" {
    pub fn BNPrepareToCopyMediumLevelILBasicBlock(
        func: *mut BNMediumLevelILFunction,
        block: *mut BNBasicBlock,
    );
}
extern "C" {
    pub fn BNGetLabelForMediumLevelILSourceInstruction(
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
    ) -> *mut BNMediumLevelILLabel;
}
extern "C" {
    pub fn BNMediumLevelILAddLabelMap(
        func: *mut BNMediumLevelILFunction,
        values: *mut u64,
        labels: *mut *mut BNMediumLevelILLabel,
        count: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNMediumLevelILAddOperandList(
        func: *mut BNMediumLevelILFunction,
        operands: *mut u64,
        count: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNMediumLevelILGetOperandList(
        func: *mut BNMediumLevelILFunction,
        expr: size_t,
        operand: size_t,
        count: *mut size_t,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNMediumLevelILFreeOperandList(operands: *mut u64);
}
extern "C" {
    pub fn BNGetMediumLevelILByIndex(
        func: *mut BNMediumLevelILFunction,
        i: size_t,
    ) -> BNMediumLevelILInstruction;
}
extern "C" {
    pub fn BNGetMediumLevelILIndexForInstruction(
        func: *mut BNMediumLevelILFunction,
        i: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILInstructionForExpr(
        func: *mut BNMediumLevelILFunction,
        expr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILInstructionCount(func: *mut BNMediumLevelILFunction) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILExprCount(func: *mut BNMediumLevelILFunction) -> size_t;
}
extern "C" {
    pub fn BNUpdateMediumLevelILOperand(
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
        operandIndex: size_t,
        value: u64,
    );
}
extern "C" {
    pub fn BNMarkMediumLevelILInstructionForRemoval(
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
    );
}
extern "C" {
    pub fn BNReplaceMediumLevelILInstruction(
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
        expr: size_t,
    );
}
extern "C" {
    pub fn BNReplaceMediumLevelILExpr(
        func: *mut BNMediumLevelILFunction,
        expr: size_t,
        newExpr: size_t,
    );
}
extern "C" {
    pub fn BNGetMediumLevelILExprText(
        func: *mut BNMediumLevelILFunction,
        arch: *mut BNArchitecture,
        i: size_t,
        tokens: *mut *mut BNInstructionTextToken,
        count: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetMediumLevelILInstructionText(
        il: *mut BNMediumLevelILFunction,
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        i: size_t,
        tokens: *mut *mut BNInstructionTextToken,
        count: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetMediumLevelILBasicBlockList(
        func: *mut BNMediumLevelILFunction,
        count: *mut size_t,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetMediumLevelILBasicBlockForInstruction(
        func: *mut BNMediumLevelILFunction,
        i: size_t,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAForm(
        func: *mut BNMediumLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetMediumLevelILNonSSAForm(
        func: *mut BNMediumLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAInstructionIndex(
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILNonSSAInstructionIndex(
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAExprIndex(
        func: *mut BNMediumLevelILFunction,
        expr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILNonSSAExprIndex(
        func: *mut BNMediumLevelILFunction,
        expr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAVarDefinition(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        version: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAMemoryDefinition(
        func: *mut BNMediumLevelILFunction,
        version: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAVarUses(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        version: size_t,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAMemoryUses(
        func: *mut BNMediumLevelILFunction,
        version: size_t,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNIsMediumLevelILSSAVarLive(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        version: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableDefinitions(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableUses(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAVarValue(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        version: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILExprValue(
        func: *mut BNMediumLevelILFunction,
        expr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleSSAVarValues(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        version: size_t,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleExprValues(
        func: *mut BNMediumLevelILFunction,
        expr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAVarVersionAtILInstruction(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAMemoryVersionAtILInstruction(
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableForRegisterAtInstruction(
        func: *mut BNMediumLevelILFunction,
        reg: u32,
        instr: size_t,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableForFlagAtInstruction(
        func: *mut BNMediumLevelILFunction,
        flag: u32,
        instr: size_t,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableForStackLocationAtInstruction(
        func: *mut BNMediumLevelILFunction,
        offset: i64,
        instr: size_t,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetMediumLevelILRegisterValueAtInstruction(
        func: *mut BNMediumLevelILFunction,
        reg: u32,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILRegisterValueAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        reg: u32,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleRegisterValuesAtInstruction(
        func: *mut BNMediumLevelILFunction,
        reg: u32,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleRegisterValuesAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        reg: u32,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILFlagValueAtInstruction(
        func: *mut BNMediumLevelILFunction,
        flag: u32,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILFlagValueAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        flag: u32,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleFlagValuesAtInstruction(
        func: *mut BNMediumLevelILFunction,
        flag: u32,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleFlagValuesAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        flag: u32,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILStackContentsAtInstruction(
        func: *mut BNMediumLevelILFunction,
        offset: i64,
        len: size_t,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILStackContentsAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        offset: i64,
        len: size_t,
        instr: size_t,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleStackContentsAtInstruction(
        func: *mut BNMediumLevelILFunction,
        offset: i64,
        len: size_t,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleStackContentsAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        offset: i64,
        len: size_t,
        instr: size_t,
        options: *mut BNDataFlowQueryOption,
        optionCount: size_t,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILBranchDependence(
        func: *mut BNMediumLevelILFunction,
        curInstr: size_t,
        branchInstr: size_t,
    ) -> BNILBranchDependence;
}
extern "C" {
    pub fn BNGetAllMediumLevelILBranchDependence(
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
        count: *mut size_t,
    ) -> *mut BNILBranchInstructionAndDependence;
}
extern "C" {
    pub fn BNFreeILBranchDependenceList(branches: *mut BNILBranchInstructionAndDependence);
}
extern "C" {
    pub fn BNGetLowLevelILForMediumLevelIL(
        func: *mut BNMediumLevelILFunction,
    ) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetLowLevelILInstructionIndex(
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILExprIndex(func: *mut BNMediumLevelILFunction, expr: size_t) -> size_t;
}
extern "C" {
    pub fn BNGetLowLevelILExprIndexes(
        func: *mut BNMediumLevelILFunction,
        expr: size_t,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetHighLevelILForMediumLevelIL(
        func: *mut BNMediumLevelILFunction,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetHighLevelILInstructionIndex(
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILExprIndex(func: *mut BNMediumLevelILFunction, expr: size_t) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILExprType(
        func: *mut BNMediumLevelILFunction,
        expr: size_t,
    ) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNCreateHighLevelILFunction(
        arch: *mut BNArchitecture,
        func: *mut BNFunction,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNNewHighLevelILFunctionReference(
        func: *mut BNHighLevelILFunction,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNFreeHighLevelILFunction(func: *mut BNHighLevelILFunction);
}
extern "C" {
    pub fn BNGetHighLevelILOwnerFunction(func: *mut BNHighLevelILFunction) -> *mut BNFunction;
}
extern "C" {
    pub fn BNHighLevelILGetCurrentAddress(func: *mut BNHighLevelILFunction) -> u64;
}
extern "C" {
    pub fn BNHighLevelILSetCurrentAddress(
        func: *mut BNHighLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    );
}
extern "C" {
    pub fn BNHighLevelILAddExpr(
        func: *mut BNHighLevelILFunction,
        operation: BNHighLevelILOperation,
        size: size_t,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
        e: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNHighLevelILAddExprWithLocation(
        func: *mut BNHighLevelILFunction,
        operation: BNHighLevelILOperation,
        addr: u64,
        sourceOperand: u32,
        size: size_t,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
        e: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILRootExpr(func: *mut BNHighLevelILFunction) -> size_t;
}
extern "C" {
    pub fn BNSetHighLevelILRootExpr(func: *mut BNHighLevelILFunction, expr: size_t);
}
extern "C" {
    pub fn BNFinalizeHighLevelILFunction(func: *mut BNHighLevelILFunction);
}
extern "C" {
    pub fn BNHighLevelILAddOperandList(
        func: *mut BNHighLevelILFunction,
        operands: *mut u64,
        count: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNHighLevelILGetOperandList(
        func: *mut BNHighLevelILFunction,
        expr: size_t,
        operand: size_t,
        count: *mut size_t,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNHighLevelILFreeOperandList(operands: *mut u64);
}
extern "C" {
    pub fn BNGetHighLevelILByIndex(
        func: *mut BNHighLevelILFunction,
        i: size_t,
        asFullAst: bool,
    ) -> BNHighLevelILInstruction;
}
extern "C" {
    pub fn BNGetHighLevelILIndexForInstruction(
        func: *mut BNHighLevelILFunction,
        i: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILInstructionForExpr(
        func: *mut BNHighLevelILFunction,
        expr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILInstructionCount(func: *mut BNHighLevelILFunction) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILExprCount(func: *mut BNHighLevelILFunction) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILForHighLevelILFunction(
        func: *mut BNHighLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetMediumLevelILExprIndexFromHighLevelIL(
        func: *mut BNHighLevelILFunction,
        expr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetMediumLevelILExprIndexesFromHighLevelIL(
        func: *mut BNHighLevelILFunction,
        expr: size_t,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNUpdateHighLevelILOperand(
        func: *mut BNHighLevelILFunction,
        instr: size_t,
        operandIndex: size_t,
        value: u64,
    );
}
extern "C" {
    pub fn BNReplaceHighLevelILExpr(
        func: *mut BNHighLevelILFunction,
        expr: size_t,
        newExpr: size_t,
    );
}
extern "C" {
    pub fn BNGetHighLevelILExprText(
        func: *mut BNHighLevelILFunction,
        expr: size_t,
        asFullAst: bool,
        count: *mut size_t,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNGetHighLevelILExprType(
        func: *mut BNHighLevelILFunction,
        expr: size_t,
    ) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetHighLevelILBasicBlockList(
        func: *mut BNHighLevelILFunction,
        count: *mut size_t,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetHighLevelILBasicBlockForInstruction(
        func: *mut BNHighLevelILFunction,
        i: size_t,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetHighLevelILSSAForm(func: *mut BNHighLevelILFunction) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetHighLevelILNonSSAForm(
        func: *mut BNHighLevelILFunction,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetHighLevelILSSAInstructionIndex(
        func: *mut BNHighLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILNonSSAInstructionIndex(
        func: *mut BNHighLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILSSAExprIndex(func: *mut BNHighLevelILFunction, expr: size_t) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILNonSSAExprIndex(
        func: *mut BNHighLevelILFunction,
        expr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILSSAVarDefinition(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        version: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILSSAMemoryDefinition(
        func: *mut BNHighLevelILFunction,
        version: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILSSAVarUses(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        version: size_t,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetHighLevelILSSAMemoryUses(
        func: *mut BNHighLevelILFunction,
        version: size_t,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNIsHighLevelILSSAVarLive(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        version: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetHighLevelILVariableDefinitions(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetHighLevelILVariableUses(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNGetHighLevelILSSAVarVersionAtILInstruction(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILSSAMemoryVersionAtILInstruction(
        func: *mut BNHighLevelILFunction,
        instr: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILExprIndexForLabel(
        func: *mut BNHighLevelILFunction,
        label: u64,
    ) -> size_t;
}
extern "C" {
    pub fn BNGetHighLevelILUsesForLabel(
        func: *mut BNHighLevelILFunction,
        label: u64,
        count: *mut size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn BNHighLevelILExprLessThan(
        leftFunc: *mut BNHighLevelILFunction,
        leftExpr: size_t,
        rightFunc: *mut BNHighLevelILFunction,
        rightExpr: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNHighLevelILExprEqual(
        leftFunc: *mut BNHighLevelILFunction,
        leftExpr: size_t,
        rightFunc: *mut BNHighLevelILFunction,
        rightExpr: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNNewTypeLibrary(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNNewTypeLibraryReference(lib: *mut BNTypeLibrary) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNDuplicateTypeLibrary(lib: *mut BNTypeLibrary) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNLoadTypeLibraryFromFile(path: *const ::std::os::raw::c_char) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNFreeTypeLibrary(lib: *mut BNTypeLibrary);
}
extern "C" {
    pub fn BNLookupTypeLibraryByName(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNLookupTypeLibraryByGuid(
        arch: *mut BNArchitecture,
        guid: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNGetArchitectureTypeLibraries(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNFreeTypeLibraryList(lib: *mut *mut BNTypeLibrary, count: size_t);
}
extern "C" {
    pub fn BNFinalizeTypeLibrary(lib: *mut BNTypeLibrary);
}
extern "C" {
    pub fn BNGetTypeLibraryArchitecture(lib: *mut BNTypeLibrary) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNSetTypeLibraryName(lib: *mut BNTypeLibrary, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetTypeLibraryName(lib: *mut BNTypeLibrary) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNAddTypeLibraryAlternateName(
        lib: *mut BNTypeLibrary,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetTypeLibraryAlternateNames(
        lib: *mut BNTypeLibrary,
        count: *mut size_t,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetTypeLibraryDependencyName(
        lib: *mut BNTypeLibrary,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetTypeLibraryDependencyName(lib: *mut BNTypeLibrary) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetTypeLibraryGuid(lib: *mut BNTypeLibrary, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetTypeLibraryGuid(lib: *mut BNTypeLibrary) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNClearTypeLibraryPlatforms(lib: *mut BNTypeLibrary);
}
extern "C" {
    pub fn BNAddTypeLibraryPlatform(lib: *mut BNTypeLibrary, platform: *mut BNPlatform);
}
extern "C" {
    pub fn BNGetTypeLibraryPlatforms(
        lib: *mut BNTypeLibrary,
        count: *mut size_t,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTypeLibraryStoreMetadata(
        lib: *mut BNTypeLibrary,
        key: *const ::std::os::raw::c_char,
        value: *mut BNMetadata,
    );
}
extern "C" {
    pub fn BNTypeLibraryQueryMetadata(
        lib: *mut BNTypeLibrary,
        key: *const ::std::os::raw::c_char,
    ) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNTypeLibraryRemoveMetadata(lib: *mut BNTypeLibrary, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddTypeLibraryNamedObject(
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNAddTypeLibraryNamedType(
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNGetTypeLibraryNamedObject(
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetTypeLibraryNamedType(
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetTypeLibraryNamedObjects(
        lib: *mut BNTypeLibrary,
        count: *mut size_t,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNGetTypeLibraryNamedTypes(
        lib: *mut BNTypeLibrary,
        count: *mut size_t,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNWriteTypeLibraryToFile(lib: *mut BNTypeLibrary, path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddBinaryViewTypeLibrary(view: *mut BNBinaryView, lib: *mut BNTypeLibrary);
}
extern "C" {
    pub fn BNGetBinaryViewTypeLibrary(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNGetBinaryViewTypeLibraries(
        view: *mut BNBinaryView,
        count: *mut size_t,
    ) -> *mut *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNBinaryViewImportTypeLibraryType(
        view: *mut BNBinaryView,
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNBinaryViewImportTypeLibraryObject(
        view: *mut BNBinaryView,
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNBinaryViewExportTypeToTypeLibrary(
        view: *mut BNBinaryView,
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNBinaryViewExportObjectToTypeLibrary(
        view: *mut BNBinaryView,
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNTypesEqual(a: *mut BNType, b: *mut BNType) -> bool;
}
extern "C" {
    pub fn BNTypesNotEqual(a: *mut BNType, b: *mut BNType) -> bool;
}
extern "C" {
    pub fn BNCreateVoidType() -> *mut BNType;
}
extern "C" {
    pub fn BNCreateBoolType() -> *mut BNType;
}
extern "C" {
    pub fn BNCreateIntegerType(
        width: size_t,
        sign: *mut BNBoolWithConfidence,
        altName: *const ::std::os::raw::c_char,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateFloatType(width: size_t, altName: *const ::std::os::raw::c_char) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateStructureType(s: *mut BNStructure) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateEnumerationType(
        arch: *mut BNArchitecture,
        e: *mut BNEnumeration,
        width: size_t,
        isSigned: bool,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreatePointerType(
        arch: *mut BNArchitecture,
        type_: *mut BNTypeWithConfidence,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
        refType: BNReferenceType,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreatePointerTypeOfWidth(
        width: size_t,
        type_: *mut BNTypeWithConfidence,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
        refType: BNReferenceType,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateArrayType(type_: *mut BNTypeWithConfidence, elem: u64) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateFunctionType(
        returnValue: *mut BNTypeWithConfidence,
        callingConvention: *mut BNCallingConventionWithConfidence,
        params: *mut BNFunctionParameter,
        paramCount: size_t,
        varArg: *mut BNBoolWithConfidence,
        stackAdjust: *mut BNOffsetWithConfidence,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNNewTypeReference(type_: *mut BNType) -> *mut BNType;
}
extern "C" {
    pub fn BNDuplicateType(type_: *mut BNType) -> *mut BNType;
}
extern "C" {
    pub fn BNGetTypeAndName(
        type_: *mut BNType,
        name: *mut BNQualifiedName,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreeType(type_: *mut BNType);
}
extern "C" {
    pub fn BNCreateTypeBuilderFromType(type_: *mut BNType) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateVoidTypeBuilder() -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateBoolTypeBuilder() -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateIntegerTypeBuilder(
        width: size_t,
        sign: *mut BNBoolWithConfidence,
        altName: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateFloatTypeBuilder(
        width: size_t,
        altName: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateStructureTypeBuilder(s: *mut BNStructure) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateEnumerationTypeBuilder(
        arch: *mut BNArchitecture,
        e: *mut BNEnumeration,
        width: size_t,
        isSigned: bool,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreatePointerTypeBuilder(
        arch: *mut BNArchitecture,
        type_: *mut BNTypeWithConfidence,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
        refType: BNReferenceType,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreatePointerTypeBuilderOfWidth(
        width: size_t,
        type_: *mut BNTypeWithConfidence,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
        refType: BNReferenceType,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateArrayTypeBuilder(
        type_: *mut BNTypeWithConfidence,
        elem: u64,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateFunctionTypeBuilder(
        returnValue: *mut BNTypeWithConfidence,
        callingConvention: *mut BNCallingConventionWithConfidence,
        params: *mut BNFunctionParameter,
        paramCount: size_t,
        varArg: *mut BNBoolWithConfidence,
        stackAdjust: *mut BNOffsetWithConfidence,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNFinalizeTypeBuilder(type_: *mut BNTypeBuilder) -> *mut BNType;
}
extern "C" {
    pub fn BNDuplicateTypeBuilder(type_: *mut BNTypeBuilder) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNGetTypeBuilderTypeAndName(
        type_: *mut BNTypeBuilder,
        name: *mut BNQualifiedName,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreeTypeBuilder(type_: *mut BNTypeBuilder);
}
extern "C" {
    pub fn BNTypeGetTypeName(nt: *mut BNType) -> BNQualifiedName;
}
extern "C" {
    pub fn BNGetTypeClass(type_: *mut BNType) -> BNTypeClass;
}
extern "C" {
    pub fn BNGetTypeWidth(type_: *mut BNType) -> u64;
}
extern "C" {
    pub fn BNGetTypeAlignment(type_: *mut BNType) -> size_t;
}
extern "C" {
    pub fn BNGetIntegerTypeDisplayType(type_: *mut BNType) -> BNIntegerDisplayType;
}
extern "C" {
    pub fn BNSetIntegerTypeDisplayType(
        type_: *mut BNTypeBuilder,
        displayType: BNIntegerDisplayType,
    );
}
extern "C" {
    pub fn BNIsTypeSigned(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeConst(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeVolatile(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeFloatingPoint(type_: *mut BNType) -> bool;
}
extern "C" {
    pub fn BNGetChildType(type_: *mut BNType) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetTypeCallingConvention(type_: *mut BNType) -> BNCallingConventionWithConfidence;
}
extern "C" {
    pub fn BNGetTypeParameters(type_: *mut BNType, count: *mut size_t) -> *mut BNFunctionParameter;
}
extern "C" {
    pub fn BNFreeTypeParameterList(types: *mut BNFunctionParameter, count: size_t);
}
extern "C" {
    pub fn BNTypeHasVariableArguments(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNFunctionTypeCanReturn(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNGetTypeStructure(type_: *mut BNType) -> *mut BNStructure;
}
extern "C" {
    pub fn BNGetTypeEnumeration(type_: *mut BNType) -> *mut BNEnumeration;
}
extern "C" {
    pub fn BNGetTypeNamedTypeReference(type_: *mut BNType) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNGetTypeElementCount(type_: *mut BNType) -> u64;
}
extern "C" {
    pub fn BNGetTypeOffset(type_: *mut BNType) -> u64;
}
extern "C" {
    pub fn BNTypeGetMemberScope(type_: *mut BNType) -> BNMemberScopeWithConfidence;
}
extern "C" {
    pub fn BNTypeGetMemberAccess(type_: *mut BNType) -> BNMemberAccessWithConfidence;
}
extern "C" {
    pub fn BNGetTypeStackAdjustment(type_: *mut BNType) -> BNOffsetWithConfidence;
}
extern "C" {
    pub fn BNTypeGetStructureName(type_: *mut BNType) -> BNQualifiedName;
}
extern "C" {
    pub fn BNGetRegisteredTypeName(type_: *mut BNType) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNGetTypeString(
        type_: *mut BNType,
        platform: *mut BNPlatform,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeStringBeforeName(
        type_: *mut BNType,
        platform: *mut BNPlatform,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeStringAfterName(
        type_: *mut BNType,
        platform: *mut BNPlatform,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeTokens(
        type_: *mut BNType,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        count: *mut size_t,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNGetTypeTokensBeforeName(
        type_: *mut BNType,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        count: *mut size_t,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNGetTypeTokensAfterName(
        type_: *mut BNType,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        count: *mut size_t,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNTypeWithReplacedStructure(
        type_: *mut BNType,
        from: *mut BNStructure,
        to: *mut BNStructure,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNTypeWithReplacedEnumeration(
        type_: *mut BNType,
        from: *mut BNEnumeration,
        to: *mut BNEnumeration,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNTypeWithReplacedNamedTypeReference(
        type_: *mut BNType,
        from: *mut BNNamedTypeReference,
        to: *mut BNNamedTypeReference,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNTypeBuilderGetTypeName(nt: *mut BNTypeBuilder) -> BNQualifiedName;
}
extern "C" {
    pub fn BNTypeBuilderSetTypeName(type_: *mut BNTypeBuilder, name: *mut BNQualifiedName);
}
extern "C" {
    pub fn BNGetTypeBuilderClass(type_: *mut BNTypeBuilder) -> BNTypeClass;
}
extern "C" {
    pub fn BNGetTypeBuilderWidth(type_: *mut BNTypeBuilder) -> u64;
}
extern "C" {
    pub fn BNGetTypeBuilderAlignment(type_: *mut BNTypeBuilder) -> size_t;
}
extern "C" {
    pub fn BNIsTypeBuilderSigned(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeBuilderConst(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeBuilderVolatile(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeBuilderFloatingPoint(type_: *mut BNTypeBuilder) -> bool;
}
extern "C" {
    pub fn BNGetTypeBuilderChildType(type_: *mut BNTypeBuilder) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetTypeBuilderCallingConvention(
        type_: *mut BNTypeBuilder,
    ) -> BNCallingConventionWithConfidence;
}
extern "C" {
    pub fn BNGetTypeBuilderParameters(
        type_: *mut BNTypeBuilder,
        count: *mut size_t,
    ) -> *mut BNFunctionParameter;
}
extern "C" {
    pub fn BNTypeBuilderHasVariableArguments(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNFunctionTypeBuilderCanReturn(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNGetTypeBuilderStructure(type_: *mut BNTypeBuilder) -> *mut BNStructure;
}
extern "C" {
    pub fn BNGetTypeBuilderEnumeration(type_: *mut BNTypeBuilder) -> *mut BNEnumeration;
}
extern "C" {
    pub fn BNGetTypeBuilderNamedTypeReference(
        type_: *mut BNTypeBuilder,
    ) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNGetTypeBuilderElementCount(type_: *mut BNTypeBuilder) -> u64;
}
extern "C" {
    pub fn BNGetTypeBuilderOffset(type_: *mut BNTypeBuilder) -> u64;
}
extern "C" {
    pub fn BNSetFunctionTypeBuilderCanReturn(
        type_: *mut BNTypeBuilder,
        canReturn: *mut BNBoolWithConfidence,
    );
}
extern "C" {
    pub fn BNTypeBuilderGetMemberScope(type_: *mut BNTypeBuilder) -> BNMemberScopeWithConfidence;
}
extern "C" {
    pub fn BNTypeBuilderSetMemberScope(
        type_: *mut BNTypeBuilder,
        scope: *mut BNMemberScopeWithConfidence,
    );
}
extern "C" {
    pub fn BNTypeBuilderGetMemberAccess(type_: *mut BNTypeBuilder) -> BNMemberAccessWithConfidence;
}
extern "C" {
    pub fn BNTypeBuilderSetMemberAccess(
        type_: *mut BNTypeBuilder,
        access: *mut BNMemberAccessWithConfidence,
    );
}
extern "C" {
    pub fn BNTypeBuilderSetConst(type_: *mut BNTypeBuilder, cnst: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNTypeBuilderSetVolatile(type_: *mut BNTypeBuilder, vltl: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNGetTypeBuilderStackAdjustment(type_: *mut BNTypeBuilder) -> BNOffsetWithConfidence;
}
extern "C" {
    pub fn BNTypeBuilderGetStructureName(type_: *mut BNTypeBuilder) -> BNQualifiedName;
}
extern "C" {
    pub fn BNGetTypeBuilderString(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeBuilderStringBeforeName(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeBuilderStringAfterName(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeBuilderTokens(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        count: *mut size_t,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNGetTypeBuilderTokensBeforeName(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        count: *mut size_t,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNGetTypeBuilderTokensAfterName(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        count: *mut size_t,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNCreateNamedTypeReference(
        nt: *mut BNNamedTypeReference,
        width: size_t,
        align: size_t,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceFromTypeAndId(
        id: *const ::std::os::raw::c_char,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceFromType(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceBuilder(
        nt: *mut BNNamedTypeReference,
        width: size_t,
        align: size_t,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceBuilderFromTypeAndId(
        id: *const ::std::os::raw::c_char,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceBuilderFromType(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateNamedType(
        cls: BNNamedTypeReferenceClass,
        id: *const ::std::os::raw::c_char,
        name: *mut BNQualifiedName,
    ) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNGetTypeReferenceClass(nt: *mut BNNamedTypeReference) -> BNNamedTypeReferenceClass;
}
extern "C" {
    pub fn BNGetTypeReferenceId(nt: *mut BNNamedTypeReference) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeReferenceName(nt: *mut BNNamedTypeReference) -> BNQualifiedName;
}
extern "C" {
    pub fn BNFreeQualifiedName(name: *mut BNQualifiedName);
}
extern "C" {
    pub fn BNFreeNamedTypeReference(nt: *mut BNNamedTypeReference);
}
extern "C" {
    pub fn BNNewNamedTypeReference(nt: *mut BNNamedTypeReference) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNCreateStructureBuilder() -> *mut BNStructureBuilder;
}
extern "C" {
    pub fn BNCreateStructureBuilderWithOptions(
        type_: BNStructureType,
        packed: bool,
    ) -> *mut BNStructureBuilder;
}
extern "C" {
    pub fn BNCreateStructureBuilderFromStructure(s: *mut BNStructure) -> *mut BNStructureBuilder;
}
extern "C" {
    pub fn BNDuplicateStructureBuilder(s: *mut BNStructureBuilder) -> *mut BNStructureBuilder;
}
extern "C" {
    pub fn BNFinalizeStructureBuilder(s: *mut BNStructureBuilder) -> *mut BNStructure;
}
extern "C" {
    pub fn BNNewStructureReference(s: *mut BNStructure) -> *mut BNStructure;
}
extern "C" {
    pub fn BNFreeStructure(s: *mut BNStructure);
}
extern "C" {
    pub fn BNFreeStructureBuilder(s: *mut BNStructureBuilder);
}
extern "C" {
    pub fn BNGetStructureMemberByName(
        s: *mut BNStructure,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNGetStructureMemberAtOffset(
        s: *mut BNStructure,
        offset: i64,
        idx: *mut size_t,
    ) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNFreeStructureMember(s: *mut BNStructureMember);
}
extern "C" {
    pub fn BNGetStructureMembers(s: *mut BNStructure, count: *mut size_t)
        -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNFreeStructureMemberList(members: *mut BNStructureMember, count: size_t);
}
extern "C" {
    pub fn BNGetStructureWidth(s: *mut BNStructure) -> u64;
}
extern "C" {
    pub fn BNGetStructureAlignment(s: *mut BNStructure) -> size_t;
}
extern "C" {
    pub fn BNIsStructurePacked(s: *mut BNStructure) -> bool;
}
extern "C" {
    pub fn BNIsStructureUnion(s: *mut BNStructure) -> bool;
}
extern "C" {
    pub fn BNGetStructureType(s: *mut BNStructure) -> BNStructureType;
}
extern "C" {
    pub fn BNStructureWithReplacedStructure(
        s: *mut BNStructure,
        from: *mut BNStructure,
        to: *mut BNStructure,
    ) -> *mut BNStructure;
}
extern "C" {
    pub fn BNStructureWithReplacedEnumeration(
        s: *mut BNStructure,
        from: *mut BNEnumeration,
        to: *mut BNEnumeration,
    ) -> *mut BNStructure;
}
extern "C" {
    pub fn BNStructureWithReplacedNamedTypeReference(
        s: *mut BNStructure,
        from: *mut BNNamedTypeReference,
        to: *mut BNNamedTypeReference,
    ) -> *mut BNStructure;
}
extern "C" {
    pub fn BNGetStructureBuilderMemberByName(
        s: *mut BNStructureBuilder,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNGetStructureBuilderMemberAtOffset(
        s: *mut BNStructureBuilder,
        offset: i64,
        idx: *mut size_t,
    ) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNGetStructureBuilderMembers(
        s: *mut BNStructureBuilder,
        count: *mut size_t,
    ) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNGetStructureBuilderWidth(s: *mut BNStructureBuilder) -> u64;
}
extern "C" {
    pub fn BNSetStructureBuilderWidth(s: *mut BNStructureBuilder, width: u64);
}
extern "C" {
    pub fn BNGetStructureBuilderAlignment(s: *mut BNStructureBuilder) -> size_t;
}
extern "C" {
    pub fn BNSetStructureBuilderAlignment(s: *mut BNStructureBuilder, align: size_t);
}
extern "C" {
    pub fn BNIsStructureBuilderPacked(s: *mut BNStructureBuilder) -> bool;
}
extern "C" {
    pub fn BNSetStructureBuilderPacked(s: *mut BNStructureBuilder, packed: bool);
}
extern "C" {
    pub fn BNIsStructureBuilderUnion(s: *mut BNStructureBuilder) -> bool;
}
extern "C" {
    pub fn BNSetStructureBuilderType(s: *mut BNStructureBuilder, type_: BNStructureType);
}
extern "C" {
    pub fn BNGetStructureBuilderType(s: *mut BNStructureBuilder) -> BNStructureType;
}
extern "C" {
    pub fn BNAddStructureBuilderMember(
        s: *mut BNStructureBuilder,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddStructureBuilderMemberAtOffset(
        s: *mut BNStructureBuilder,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
        offset: u64,
    );
}
extern "C" {
    pub fn BNRemoveStructureBuilderMember(s: *mut BNStructureBuilder, idx: size_t);
}
extern "C" {
    pub fn BNReplaceStructureBuilderMember(
        s: *mut BNStructureBuilder,
        idx: size_t,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNCreateEnumerationBuilder() -> *mut BNEnumerationBuilder;
}
extern "C" {
    pub fn BNCreateEnumerationBuilderFromEnumeration(
        e: *mut BNEnumeration,
    ) -> *mut BNEnumerationBuilder;
}
extern "C" {
    pub fn BNDuplicateEnumerationBuilder(e: *mut BNEnumerationBuilder)
        -> *mut BNEnumerationBuilder;
}
extern "C" {
    pub fn BNFinalizeEnumerationBuilder(e: *mut BNEnumerationBuilder) -> *mut BNEnumeration;
}
extern "C" {
    pub fn BNNewEnumerationReference(e: *mut BNEnumeration) -> *mut BNEnumeration;
}
extern "C" {
    pub fn BNFreeEnumeration(e: *mut BNEnumeration);
}
extern "C" {
    pub fn BNFreeEnumerationBuilder(e: *mut BNEnumerationBuilder);
}
extern "C" {
    pub fn BNGetEnumerationMembers(
        e: *mut BNEnumeration,
        count: *mut size_t,
    ) -> *mut BNEnumerationMember;
}
extern "C" {
    pub fn BNFreeEnumerationMemberList(members: *mut BNEnumerationMember, count: size_t);
}
extern "C" {
    pub fn BNGetEnumerationBuilderMembers(
        e: *mut BNEnumerationBuilder,
        count: *mut size_t,
    ) -> *mut BNEnumerationMember;
}
extern "C" {
    pub fn BNAddEnumerationBuilderMember(
        e: *mut BNEnumerationBuilder,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddEnumerationBuilderMemberWithValue(
        e: *mut BNEnumerationBuilder,
        name: *const ::std::os::raw::c_char,
        value: u64,
    );
}
extern "C" {
    pub fn BNRemoveEnumerationBuilderMember(e: *mut BNEnumerationBuilder, idx: size_t);
}
extern "C" {
    pub fn BNReplaceEnumerationBuilderMember(
        e: *mut BNEnumerationBuilder,
        idx: size_t,
        name: *const ::std::os::raw::c_char,
        value: u64,
    );
}
extern "C" {
    pub fn BNPreprocessSource(
        source: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        output: *mut *mut ::std::os::raw::c_char,
        errors: *mut *mut ::std::os::raw::c_char,
        includeDirs: *mut *const ::std::os::raw::c_char,
        includeDirCount: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNParseTypesFromSource(
        platform: *mut BNPlatform,
        source: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        result: *mut BNTypeParserResult,
        errors: *mut *mut ::std::os::raw::c_char,
        includeDirs: *mut *const ::std::os::raw::c_char,
        includeDirCount: size_t,
        autoTypeSource: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNParseTypesFromSourceFile(
        platform: *mut BNPlatform,
        fileName: *const ::std::os::raw::c_char,
        result: *mut BNTypeParserResult,
        errors: *mut *mut ::std::os::raw::c_char,
        includeDirs: *mut *const ::std::os::raw::c_char,
        includeDirCount: size_t,
        autoTypeSource: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeTypeParserResult(result: *mut BNTypeParserResult);
}
extern "C" {
    pub fn BNGetUpdateChannels(
        count: *mut size_t,
        errors: *mut *mut ::std::os::raw::c_char,
    ) -> *mut BNUpdateChannel;
}
extern "C" {
    pub fn BNFreeUpdateChannelList(list: *mut BNUpdateChannel, count: size_t);
}
extern "C" {
    pub fn BNGetUpdateChannelVersions(
        channel: *const ::std::os::raw::c_char,
        count: *mut size_t,
        errors: *mut *mut ::std::os::raw::c_char,
    ) -> *mut BNUpdateVersion;
}
extern "C" {
    pub fn BNFreeUpdateChannelVersionList(list: *mut BNUpdateVersion, count: size_t);
}
extern "C" {
    pub fn BNAreUpdatesAvailable(
        channel: *const ::std::os::raw::c_char,
        expireTime: *mut u64,
        serverTime: *mut u64,
        errors: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNUpdateToVersion(
        channel: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
        errors: *mut *mut ::std::os::raw::c_char,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: u64,
                total: u64,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    ) -> BNUpdateResult;
}
extern "C" {
    pub fn BNUpdateToLatestVersion(
        channel: *const ::std::os::raw::c_char,
        errors: *mut *mut ::std::os::raw::c_char,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: u64,
                total: u64,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    ) -> BNUpdateResult;
}
extern "C" {
    pub fn BNAreAutoUpdatesEnabled() -> bool;
}
extern "C" {
    pub fn BNSetAutoUpdatesEnabled(enabled: bool);
}
extern "C" {
    pub fn BNGetTimeSinceLastUpdateCheck() -> u64;
}
extern "C" {
    pub fn BNUpdatesChecked();
}
extern "C" {
    pub fn BNGetActiveUpdateChannel() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetActiveUpdateChannel(channel: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNIsUpdateInstallationPending() -> bool;
}
extern "C" {
    pub fn BNInstallPendingUpdate(errors: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNRegisterPluginCommand(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForAddress(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                addr: u64,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                addr: u64,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForRange(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                addr: u64,
                len: u64,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                addr: u64,
                len: u64,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForFunction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNFunction,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNFunction,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForLowLevelILFunction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNLowLevelILFunction,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNLowLevelILFunction,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForLowLevelILInstruction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNLowLevelILFunction,
                instr: size_t,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNLowLevelILFunction,
                instr: size_t,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForMediumLevelILFunction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNMediumLevelILFunction,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNMediumLevelILFunction,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForMediumLevelILInstruction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNMediumLevelILFunction,
                instr: size_t,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNMediumLevelILFunction,
                instr: size_t,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNGetAllPluginCommands(count: *mut size_t) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommands(
        view: *mut BNBinaryView,
        count: *mut size_t,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForAddress(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForRange(
        view: *mut BNBinaryView,
        addr: u64,
        len: u64,
        count: *mut size_t,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForFunction(
        view: *mut BNBinaryView,
        func: *mut BNFunction,
        count: *mut size_t,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForLowLevelILFunction(
        view: *mut BNBinaryView,
        func: *mut BNLowLevelILFunction,
        count: *mut size_t,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForLowLevelILInstruction(
        view: *mut BNBinaryView,
        func: *mut BNLowLevelILFunction,
        instr: size_t,
        count: *mut size_t,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForMediumLevelILFunction(
        view: *mut BNBinaryView,
        func: *mut BNMediumLevelILFunction,
        count: *mut size_t,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForMediumLevelILInstruction(
        view: *mut BNBinaryView,
        func: *mut BNMediumLevelILFunction,
        instr: size_t,
        count: *mut size_t,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNFreePluginCommandList(commands: *mut BNPluginCommand);
}
extern "C" {
    pub fn BNCreateCallingConvention(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
        cc: *mut BNCustomCallingConvention,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNRegisterCallingConvention(arch: *mut BNArchitecture, cc: *mut BNCallingConvention);
}
extern "C" {
    pub fn BNNewCallingConventionReference(
        cc: *mut BNCallingConvention,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNFreeCallingConvention(cc: *mut BNCallingConvention);
}
extern "C" {
    pub fn BNGetArchitectureCallingConventions(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut *mut BNCallingConvention;
}
extern "C" {
    pub fn BNFreeCallingConventionList(list: *mut *mut BNCallingConvention, count: size_t);
}
extern "C" {
    pub fn BNGetArchitectureCallingConventionByName(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetCallingConventionArchitecture(cc: *mut BNCallingConvention) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetCallingConventionName(cc: *mut BNCallingConvention) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetCallerSavedRegisters(cc: *mut BNCallingConvention, count: *mut size_t) -> *mut u32;
}
extern "C" {
    pub fn BNGetCalleeSavedRegisters(cc: *mut BNCallingConvention, count: *mut size_t) -> *mut u32;
}
extern "C" {
    pub fn BNGetIntegerArgumentRegisters(
        cc: *mut BNCallingConvention,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetFloatArgumentRegisters(
        cc: *mut BNCallingConvention,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNAreArgumentRegistersSharedIndex(cc: *mut BNCallingConvention) -> bool;
}
extern "C" {
    pub fn BNIsStackReservedForArgumentRegisters(cc: *mut BNCallingConvention) -> bool;
}
extern "C" {
    pub fn BNIsStackAdjustedOnReturn(cc: *mut BNCallingConvention) -> bool;
}
extern "C" {
    pub fn BNIsEligibleForHeuristics(cc: *mut BNCallingConvention) -> bool;
}
extern "C" {
    pub fn BNGetIntegerReturnValueRegister(cc: *mut BNCallingConvention) -> u32;
}
extern "C" {
    pub fn BNGetHighIntegerReturnValueRegister(cc: *mut BNCallingConvention) -> u32;
}
extern "C" {
    pub fn BNGetFloatReturnValueRegister(cc: *mut BNCallingConvention) -> u32;
}
extern "C" {
    pub fn BNGetGlobalPointerRegister(cc: *mut BNCallingConvention) -> u32;
}
extern "C" {
    pub fn BNGetImplicitlyDefinedRegisters(
        cc: *mut BNCallingConvention,
        count: *mut size_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetIncomingRegisterValue(
        cc: *mut BNCallingConvention,
        reg: u32,
        func: *mut BNFunction,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetIncomingFlagValue(
        cc: *mut BNCallingConvention,
        reg: u32,
        func: *mut BNFunction,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetIncomingVariableForParameterVariable(
        cc: *mut BNCallingConvention,
        var: *const BNVariable,
        func: *mut BNFunction,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetParameterVariableForIncomingVariable(
        cc: *mut BNCallingConvention,
        var: *const BNVariable,
        func: *mut BNFunction,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetDefaultIncomingVariableForParameterVariable(
        cc: *mut BNCallingConvention,
        var: *const BNVariable,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetDefaultParameterVariableForIncomingVariable(
        cc: *mut BNCallingConvention,
        var: *const BNVariable,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetArchitectureDefaultCallingConvention(
        arch: *mut BNArchitecture,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetArchitectureCdeclCallingConvention(
        arch: *mut BNArchitecture,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetArchitectureStdcallCallingConvention(
        arch: *mut BNArchitecture,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetArchitectureFastcallCallingConvention(
        arch: *mut BNArchitecture,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNSetArchitectureDefaultCallingConvention(
        arch: *mut BNArchitecture,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNSetArchitectureCdeclCallingConvention(
        arch: *mut BNArchitecture,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNSetArchitectureStdcallCallingConvention(
        arch: *mut BNArchitecture,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNSetArchitectureFastcallCallingConvention(
        arch: *mut BNArchitecture,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNCreatePlatform(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNRegisterPlatform(os: *const ::std::os::raw::c_char, platform: *mut BNPlatform);
}
extern "C" {
    pub fn BNNewPlatformReference(platform: *mut BNPlatform) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNFreePlatform(platform: *mut BNPlatform);
}
extern "C" {
    pub fn BNGetPlatformName(platform: *mut BNPlatform) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetPlatformArchitecture(platform: *mut BNPlatform) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetPlatformByName(name: *const ::std::os::raw::c_char) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNGetPlatformList(count: *mut size_t) -> *mut *mut BNPlatform;
}
extern "C" {
    pub fn BNGetPlatformListByArchitecture(
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut *mut BNPlatform;
}
extern "C" {
    pub fn BNGetPlatformListByOS(
        os: *const ::std::os::raw::c_char,
        count: *mut size_t,
    ) -> *mut *mut BNPlatform;
}
extern "C" {
    pub fn BNGetPlatformListByOSAndArchitecture(
        os: *const ::std::os::raw::c_char,
        arch: *mut BNArchitecture,
        count: *mut size_t,
    ) -> *mut *mut BNPlatform;
}
extern "C" {
    pub fn BNFreePlatformList(platform: *mut *mut BNPlatform, count: size_t);
}
extern "C" {
    pub fn BNGetPlatformOSList(count: *mut size_t) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreePlatformOSList(list: *mut *mut ::std::os::raw::c_char, count: size_t);
}
extern "C" {
    pub fn BNGetPlatformDefaultCallingConvention(
        platform: *mut BNPlatform,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetPlatformCdeclCallingConvention(
        platform: *mut BNPlatform,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetPlatformStdcallCallingConvention(
        platform: *mut BNPlatform,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetPlatformFastcallCallingConvention(
        platform: *mut BNPlatform,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetPlatformCallingConventions(
        platform: *mut BNPlatform,
        count: *mut size_t,
    ) -> *mut *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetPlatformSystemCallConvention(platform: *mut BNPlatform)
        -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNRegisterPlatformCallingConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNRegisterPlatformDefaultCallingConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNRegisterPlatformCdeclCallingConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNRegisterPlatformStdcallCallingConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNRegisterPlatformFastcallCallingConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNSetPlatformSystemCallConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNGetArchitectureStandalonePlatform(arch: *mut BNArchitecture) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNGetRelatedPlatform(
        platform: *mut BNPlatform,
        arch: *mut BNArchitecture,
    ) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNAddRelatedPlatform(
        platform: *mut BNPlatform,
        arch: *mut BNArchitecture,
        related: *mut BNPlatform,
    );
}
extern "C" {
    pub fn BNGetAssociatedPlatformByAddress(
        platform: *mut BNPlatform,
        addr: *mut u64,
    ) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNGetPlatformTypes(
        platform: *mut BNPlatform,
        count: *mut size_t,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNGetPlatformVariables(
        platform: *mut BNPlatform,
        count: *mut size_t,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNGetPlatformFunctions(
        platform: *mut BNPlatform,
        count: *mut size_t,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNGetPlatformSystemCalls(
        platform: *mut BNPlatform,
        count: *mut size_t,
    ) -> *mut BNSystemCallInfo;
}
extern "C" {
    pub fn BNFreeSystemCallList(syscalls: *mut BNSystemCallInfo, count: size_t);
}
extern "C" {
    pub fn BNGetPlatformTypeByName(
        platform: *mut BNPlatform,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetPlatformVariableByName(
        platform: *mut BNPlatform,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetPlatformFunctionByName(
        platform: *mut BNPlatform,
        name: *mut BNQualifiedName,
        exactMatch: bool,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetPlatformSystemCallName(
        platform: *mut BNPlatform,
        number: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetPlatformSystemCallType(platform: *mut BNPlatform, number: u32) -> *mut BNType;
}
extern "C" {
    pub fn BNGetPlatformTypeLibraries(
        platform: *mut BNPlatform,
        count: *mut size_t,
    ) -> *mut *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNGetPlatformTypeLibrariesByName(
        platform: *mut BNPlatform,
        depName: *mut ::std::os::raw::c_char,
        count: *mut size_t,
    ) -> *mut *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNDemangleMS(
        arch: *mut BNArchitecture,
        mangledName: *const ::std::os::raw::c_char,
        outType: *mut *mut BNType,
        outVarName: *mut *mut *mut ::std::os::raw::c_char,
        outVarNameElements: *mut size_t,
        simplify: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNDemangleMSWithOptions(
        arch: *mut BNArchitecture,
        mangledName: *const ::std::os::raw::c_char,
        outType: *mut *mut BNType,
        outVarName: *mut *mut *mut ::std::os::raw::c_char,
        outVarNameElements: *mut size_t,
        view: *const BNBinaryView,
    ) -> bool;
}
extern "C" {
    pub fn BNRegisterDownloadProvider(
        name: *const ::std::os::raw::c_char,
        callbacks: *mut BNDownloadProviderCallbacks,
    ) -> *mut BNDownloadProvider;
}
extern "C" {
    pub fn BNGetDownloadProviderList(count: *mut size_t) -> *mut *mut BNDownloadProvider;
}
extern "C" {
    pub fn BNFreeDownloadProviderList(providers: *mut *mut BNDownloadProvider);
}
extern "C" {
    pub fn BNGetDownloadProviderByName(
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNDownloadProvider;
}
extern "C" {
    pub fn BNGetDownloadProviderName(
        provider: *mut BNDownloadProvider,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCreateDownloadProviderInstance(
        provider: *mut BNDownloadProvider,
    ) -> *mut BNDownloadInstance;
}
extern "C" {
    pub fn BNInitDownloadInstance(
        provider: *mut BNDownloadProvider,
        callbacks: *mut BNDownloadInstanceCallbacks,
    ) -> *mut BNDownloadInstance;
}
extern "C" {
    pub fn BNNewDownloadInstanceReference(
        instance: *mut BNDownloadInstance,
    ) -> *mut BNDownloadInstance;
}
extern "C" {
    pub fn BNFreeDownloadInstance(instance: *mut BNDownloadInstance);
}
extern "C" {
    pub fn BNFreeDownloadInstanceResponse(response: *mut BNDownloadInstanceResponse);
}
extern "C" {
    pub fn BNPerformDownloadRequest(
        instance: *mut BNDownloadInstance,
        url: *const ::std::os::raw::c_char,
        callbacks: *mut BNDownloadInstanceOutputCallbacks,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNPerformCustomRequest(
        instance: *mut BNDownloadInstance,
        method: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
        headerCount: u64,
        headerKeys: *const *const ::std::os::raw::c_char,
        headerValues: *const *const ::std::os::raw::c_char,
        response: *mut *mut BNDownloadInstanceResponse,
        callbacks: *mut BNDownloadInstanceInputOutputCallbacks,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNReadDataForDownloadInstance(
        instance: *mut BNDownloadInstance,
        data: *mut u8,
        len: u64,
    ) -> u64;
}
extern "C" {
    pub fn BNWriteDataForDownloadInstance(
        instance: *mut BNDownloadInstance,
        data: *mut u8,
        len: u64,
    ) -> u64;
}
extern "C" {
    pub fn BNNotifyProgressForDownloadInstance(
        instance: *mut BNDownloadInstance,
        progress: u64,
        total: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetErrorForDownloadInstance(
        instance: *mut BNDownloadInstance,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetErrorForDownloadInstance(
        instance: *mut BNDownloadInstance,
        error: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNRegisterScriptingProvider(
        name: *const ::std::os::raw::c_char,
        callbacks: *mut BNScriptingProviderCallbacks,
    ) -> *mut BNScriptingProvider;
}
extern "C" {
    pub fn BNGetScriptingProviderList(count: *mut size_t) -> *mut *mut BNScriptingProvider;
}
extern "C" {
    pub fn BNFreeScriptingProviderList(providers: *mut *mut BNScriptingProvider);
}
extern "C" {
    pub fn BNGetScriptingProviderByName(
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNScriptingProvider;
}
extern "C" {
    pub fn BNGetScriptingProviderName(
        provider: *mut BNScriptingProvider,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCreateScriptingProviderInstance(
        provider: *mut BNScriptingProvider,
    ) -> *mut BNScriptingInstance;
}
extern "C" {
    pub fn BNInitScriptingInstance(
        provider: *mut BNScriptingProvider,
        callbacks: *mut BNScriptingInstanceCallbacks,
    ) -> *mut BNScriptingInstance;
}
extern "C" {
    pub fn BNNewScriptingInstanceReference(
        instance: *mut BNScriptingInstance,
    ) -> *mut BNScriptingInstance;
}
extern "C" {
    pub fn BNFreeScriptingInstance(instance: *mut BNScriptingInstance);
}
extern "C" {
    pub fn BNNotifyOutputForScriptingInstance(
        instance: *mut BNScriptingInstance,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNNotifyErrorForScriptingInstance(
        instance: *mut BNScriptingInstance,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNNotifyInputReadyStateForScriptingInstance(
        instance: *mut BNScriptingInstance,
        state: BNScriptingProviderInputReadyState,
    );
}
extern "C" {
    pub fn BNRegisterScriptingInstanceOutputListener(
        instance: *mut BNScriptingInstance,
        callbacks: *mut BNScriptingOutputListener,
    );
}
extern "C" {
    pub fn BNUnregisterScriptingInstanceOutputListener(
        instance: *mut BNScriptingInstance,
        callbacks: *mut BNScriptingOutputListener,
    );
}
extern "C" {
    pub fn BNGetScriptingInstanceDelimiters(
        instance: *mut BNScriptingInstance,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetScriptingInstanceDelimiters(
        instance: *mut BNScriptingInstance,
        delimiters: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetScriptingInstanceInputReadyState(
        instance: *mut BNScriptingInstance,
    ) -> BNScriptingProviderInputReadyState;
}
extern "C" {
    pub fn BNExecuteScriptInput(
        instance: *mut BNScriptingInstance,
        input: *const ::std::os::raw::c_char,
    ) -> BNScriptingProviderExecuteResult;
}
extern "C" {
    pub fn BNCancelScriptInput(instance: *mut BNScriptingInstance);
}
extern "C" {
    pub fn BNSetScriptingInstanceCurrentBinaryView(
        instance: *mut BNScriptingInstance,
        view: *mut BNBinaryView,
    );
}
extern "C" {
    pub fn BNSetScriptingInstanceCurrentFunction(
        instance: *mut BNScriptingInstance,
        func: *mut BNFunction,
    );
}
extern "C" {
    pub fn BNSetScriptingInstanceCurrentBasicBlock(
        instance: *mut BNScriptingInstance,
        block: *mut BNBasicBlock,
    );
}
extern "C" {
    pub fn BNSetScriptingInstanceCurrentAddress(instance: *mut BNScriptingInstance, addr: u64);
}
extern "C" {
    pub fn BNSetScriptingInstanceCurrentSelection(
        instance: *mut BNScriptingInstance,
        begin: u64,
        end: u64,
    );
}
extern "C" {
    pub fn BNScriptingInstanceCompleteInput(
        instance: *mut BNScriptingInstance,
        text: *const ::std::os::raw::c_char,
        state: u64,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRegisterMainThread(callbacks: *mut BNMainThreadCallbacks);
}
extern "C" {
    pub fn BNNewMainThreadActionReference(
        action: *mut BNMainThreadAction,
    ) -> *mut BNMainThreadAction;
}
extern "C" {
    pub fn BNFreeMainThreadAction(action: *mut BNMainThreadAction);
}
extern "C" {
    pub fn BNExecuteMainThreadAction(action: *mut BNMainThreadAction);
}
extern "C" {
    pub fn BNIsMainThreadActionDone(action: *mut BNMainThreadAction) -> bool;
}
extern "C" {
    pub fn BNWaitForMainThreadAction(action: *mut BNMainThreadAction);
}
extern "C" {
    pub fn BNExecuteOnMainThread(
        ctxt: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    ) -> *mut BNMainThreadAction;
}
extern "C" {
    pub fn BNExecuteOnMainThreadAndWait(
        ctxt: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn BNIsMainThread() -> bool;
}
extern "C" {
    pub fn BNWorkerEnqueue(
        ctxt: *mut ::std::os::raw::c_void,
        action: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn BNWorkerPriorityEnqueue(
        ctxt: *mut ::std::os::raw::c_void,
        action: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn BNWorkerInteractiveEnqueue(
        ctxt: *mut ::std::os::raw::c_void,
        action: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn BNGetWorkerThreadCount() -> size_t;
}
extern "C" {
    pub fn BNSetWorkerThreadCount(count: size_t);
}
extern "C" {
    pub fn BNBeginBackgroundTask(
        initialText: *const ::std::os::raw::c_char,
        canCancel: bool,
    ) -> *mut BNBackgroundTask;
}
extern "C" {
    pub fn BNFinishBackgroundTask(task: *mut BNBackgroundTask);
}
extern "C" {
    pub fn BNSetBackgroundTaskProgressText(
        task: *mut BNBackgroundTask,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNIsBackgroundTaskCancelled(task: *mut BNBackgroundTask) -> bool;
}
extern "C" {
    pub fn BNGetRunningBackgroundTasks(count: *mut size_t) -> *mut *mut BNBackgroundTask;
}
extern "C" {
    pub fn BNNewBackgroundTaskReference(task: *mut BNBackgroundTask) -> *mut BNBackgroundTask;
}
extern "C" {
    pub fn BNFreeBackgroundTask(task: *mut BNBackgroundTask);
}
extern "C" {
    pub fn BNFreeBackgroundTaskList(tasks: *mut *mut BNBackgroundTask, count: size_t);
}
extern "C" {
    pub fn BNGetBackgroundTaskProgressText(
        task: *mut BNBackgroundTask,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCanCancelBackgroundTask(task: *mut BNBackgroundTask) -> bool;
}
extern "C" {
    pub fn BNCancelBackgroundTask(task: *mut BNBackgroundTask);
}
extern "C" {
    pub fn BNIsBackgroundTaskFinished(task: *mut BNBackgroundTask) -> bool;
}
extern "C" {
    pub fn BNRegisterInteractionHandler(callbacks: *mut BNInteractionHandlerCallbacks);
}
extern "C" {
    pub fn BNMarkdownToHTML(contents: *const ::std::os::raw::c_char)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNShowPlainTextReport(
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNShowMarkdownReport(
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
        plaintext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNShowHTMLReport(
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
        plaintext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNShowGraphReport(
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        graph: *mut BNFlowGraph,
    );
}
extern "C" {
    pub fn BNShowReportCollection(
        title: *const ::std::os::raw::c_char,
        reports: *mut BNReportCollection,
    );
}
extern "C" {
    pub fn BNGetTextLineInput(
        result: *mut *mut ::std::os::raw::c_char,
        prompt: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetIntegerInput(
        result: *mut i64,
        prompt: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetAddressInput(
        result: *mut u64,
        prompt: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        currentAddr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetChoiceInput(
        result: *mut size_t,
        prompt: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        choices: *mut *const ::std::os::raw::c_char,
        count: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetOpenFileNameInput(
        result: *mut *mut ::std::os::raw::c_char,
        prompt: *const ::std::os::raw::c_char,
        ext: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetSaveFileNameInput(
        result: *mut *mut ::std::os::raw::c_char,
        prompt: *const ::std::os::raw::c_char,
        ext: *const ::std::os::raw::c_char,
        defaultName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetDirectoryNameInput(
        result: *mut *mut ::std::os::raw::c_char,
        prompt: *const ::std::os::raw::c_char,
        defaultName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetFormInput(
        fields: *mut BNFormInputField,
        count: size_t,
        title: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeFormInputResults(fields: *mut BNFormInputField, count: size_t);
}
extern "C" {
    pub fn BNShowMessageBox(
        title: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        buttons: BNMessageBoxButtonSet,
        icon: BNMessageBoxIcon,
    ) -> BNMessageBoxButtonResult;
}
extern "C" {
    pub fn BNCreateReportCollection() -> *mut BNReportCollection;
}
extern "C" {
    pub fn BNNewReportCollectionReference(
        reports: *mut BNReportCollection,
    ) -> *mut BNReportCollection;
}
extern "C" {
    pub fn BNFreeReportCollection(reports: *mut BNReportCollection);
}
extern "C" {
    pub fn BNGetReportCollectionCount(reports: *mut BNReportCollection) -> size_t;
}
extern "C" {
    pub fn BNGetReportType(reports: *mut BNReportCollection, i: size_t) -> BNReportType;
}
extern "C" {
    pub fn BNGetReportView(reports: *mut BNReportCollection, i: size_t) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNGetReportTitle(
        reports: *mut BNReportCollection,
        i: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetReportContents(
        reports: *mut BNReportCollection,
        i: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetReportPlainText(
        reports: *mut BNReportCollection,
        i: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetReportFlowGraph(reports: *mut BNReportCollection, i: size_t) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNAddPlainTextReportToCollection(
        reports: *mut BNReportCollection,
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddMarkdownReportToCollection(
        reports: *mut BNReportCollection,
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
        plaintext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddHTMLReportToCollection(
        reports: *mut BNReportCollection,
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
        plaintext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddGraphReportToCollection(
        reports: *mut BNReportCollection,
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        graph: *mut BNFlowGraph,
    );
}
extern "C" {
    pub fn BNIsGNU3MangledString(mangledName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn BNDemangleGNU3(
        arch: *mut BNArchitecture,
        mangledName: *const ::std::os::raw::c_char,
        outType: *mut *mut BNType,
        outVarName: *mut *mut *mut ::std::os::raw::c_char,
        outVarNameElements: *mut size_t,
        simplify: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNDemangleGNU3WithOptions(
        arch: *mut BNArchitecture,
        mangledName: *const ::std::os::raw::c_char,
        outType: *mut *mut BNType,
        outVarName: *mut *mut *mut ::std::os::raw::c_char,
        outVarNameElements: *mut size_t,
        view: *const BNBinaryView,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeDemangledName(name: *mut *mut *mut ::std::os::raw::c_char, nameElements: size_t);
}
extern "C" {
    pub fn BNPluginGetApis(
        p: *mut BNRepoPlugin,
        count: *mut size_t,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetAuthor(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetDescription(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetLicense(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetLicenseText(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetLongdescription(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetMinimumVersion(p: *mut BNRepoPlugin) -> u64;
}
extern "C" {
    pub fn BNPluginGetName(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetProjectUrl(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetPackageUrl(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetAuthorUrl(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetVersion(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetCommit(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreePluginTypes(r: *mut BNPluginType);
}
extern "C" {
    pub fn BNNewPluginReference(r: *mut BNRepoPlugin) -> *mut BNRepoPlugin;
}
extern "C" {
    pub fn BNFreePlugin(plugin: *mut BNRepoPlugin);
}
extern "C" {
    pub fn BNPluginGetPath(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginIsInstalled(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsEnabled(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginGetPluginStatus(p: *mut BNRepoPlugin) -> BNPluginStatus;
}
extern "C" {
    pub fn BNPluginGetPluginTypes(p: *mut BNRepoPlugin, count: *mut size_t) -> *mut BNPluginType;
}
extern "C" {
    pub fn BNPluginEnable(p: *mut BNRepoPlugin, force: bool) -> bool;
}
extern "C" {
    pub fn BNPluginDisable(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginInstall(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginUninstall(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginUpdate(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginGetInstallInstructions(
        p: *mut BNRepoPlugin,
        platform: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetPlatforms(
        p: *mut BNRepoPlugin,
        count: *mut size_t,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreePluginPlatforms(platforms: *mut *mut ::std::os::raw::c_char, count: size_t);
}
extern "C" {
    pub fn BNPluginGetRepository(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginIsBeingDeleted(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsBeingUpdated(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsRunning(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsUpdatePending(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsDisablePending(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsDeletePending(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsUpdateAvailable(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginGetProjectData(p: *mut BNRepoPlugin) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetLastUpdate(p: *mut BNRepoPlugin) -> u64;
}
extern "C" {
    pub fn BNNewRepositoryReference(r: *mut BNRepository) -> *mut BNRepository;
}
extern "C" {
    pub fn BNFreeRepository(r: *mut BNRepository);
}
extern "C" {
    pub fn BNRepositoryGetUrl(r: *mut BNRepository) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRepositoryGetRepoPath(r: *mut BNRepository) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRepositoryGetPlugins(
        r: *mut BNRepository,
        count: *mut size_t,
    ) -> *mut *mut BNRepoPlugin;
}
extern "C" {
    pub fn BNFreeRepositoryPluginList(r: *mut *mut BNRepoPlugin);
}
extern "C" {
    pub fn BNRepositoryFreePluginDirectoryList(
        list: *mut *mut ::std::os::raw::c_char,
        count: size_t,
    );
}
extern "C" {
    pub fn BNRepositoryGetPluginByPath(
        r: *mut BNRepository,
        pluginPath: *const ::std::os::raw::c_char,
    ) -> *mut BNRepoPlugin;
}
extern "C" {
    pub fn BNRepositoryGetPluginsPath(r: *mut BNRepository) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCreateRepositoryManager(
        enabledPluginsPath: *const ::std::os::raw::c_char,
    ) -> *mut BNRepositoryManager;
}
extern "C" {
    pub fn BNNewRepositoryManagerReference(r: *mut BNRepositoryManager)
        -> *mut BNRepositoryManager;
}
extern "C" {
    pub fn BNFreeRepositoryManager(r: *mut BNRepositoryManager);
}
extern "C" {
    pub fn BNRepositoryManagerCheckForUpdates(r: *mut BNRepositoryManager) -> bool;
}
extern "C" {
    pub fn BNRepositoryManagerGetRepositories(
        r: *mut BNRepositoryManager,
        count: *mut size_t,
    ) -> *mut *mut BNRepository;
}
extern "C" {
    pub fn BNFreeRepositoryManagerRepositoriesList(r: *mut *mut BNRepository);
}
extern "C" {
    pub fn BNRepositoryManagerAddRepository(
        r: *mut BNRepositoryManager,
        url: *const ::std::os::raw::c_char,
        repoPath: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNRepositoryGetRepositoryByPath(
        r: *mut BNRepositoryManager,
        repoPath: *const ::std::os::raw::c_char,
    ) -> *mut BNRepository;
}
extern "C" {
    pub fn BNGetRepositoryManager() -> *mut BNRepositoryManager;
}
extern "C" {
    pub fn BNRepositoryManagerGetDefaultRepository(
        r: *mut BNRepositoryManager,
    ) -> *mut BNRepository;
}
extern "C" {
    pub fn BNRegisterForPluginLoading(
        pluginApiName: *const ::std::os::raw::c_char,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                repoPath: *const ::std::os::raw::c_char,
                pluginPath: *const ::std::os::raw::c_char,
                force: bool,
                ctx: *mut ::std::os::raw::c_void,
            ) -> bool,
        >,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNLoadPluginForApi(
        pluginApiName: *const ::std::os::raw::c_char,
        repoPath: *const ::std::os::raw::c_char,
        pluginPath: *const ::std::os::raw::c_char,
        force: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNGetRegisteredPluginLoaders(count: *mut size_t) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreeRegisteredPluginLoadersList(
        pluginLoaders: *mut *mut ::std::os::raw::c_char,
        count: size_t,
    );
}
extern "C" {
    pub fn BNLlvmServicesInit();
}
extern "C" {
    pub fn BNLlvmServicesAssemble(
        src: *const ::std::os::raw::c_char,
        dialect: ::std::os::raw::c_int,
        triplet: *const ::std::os::raw::c_char,
        codeModel: ::std::os::raw::c_int,
        relocMode: ::std::os::raw::c_int,
        outBytes: *mut *mut ::std::os::raw::c_char,
        outBytesLen: *mut ::std::os::raw::c_int,
        err: *mut *mut ::std::os::raw::c_char,
        errLen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNLlvmServicesAssembleFree(
        outBytes: *mut ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNDeleteFile(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNDeleteDirectory(
        path: *const ::std::os::raw::c_char,
        contentsOnly: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNCreateDirectory(
        path: *const ::std::os::raw::c_char,
        createSubdirectories: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNPathExists(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn BNIsPathDirectory(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn BNIsPathRegularFile(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn BNFileSize(path: *const ::std::os::raw::c_char, size: *mut u64) -> bool;
}
extern "C" {
    pub fn BNRenameFile(
        source: *const ::std::os::raw::c_char,
        dest: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNCreateSettings(schemaId: *const ::std::os::raw::c_char) -> *mut BNSettings;
}
extern "C" {
    pub fn BNNewSettingsReference(settings: *mut BNSettings) -> *mut BNSettings;
}
extern "C" {
    pub fn BNFreeSettings(settings: *mut BNSettings);
}
extern "C" {
    pub fn BNSettingsSetResourceId(
        settings: *mut BNSettings,
        resourceId: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNSettingsRegisterGroup(
        settings: *mut BNSettings,
        group: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsRegisterSetting(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        properties: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsContains(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsIsEmpty(settings: *mut BNSettings) -> bool;
}
extern "C" {
    pub fn BNSettingsKeysList(
        settings: *mut BNSettings,
        inoutSize: *mut size_t,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsQueryPropertyStringList(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        inoutSize: *mut size_t,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsUpdateProperty(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateBoolProperty(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateDoubleProperty(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: f64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateInt64Property(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: i64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateUInt64Property(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateStringProperty(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateStringListProperty(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: *mut *const ::std::os::raw::c_char,
        size: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsDeserializeSchema(
        settings: *mut BNSettings,
        schema: *const ::std::os::raw::c_char,
        scope: BNSettingsScope,
        merge: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSerializeSchema(settings: *mut BNSettings) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNDeserializeSettings(
        settings: *mut BNSettings,
        contents: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
    ) -> bool;
}
extern "C" {
    pub fn BNSerializeSettings(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsReset(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsResetAll(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        schemaOnly: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsGetBool(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsGetDouble(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> f64;
}
extern "C" {
    pub fn BNSettingsGetInt64(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> i64;
}
extern "C" {
    pub fn BNSettingsGetUInt64(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> u64;
}
extern "C" {
    pub fn BNSettingsGetString(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsGetStringList(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
        inoutSize: *mut size_t,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsGetJson(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsSetBool(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetDouble(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: f64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetInt64(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: i64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetUInt64(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetString(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetStringList(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: *mut *const ::std::os::raw::c_char,
        size: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetJson(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNNewMetadataReference(data: *mut BNMetadata) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataBooleanData(data: bool) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataStringData(data: *const ::std::os::raw::c_char) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataUnsignedIntegerData(data: u64) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataSignedIntegerData(data: i64) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataDoubleData(data: f64) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataOfType(type_: BNMetadataType) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataRawData(data: *const u8, size: size_t) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataArray(data: *mut *mut BNMetadata, size: size_t) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataValueStore(
        keys: *mut *const ::std::os::raw::c_char,
        values: *mut *mut BNMetadata,
        size: size_t,
    ) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNMetadataIsEqual(lhs: *mut BNMetadata, rhs: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataSetValueForKey(
        data: *mut BNMetadata,
        key: *const ::std::os::raw::c_char,
        md: *mut BNMetadata,
    ) -> bool;
}
extern "C" {
    pub fn BNMetadataGetForKey(
        data: *mut BNMetadata,
        key: *const ::std::os::raw::c_char,
    ) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNMetadataArrayAppend(data: *mut BNMetadata, md: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataRemoveKey(data: *mut BNMetadata, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNMetadataSize(data: *mut BNMetadata) -> size_t;
}
extern "C" {
    pub fn BNMetadataGetForIndex(data: *mut BNMetadata, index: size_t) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNMetadataRemoveIndex(data: *mut BNMetadata, index: size_t);
}
extern "C" {
    pub fn BNFreeMetadataArray(data: *mut *mut BNMetadata);
}
extern "C" {
    pub fn BNFreeMetadataValueStore(data: *mut BNMetadataValueStore);
}
extern "C" {
    pub fn BNFreeMetadata(data: *mut BNMetadata);
}
extern "C" {
    pub fn BNFreeMetadataRaw(data: *mut u8);
}
extern "C" {
    pub fn BNMetadataGetBoolean(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataGetString(data: *mut BNMetadata) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNMetadataGetUnsignedInteger(data: *mut BNMetadata) -> u64;
}
extern "C" {
    pub fn BNMetadataGetSignedInteger(data: *mut BNMetadata) -> i64;
}
extern "C" {
    pub fn BNMetadataGetDouble(data: *mut BNMetadata) -> f64;
}
extern "C" {
    pub fn BNMetadataGetRaw(data: *mut BNMetadata, size: *mut size_t) -> *mut u8;
}
extern "C" {
    pub fn BNMetadataGetArray(data: *mut BNMetadata, size: *mut size_t) -> *mut *mut BNMetadata;
}
extern "C" {
    pub fn BNMetadataGetValueStore(data: *mut BNMetadata) -> *mut BNMetadataValueStore;
}
extern "C" {
    pub fn BNMetadataGetType(data: *mut BNMetadata) -> BNMetadataType;
}
extern "C" {
    pub fn BNMetadataIsBoolean(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsString(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsUnsignedInteger(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsSignedInteger(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsDouble(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsRaw(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsArray(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsKeyValueStore(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNBinaryViewStoreMetadata(
        view: *mut BNBinaryView,
        key: *const ::std::os::raw::c_char,
        value: *mut BNMetadata,
    );
}
extern "C" {
    pub fn BNBinaryViewQueryMetadata(
        view: *mut BNBinaryView,
        key: *const ::std::os::raw::c_char,
    ) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNBinaryViewRemoveMetadata(view: *mut BNBinaryView, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNBinaryViewGetLoadSettingsTypeNames(
        view: *mut BNBinaryView,
        count: *mut size_t,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNBinaryViewGetLoadSettings(
        view: *mut BNBinaryView,
        typeName: *const ::std::os::raw::c_char,
    ) -> *mut BNSettings;
}
extern "C" {
    pub fn BNBinaryViewSetLoadSettings(
        view: *mut BNBinaryView,
        typeName: *const ::std::os::raw::c_char,
        settings: *mut BNSettings,
    );
}
extern "C" {
    pub fn BNNewRelocationReference(reloc: *mut BNRelocation) -> *mut BNRelocation;
}
extern "C" {
    pub fn BNFreeRelocation(reloc: *mut BNRelocation);
}
extern "C" {
    pub fn BNRelocationGetInfo(reloc: *mut BNRelocation) -> BNRelocationInfo;
}
extern "C" {
    pub fn BNRelocationGetArchitecture(reloc: *mut BNRelocation) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNRelocationGetTarget(reloc: *mut BNRelocation) -> u64;
}
extern "C" {
    pub fn BNRelocationGetReloc(reloc: *mut BNRelocation) -> u64;
}
extern "C" {
    pub fn BNRelocationGetSymbol(reloc: *mut BNRelocation) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNCreateSegment(
        start: u64,
        length: u64,
        dataOffset: u64,
        dataLength: u64,
        flags: u32,
        autoDefined: bool,
    ) -> *mut BNSegment;
}
extern "C" {
    pub fn BNNewSegmentReference(seg: *mut BNSegment) -> *mut BNSegment;
}
extern "C" {
    pub fn BNFreeSegment(seg: *mut BNSegment);
}
extern "C" {
    pub fn BNSegmentGetRelocationRanges(
        segment: *mut BNSegment,
        count: *mut size_t,
    ) -> *mut BNRange;
}
extern "C" {
    pub fn BNSegmentGetRelocationsCount(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetRelocationRangesAtAddress(
        segment: *mut BNSegment,
        addr: u64,
        count: *mut size_t,
    ) -> *mut BNRange;
}
extern "C" {
    pub fn BNFreeRelocationRanges(ranges: *mut BNRange);
}
extern "C" {
    pub fn BNSegmentGetStart(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetLength(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetEnd(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetDataEnd(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetDataOffset(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetDataLength(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetFlags(segment: *mut BNSegment) -> u32;
}
extern "C" {
    pub fn BNSegmentIsAutoDefined(segment: *mut BNSegment) -> bool;
}
extern "C" {
    pub fn BNSegmentSetLength(segment: *mut BNSegment, length: u64);
}
extern "C" {
    pub fn BNSegmentSetDataOffset(segment: *mut BNSegment, dataOffset: u64);
}
extern "C" {
    pub fn BNSegmentSetDataLength(segment: *mut BNSegment, dataLength: u64);
}
extern "C" {
    pub fn BNSegmentSetFlags(segment: *mut BNSegment, flags: u32);
}
extern "C" {
    pub fn BNNewSectionReference(section: *mut BNSection) -> *mut BNSection;
}
extern "C" {
    pub fn BNFreeSection(section: *mut BNSection);
}
extern "C" {
    pub fn BNSectionGetName(section: *mut BNSection) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSectionGetType(section: *mut BNSection) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSectionGetStart(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetLength(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetEnd(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetLinkedSection(section: *mut BNSection) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSectionGetInfoSection(section: *mut BNSection) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSectionGetInfoData(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetAlign(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetEntrySize(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetSemantics(section: *mut BNSection) -> BNSectionSemantics;
}
extern "C" {
    pub fn BNSectionIsAutoDefined(section: *mut BNSection) -> bool;
}
extern "C" {
    pub fn BNCreateDataRenderer(renderer: *mut BNCustomDataRenderer) -> *mut BNDataRenderer;
}
extern "C" {
    pub fn BNNewDataRendererReference(renderer: *mut BNDataRenderer) -> *mut BNDataRenderer;
}
extern "C" {
    pub fn BNIsValidForData(
        ctxt: *mut ::std::os::raw::c_void,
        view: *mut BNBinaryView,
        addr: u64,
        type_: *mut BNType,
        typeCtx: *mut BNTypeContext,
        ctxCount: size_t,
    ) -> bool;
}
extern "C" {
    pub fn BNGetLinesForData(
        ctxt: *mut ::std::os::raw::c_void,
        view: *mut BNBinaryView,
        addr: u64,
        type_: *mut BNType,
        prefix: *const BNInstructionTextToken,
        prefixCount: size_t,
        width: size_t,
        count: *mut size_t,
        typeCtx: *mut BNTypeContext,
        ctxCount: size_t,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNFreeDataRenderer(renderer: *mut BNDataRenderer);
}
extern "C" {
    pub fn BNGetDataRendererContainer() -> *mut BNDataRendererContainer;
}
extern "C" {
    pub fn BNRegisterGenericDataRenderer(
        container: *mut BNDataRendererContainer,
        renderer: *mut BNDataRenderer,
    );
}
extern "C" {
    pub fn BNRegisterTypeSpecificDataRenderer(
        container: *mut BNDataRendererContainer,
        renderer: *mut BNDataRenderer,
    );
}
extern "C" {
    pub fn BNParseExpression(
        view: *mut BNBinaryView,
        expression: *const ::std::os::raw::c_char,
        offset: *mut u64,
        here: u64,
        errorString: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeParseError(errorString: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNRegisterObjectRefDebugTrace(
        typeName: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BNUnregisterObjectRefDebugTrace(
        typeName: *const ::std::os::raw::c_char,
        trace: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNGetMemoryUsageInfo(count: *mut size_t) -> *mut BNMemoryUsageInfo;
}
extern "C" {
    pub fn BNFreeMemoryUsageInfo(info: *mut BNMemoryUsageInfo, count: size_t);
}
extern "C" {
    pub fn BNGetAddressRenderedWidth(addr: u64) -> u32;
}
extern "C" {
    pub fn BNRustFreeString(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNRustFreeStringArray(arg1: *mut *const ::std::os::raw::c_char, arg2: u64);
}
extern "C" {
    pub fn BNRustSimplifyStrToFQN(
        arg1: *const ::std::os::raw::c_char,
        arg2: bool,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRustSimplifyStrToStr(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
