#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(improper_ctypes)]
/* automatically generated by rust-bindgen 0.68.1 */

pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 13;
pub const __GLIBCXX__: u32 = 20230711;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _PSTL_VERSION: u32 = 12000;
pub const _PSTL_VERSION_MAJOR: u32 = 12;
pub const _PSTL_VERSION_MINOR: u32 = 0;
pub const _PSTL_VERSION_PATCH: u32 = 0;
pub const _PSTL_USAGE_WARNINGS: u32 = 0;
pub const _PSTL_UDR_PRESENT: u32 = 0;
pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _GLIBCXX_CSTDDEF: u32 = 1;
pub const __cpp_lib_byte: u32 = 201603;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const BN_CURRENT_CORE_ABI_VERSION: u32 = 39;
pub const BN_MINIMUM_CORE_ABI_VERSION: u32 = 39;
pub const PATH_SEP: &[u8; 2] = b"/\0";
pub const BN_MAX_INSTRUCTION_LENGTH: u32 = 256;
pub const BN_DEFAULT_INSTRUCTION_LENGTH: u32 = 16;
pub const BN_DEFAULT_OPCODE_DISPLAY: u32 = 8;
pub const BN_MAX_INSTRUCTION_BRANCHES: u32 = 3;
pub const BN_MAX_STORED_DATA_LENGTH: u32 = 1073741823;
pub const BN_NULL_ID: i32 = -1;
pub const BN_INVALID_REGISTER: u32 = 4294967295;
pub const BN_AUTOCOERCE_EXTERN_PTR: u32 = 4294967293;
pub const BN_NOCOERCE_EXTERN_PTR: u32 = 4294967294;
pub const BN_INVALID_OPERAND: u32 = 4294967295;
pub const BN_MAX_STRING_LENGTH: u32 = 128;
pub const LLVM_SVCS_CB_NOTE: u32 = 0;
pub const LLVM_SVCS_CB_WARNING: u32 = 1;
pub const LLVM_SVCS_CB_ERROR: u32 = 2;
pub const LLVM_SVCS_DIALECT_UNSPEC: u32 = 0;
pub const LLVM_SVCS_DIALECT_ATT: u32 = 1;
pub const LLVM_SVCS_DIALECT_INTEL: u32 = 2;
pub const LLVM_SVCS_CM_DEFAULT: u32 = 0;
pub const LLVM_SVCS_CM_SMALL: u32 = 1;
pub const LLVM_SVCS_CM_KERNEL: u32 = 2;
pub const LLVM_SVCS_CM_MEDIUM: u32 = 3;
pub const LLVM_SVCS_CM_LARGE: u32 = 4;
pub const LLVM_SVCS_RM_STATIC: u32 = 0;
pub const LLVM_SVCS_RM_PIC: u32 = 1;
pub const LLVM_SVCS_RM_DYNAMIC_NO_PIC: u32 = 2;
pub const BN_MAX_VARIABLE_OFFSET: u64 = 549755813887;
pub const BN_MAX_VARIABLE_INDEX: u32 = 1048575;
pub const BN_FULL_CONFIDENCE: u32 = 255;
pub const BN_MINIMUM_CONFIDENCE: u32 = 1;
pub const BN_DEFAULT_CONFIDENCE: u32 = 96;
pub const BN_HEURISTIC_CONFIDENCE: u32 = 192;
pub const BN_DEBUGINFO_CONFIDENCE: u32 = 200;
pub const DEFAULT_INTERNAL_NAMESPACE: &[u8; 20] = b"BNINTERNALNAMESPACE\0";
pub const DEFAULT_EXTERNAL_NAMESPACE: &[u8; 20] = b"BNEXTERNALNAMESPACE\0";
pub const MAX_RELOCATION_SIZE: u32 = 8;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type std_byte = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___byte_operand {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_char16_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_char32_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_unsigned_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___byte_operand_open0_unsigned___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___byte_operand>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___byte_operand)
        )
    );
}
pub type std___byte_op_t = std___byte_operand;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub const BNPluginLoadOrder_EarlyPluginLoadOrder: BNPluginLoadOrder = 0;
pub const BNPluginLoadOrder_NormalPluginLoadOrder: BNPluginLoadOrder = 1;
pub const BNPluginLoadOrder_LatePluginLoadOrder: BNPluginLoadOrder = 2;
pub type BNPluginLoadOrder = ::std::os::raw::c_uint;
pub const PluginLoadStatus_NotAttemptedStatus: PluginLoadStatus = 0;
pub const PluginLoadStatus_LoadSucceededStatus: PluginLoadStatus = 1;
pub const PluginLoadStatus_LoadFailedStatus: PluginLoadStatus = 2;
pub type PluginLoadStatus = ::std::os::raw::c_uint;
pub type BNCorePluginInitFunction = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type BNCorePluginDependencyFunction = ::std::option::Option<unsafe extern "C" fn()>;
pub type BNCorePluginABIVersionFunction = ::std::option::Option<unsafe extern "C" fn() -> u32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDataBuffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryView {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryViewType {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryReader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryWriter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNKeyValueStore {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSnapshot {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDatabase {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFileMetadata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTransform {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNArchitecture {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFunction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBasicBlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadProvider {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadInstance {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNWebsocketProvider {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNWebsocketClient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeParser {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypePrinter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFlowGraph {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFlowGraphNode {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFlowGraphLayoutRequest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSymbol {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTemporaryFile {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLowLevelILFunction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMediumLevelILFunction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNHighLevelILFunction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLanguageRepresentationFunction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNType {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeBuilder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeLibrary {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeLibraryMapping {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNStructure {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNStructureBuilder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTagType {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTag {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUser {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNamedTypeReference {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNamedTypeReferenceBuilder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNEnumeration {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNEnumerationBuilder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCallingConvention {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNPlatform {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNActivity {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAnalysisContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNWorkflow {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAnalysisCompletionEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDisassemblySettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSaveSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNScriptingProvider {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNScriptingInstance {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMainThreadAction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBackgroundTask {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRepository {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRepoPlugin {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRepositoryManager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNComponent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMetadata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNReportCollection {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRelocation {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSegment {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSection {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRelocationHandler {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDataRenderer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDataRendererContainer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDisassemblyTextRenderer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLinearViewObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLinearViewCursor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDebugInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDebugInfoParser {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSecretsProvider {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLogger {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSymbolQueue {
    _unused: [u8; 0],
}
pub const BNLogLevel_DebugLog: BNLogLevel = 0;
#[doc = "! Debug logging level, most verbose logging level"]
pub const BNLogLevel_InfoLog: BNLogLevel = 1;
#[doc = "! Information logging level, default logging level"]
pub const BNLogLevel_WarningLog: BNLogLevel = 2;
#[doc = "! Warning logging level, messages show with warning icon in the UI"]
pub const BNLogLevel_ErrorLog: BNLogLevel = 3;
#[doc = "! Error logging level, messages show with error icon in the UI"]
pub const BNLogLevel_AlertLog: BNLogLevel = 4;
#[doc = "! Console log levels"]
pub type BNLogLevel = ::std::os::raw::c_uint;
pub const BNEndianness_LittleEndian: BNEndianness = 0;
pub const BNEndianness_BigEndian: BNEndianness = 1;
pub type BNEndianness = ::std::os::raw::c_uint;
pub const BNModificationStatus_Original: BNModificationStatus = 0;
pub const BNModificationStatus_Changed: BNModificationStatus = 1;
pub const BNModificationStatus_Inserted: BNModificationStatus = 2;
pub type BNModificationStatus = ::std::os::raw::c_uint;
pub const BNTransformType_BinaryCodecTransform: BNTransformType = 0;
pub const BNTransformType_TextCodecTransform: BNTransformType = 1;
pub const BNTransformType_UnicodeCodecTransform: BNTransformType = 2;
pub const BNTransformType_DecodeTransform: BNTransformType = 3;
pub const BNTransformType_BinaryEncodeTransform: BNTransformType = 4;
pub const BNTransformType_TextEncodeTransform: BNTransformType = 5;
pub const BNTransformType_EncryptTransform: BNTransformType = 6;
pub const BNTransformType_InvertingTransform: BNTransformType = 7;
pub const BNTransformType_HashTransform: BNTransformType = 8;
pub type BNTransformType = ::std::os::raw::c_uint;
pub const BNBranchType_UnconditionalBranch: BNBranchType = 0;
pub const BNBranchType_FalseBranch: BNBranchType = 1;
pub const BNBranchType_TrueBranch: BNBranchType = 2;
pub const BNBranchType_CallDestination: BNBranchType = 3;
pub const BNBranchType_FunctionReturn: BNBranchType = 4;
pub const BNBranchType_SystemCall: BNBranchType = 5;
pub const BNBranchType_IndirectBranch: BNBranchType = 6;
pub const BNBranchType_ExceptionBranch: BNBranchType = 7;
pub const BNBranchType_UnresolvedBranch: BNBranchType = 127;
pub const BNBranchType_UserDefinedBranch: BNBranchType = 128;
pub type BNBranchType = ::std::os::raw::c_uint;
pub const BNInstructionTextTokenType_TextToken: BNInstructionTextTokenType = 0;
pub const BNInstructionTextTokenType_InstructionToken: BNInstructionTextTokenType = 1;
pub const BNInstructionTextTokenType_OperandSeparatorToken: BNInstructionTextTokenType = 2;
pub const BNInstructionTextTokenType_RegisterToken: BNInstructionTextTokenType = 3;
pub const BNInstructionTextTokenType_IntegerToken: BNInstructionTextTokenType = 4;
pub const BNInstructionTextTokenType_PossibleAddressToken: BNInstructionTextTokenType = 5;
pub const BNInstructionTextTokenType_BeginMemoryOperandToken: BNInstructionTextTokenType = 6;
pub const BNInstructionTextTokenType_EndMemoryOperandToken: BNInstructionTextTokenType = 7;
pub const BNInstructionTextTokenType_FloatingPointToken: BNInstructionTextTokenType = 8;
pub const BNInstructionTextTokenType_AnnotationToken: BNInstructionTextTokenType = 9;
pub const BNInstructionTextTokenType_CodeRelativeAddressToken: BNInstructionTextTokenType = 10;
pub const BNInstructionTextTokenType_ArgumentNameToken: BNInstructionTextTokenType = 11;
pub const BNInstructionTextTokenType_HexDumpByteValueToken: BNInstructionTextTokenType = 12;
pub const BNInstructionTextTokenType_HexDumpSkippedByteToken: BNInstructionTextTokenType = 13;
pub const BNInstructionTextTokenType_HexDumpInvalidByteToken: BNInstructionTextTokenType = 14;
pub const BNInstructionTextTokenType_HexDumpTextToken: BNInstructionTextTokenType = 15;
pub const BNInstructionTextTokenType_OpcodeToken: BNInstructionTextTokenType = 16;
pub const BNInstructionTextTokenType_StringToken: BNInstructionTextTokenType = 17;
pub const BNInstructionTextTokenType_CharacterConstantToken: BNInstructionTextTokenType = 18;
pub const BNInstructionTextTokenType_KeywordToken: BNInstructionTextTokenType = 19;
pub const BNInstructionTextTokenType_TypeNameToken: BNInstructionTextTokenType = 20;
pub const BNInstructionTextTokenType_FieldNameToken: BNInstructionTextTokenType = 21;
pub const BNInstructionTextTokenType_NameSpaceToken: BNInstructionTextTokenType = 22;
pub const BNInstructionTextTokenType_NameSpaceSeparatorToken: BNInstructionTextTokenType = 23;
pub const BNInstructionTextTokenType_TagToken: BNInstructionTextTokenType = 24;
pub const BNInstructionTextTokenType_StructOffsetToken: BNInstructionTextTokenType = 25;
pub const BNInstructionTextTokenType_StructOffsetByteValueToken: BNInstructionTextTokenType = 26;
pub const BNInstructionTextTokenType_StructureHexDumpTextToken: BNInstructionTextTokenType = 27;
pub const BNInstructionTextTokenType_GotoLabelToken: BNInstructionTextTokenType = 28;
pub const BNInstructionTextTokenType_CommentToken: BNInstructionTextTokenType = 29;
pub const BNInstructionTextTokenType_PossibleValueToken: BNInstructionTextTokenType = 30;
pub const BNInstructionTextTokenType_PossibleValueTypeToken: BNInstructionTextTokenType = 31;
pub const BNInstructionTextTokenType_ArrayIndexToken: BNInstructionTextTokenType = 32;
pub const BNInstructionTextTokenType_IndentationToken: BNInstructionTextTokenType = 33;
pub const BNInstructionTextTokenType_UnknownMemoryToken: BNInstructionTextTokenType = 34;
pub const BNInstructionTextTokenType_EnumerationMemberToken: BNInstructionTextTokenType = 35;
pub const BNInstructionTextTokenType_OperationToken: BNInstructionTextTokenType = 36;
pub const BNInstructionTextTokenType_BaseStructureNameToken: BNInstructionTextTokenType = 37;
pub const BNInstructionTextTokenType_BaseStructureSeparatorToken: BNInstructionTextTokenType = 38;
pub const BNInstructionTextTokenType_BraceToken: BNInstructionTextTokenType = 39;
pub const BNInstructionTextTokenType_CodeSymbolToken: BNInstructionTextTokenType = 64;
pub const BNInstructionTextTokenType_DataSymbolToken: BNInstructionTextTokenType = 65;
pub const BNInstructionTextTokenType_LocalVariableToken: BNInstructionTextTokenType = 66;
pub const BNInstructionTextTokenType_ImportToken: BNInstructionTextTokenType = 67;
pub const BNInstructionTextTokenType_AddressDisplayToken: BNInstructionTextTokenType = 68;
pub const BNInstructionTextTokenType_IndirectImportToken: BNInstructionTextTokenType = 69;
pub const BNInstructionTextTokenType_ExternalSymbolToken: BNInstructionTextTokenType = 70;
pub type BNInstructionTextTokenType = ::std::os::raw::c_uint;
pub const BNInstructionTextTokenContext_NoTokenContext: BNInstructionTextTokenContext = 0;
pub const BNInstructionTextTokenContext_LocalVariableTokenContext: BNInstructionTextTokenContext =
    1;
pub const BNInstructionTextTokenContext_DataVariableTokenContext: BNInstructionTextTokenContext = 2;
pub const BNInstructionTextTokenContext_FunctionReturnTokenContext: BNInstructionTextTokenContext =
    3;
pub const BNInstructionTextTokenContext_InstructionAddressTokenContext:
    BNInstructionTextTokenContext = 4;
pub const BNInstructionTextTokenContext_ILInstructionIndexTokenContext:
    BNInstructionTextTokenContext = 5;
pub const BNInstructionTextTokenContext_ConstDataTokenContext: BNInstructionTextTokenContext = 6;
pub const BNInstructionTextTokenContext_ConstStringDataTokenContext: BNInstructionTextTokenContext =
    7;
pub const BNInstructionTextTokenContext_StringReferenceTokenContext: BNInstructionTextTokenContext =
    8;
pub const BNInstructionTextTokenContext_StringDataVariableTokenContext:
    BNInstructionTextTokenContext = 9;
pub const BNInstructionTextTokenContext_StringDisplayTokenContext: BNInstructionTextTokenContext =
    10;
pub type BNInstructionTextTokenContext = ::std::os::raw::c_uint;
pub const BNLinearDisassemblyLineType_BlankLineType: BNLinearDisassemblyLineType = 0;
pub const BNLinearDisassemblyLineType_BasicLineType: BNLinearDisassemblyLineType = 1;
pub const BNLinearDisassemblyLineType_CodeDisassemblyLineType: BNLinearDisassemblyLineType = 2;
pub const BNLinearDisassemblyLineType_DataVariableLineType: BNLinearDisassemblyLineType = 3;
pub const BNLinearDisassemblyLineType_HexDumpLineType: BNLinearDisassemblyLineType = 4;
pub const BNLinearDisassemblyLineType_FunctionHeaderLineType: BNLinearDisassemblyLineType = 5;
pub const BNLinearDisassemblyLineType_FunctionHeaderStartLineType: BNLinearDisassemblyLineType = 6;
pub const BNLinearDisassemblyLineType_FunctionHeaderEndLineType: BNLinearDisassemblyLineType = 7;
pub const BNLinearDisassemblyLineType_FunctionContinuationLineType: BNLinearDisassemblyLineType = 8;
pub const BNLinearDisassemblyLineType_LocalVariableLineType: BNLinearDisassemblyLineType = 9;
pub const BNLinearDisassemblyLineType_LocalVariableListEndLineType: BNLinearDisassemblyLineType =
    10;
pub const BNLinearDisassemblyLineType_FunctionEndLineType: BNLinearDisassemblyLineType = 11;
pub const BNLinearDisassemblyLineType_NoteStartLineType: BNLinearDisassemblyLineType = 12;
pub const BNLinearDisassemblyLineType_NoteLineType: BNLinearDisassemblyLineType = 13;
pub const BNLinearDisassemblyLineType_NoteEndLineType: BNLinearDisassemblyLineType = 14;
pub const BNLinearDisassemblyLineType_SectionStartLineType: BNLinearDisassemblyLineType = 15;
pub const BNLinearDisassemblyLineType_SectionEndLineType: BNLinearDisassemblyLineType = 16;
pub const BNLinearDisassemblyLineType_SectionSeparatorLineType: BNLinearDisassemblyLineType = 17;
pub const BNLinearDisassemblyLineType_NonContiguousSeparatorLineType: BNLinearDisassemblyLineType =
    18;
pub const BNLinearDisassemblyLineType_AnalysisWarningLineType: BNLinearDisassemblyLineType = 19;
pub type BNLinearDisassemblyLineType = ::std::os::raw::c_uint;
pub const BNTokenEscapingType_NoTokenEscapingType: BNTokenEscapingType = 0;
pub const BNTokenEscapingType_BackticksTokenEscapingType: BNTokenEscapingType = 1;
pub const BNTokenEscapingType_QuotedStringEscapingType: BNTokenEscapingType = 2;
pub const BNTokenEscapingType_ReplaceInvalidCharsEscapingType: BNTokenEscapingType = 3;
pub type BNTokenEscapingType = ::std::os::raw::c_uint;
pub const BNAnalysisWarningActionType_NoAnalysisWarningAction: BNAnalysisWarningActionType = 0;
pub const BNAnalysisWarningActionType_ForceAnalysisWarningAction: BNAnalysisWarningActionType = 1;
pub const BNAnalysisWarningActionType_ShowStackGraphWarningAction: BNAnalysisWarningActionType = 2;
pub type BNAnalysisWarningActionType = ::std::os::raw::c_uint;
pub const BNSymbolType_FunctionSymbol: BNSymbolType = 0;
pub const BNSymbolType_ImportAddressSymbol: BNSymbolType = 1;
pub const BNSymbolType_ImportedFunctionSymbol: BNSymbolType = 2;
pub const BNSymbolType_DataSymbol: BNSymbolType = 3;
pub const BNSymbolType_ImportedDataSymbol: BNSymbolType = 4;
pub const BNSymbolType_ExternalSymbol: BNSymbolType = 5;
pub const BNSymbolType_LibraryFunctionSymbol: BNSymbolType = 6;
pub type BNSymbolType = ::std::os::raw::c_uint;
pub const BNSymbolBinding_NoBinding: BNSymbolBinding = 0;
pub const BNSymbolBinding_LocalBinding: BNSymbolBinding = 1;
pub const BNSymbolBinding_GlobalBinding: BNSymbolBinding = 2;
pub const BNSymbolBinding_WeakBinding: BNSymbolBinding = 3;
pub type BNSymbolBinding = ::std::os::raw::c_uint;
pub const BNActionType_TemporaryAction: BNActionType = 0;
pub const BNActionType_DataModificationAction: BNActionType = 1;
pub const BNActionType_AnalysisAction: BNActionType = 2;
pub const BNActionType_DataModificationAndAnalysisAction: BNActionType = 3;
pub type BNActionType = ::std::os::raw::c_uint;
pub const BNLowLevelILOperation_LLIL_NOP: BNLowLevelILOperation = 0;
pub const BNLowLevelILOperation_LLIL_SET_REG: BNLowLevelILOperation = 1;
pub const BNLowLevelILOperation_LLIL_SET_REG_SPLIT: BNLowLevelILOperation = 2;
pub const BNLowLevelILOperation_LLIL_SET_FLAG: BNLowLevelILOperation = 3;
pub const BNLowLevelILOperation_LLIL_SET_REG_STACK_REL: BNLowLevelILOperation = 4;
pub const BNLowLevelILOperation_LLIL_REG_STACK_PUSH: BNLowLevelILOperation = 5;
pub const BNLowLevelILOperation_LLIL_LOAD: BNLowLevelILOperation = 6;
pub const BNLowLevelILOperation_LLIL_STORE: BNLowLevelILOperation = 7;
pub const BNLowLevelILOperation_LLIL_PUSH: BNLowLevelILOperation = 8;
pub const BNLowLevelILOperation_LLIL_POP: BNLowLevelILOperation = 9;
pub const BNLowLevelILOperation_LLIL_REG: BNLowLevelILOperation = 10;
pub const BNLowLevelILOperation_LLIL_REG_SPLIT: BNLowLevelILOperation = 11;
pub const BNLowLevelILOperation_LLIL_REG_STACK_REL: BNLowLevelILOperation = 12;
pub const BNLowLevelILOperation_LLIL_REG_STACK_POP: BNLowLevelILOperation = 13;
pub const BNLowLevelILOperation_LLIL_REG_STACK_FREE_REG: BNLowLevelILOperation = 14;
pub const BNLowLevelILOperation_LLIL_REG_STACK_FREE_REL: BNLowLevelILOperation = 15;
pub const BNLowLevelILOperation_LLIL_CONST: BNLowLevelILOperation = 16;
pub const BNLowLevelILOperation_LLIL_CONST_PTR: BNLowLevelILOperation = 17;
pub const BNLowLevelILOperation_LLIL_EXTERN_PTR: BNLowLevelILOperation = 18;
pub const BNLowLevelILOperation_LLIL_FLOAT_CONST: BNLowLevelILOperation = 19;
pub const BNLowLevelILOperation_LLIL_FLAG: BNLowLevelILOperation = 20;
pub const BNLowLevelILOperation_LLIL_FLAG_BIT: BNLowLevelILOperation = 21;
pub const BNLowLevelILOperation_LLIL_ADD: BNLowLevelILOperation = 22;
pub const BNLowLevelILOperation_LLIL_ADC: BNLowLevelILOperation = 23;
pub const BNLowLevelILOperation_LLIL_SUB: BNLowLevelILOperation = 24;
pub const BNLowLevelILOperation_LLIL_SBB: BNLowLevelILOperation = 25;
pub const BNLowLevelILOperation_LLIL_AND: BNLowLevelILOperation = 26;
pub const BNLowLevelILOperation_LLIL_OR: BNLowLevelILOperation = 27;
pub const BNLowLevelILOperation_LLIL_XOR: BNLowLevelILOperation = 28;
pub const BNLowLevelILOperation_LLIL_LSL: BNLowLevelILOperation = 29;
pub const BNLowLevelILOperation_LLIL_LSR: BNLowLevelILOperation = 30;
pub const BNLowLevelILOperation_LLIL_ASR: BNLowLevelILOperation = 31;
pub const BNLowLevelILOperation_LLIL_ROL: BNLowLevelILOperation = 32;
pub const BNLowLevelILOperation_LLIL_RLC: BNLowLevelILOperation = 33;
pub const BNLowLevelILOperation_LLIL_ROR: BNLowLevelILOperation = 34;
pub const BNLowLevelILOperation_LLIL_RRC: BNLowLevelILOperation = 35;
pub const BNLowLevelILOperation_LLIL_MUL: BNLowLevelILOperation = 36;
pub const BNLowLevelILOperation_LLIL_MULU_DP: BNLowLevelILOperation = 37;
pub const BNLowLevelILOperation_LLIL_MULS_DP: BNLowLevelILOperation = 38;
pub const BNLowLevelILOperation_LLIL_DIVU: BNLowLevelILOperation = 39;
pub const BNLowLevelILOperation_LLIL_DIVU_DP: BNLowLevelILOperation = 40;
pub const BNLowLevelILOperation_LLIL_DIVS: BNLowLevelILOperation = 41;
pub const BNLowLevelILOperation_LLIL_DIVS_DP: BNLowLevelILOperation = 42;
pub const BNLowLevelILOperation_LLIL_MODU: BNLowLevelILOperation = 43;
pub const BNLowLevelILOperation_LLIL_MODU_DP: BNLowLevelILOperation = 44;
pub const BNLowLevelILOperation_LLIL_MODS: BNLowLevelILOperation = 45;
pub const BNLowLevelILOperation_LLIL_MODS_DP: BNLowLevelILOperation = 46;
pub const BNLowLevelILOperation_LLIL_NEG: BNLowLevelILOperation = 47;
pub const BNLowLevelILOperation_LLIL_NOT: BNLowLevelILOperation = 48;
pub const BNLowLevelILOperation_LLIL_SX: BNLowLevelILOperation = 49;
pub const BNLowLevelILOperation_LLIL_ZX: BNLowLevelILOperation = 50;
pub const BNLowLevelILOperation_LLIL_LOW_PART: BNLowLevelILOperation = 51;
pub const BNLowLevelILOperation_LLIL_JUMP: BNLowLevelILOperation = 52;
pub const BNLowLevelILOperation_LLIL_JUMP_TO: BNLowLevelILOperation = 53;
pub const BNLowLevelILOperation_LLIL_CALL: BNLowLevelILOperation = 54;
pub const BNLowLevelILOperation_LLIL_CALL_STACK_ADJUST: BNLowLevelILOperation = 55;
pub const BNLowLevelILOperation_LLIL_TAILCALL: BNLowLevelILOperation = 56;
pub const BNLowLevelILOperation_LLIL_RET: BNLowLevelILOperation = 57;
pub const BNLowLevelILOperation_LLIL_NORET: BNLowLevelILOperation = 58;
pub const BNLowLevelILOperation_LLIL_IF: BNLowLevelILOperation = 59;
pub const BNLowLevelILOperation_LLIL_GOTO: BNLowLevelILOperation = 60;
pub const BNLowLevelILOperation_LLIL_FLAG_COND: BNLowLevelILOperation = 61;
pub const BNLowLevelILOperation_LLIL_FLAG_GROUP: BNLowLevelILOperation = 62;
pub const BNLowLevelILOperation_LLIL_CMP_E: BNLowLevelILOperation = 63;
pub const BNLowLevelILOperation_LLIL_CMP_NE: BNLowLevelILOperation = 64;
pub const BNLowLevelILOperation_LLIL_CMP_SLT: BNLowLevelILOperation = 65;
pub const BNLowLevelILOperation_LLIL_CMP_ULT: BNLowLevelILOperation = 66;
pub const BNLowLevelILOperation_LLIL_CMP_SLE: BNLowLevelILOperation = 67;
pub const BNLowLevelILOperation_LLIL_CMP_ULE: BNLowLevelILOperation = 68;
pub const BNLowLevelILOperation_LLIL_CMP_SGE: BNLowLevelILOperation = 69;
pub const BNLowLevelILOperation_LLIL_CMP_UGE: BNLowLevelILOperation = 70;
pub const BNLowLevelILOperation_LLIL_CMP_SGT: BNLowLevelILOperation = 71;
pub const BNLowLevelILOperation_LLIL_CMP_UGT: BNLowLevelILOperation = 72;
pub const BNLowLevelILOperation_LLIL_TEST_BIT: BNLowLevelILOperation = 73;
pub const BNLowLevelILOperation_LLIL_BOOL_TO_INT: BNLowLevelILOperation = 74;
pub const BNLowLevelILOperation_LLIL_ADD_OVERFLOW: BNLowLevelILOperation = 75;
pub const BNLowLevelILOperation_LLIL_SYSCALL: BNLowLevelILOperation = 76;
pub const BNLowLevelILOperation_LLIL_BP: BNLowLevelILOperation = 77;
pub const BNLowLevelILOperation_LLIL_TRAP: BNLowLevelILOperation = 78;
pub const BNLowLevelILOperation_LLIL_INTRINSIC: BNLowLevelILOperation = 79;
pub const BNLowLevelILOperation_LLIL_UNDEF: BNLowLevelILOperation = 80;
pub const BNLowLevelILOperation_LLIL_UNIMPL: BNLowLevelILOperation = 81;
pub const BNLowLevelILOperation_LLIL_UNIMPL_MEM: BNLowLevelILOperation = 82;
pub const BNLowLevelILOperation_LLIL_FADD: BNLowLevelILOperation = 83;
pub const BNLowLevelILOperation_LLIL_FSUB: BNLowLevelILOperation = 84;
pub const BNLowLevelILOperation_LLIL_FMUL: BNLowLevelILOperation = 85;
pub const BNLowLevelILOperation_LLIL_FDIV: BNLowLevelILOperation = 86;
pub const BNLowLevelILOperation_LLIL_FSQRT: BNLowLevelILOperation = 87;
pub const BNLowLevelILOperation_LLIL_FNEG: BNLowLevelILOperation = 88;
pub const BNLowLevelILOperation_LLIL_FABS: BNLowLevelILOperation = 89;
pub const BNLowLevelILOperation_LLIL_FLOAT_TO_INT: BNLowLevelILOperation = 90;
pub const BNLowLevelILOperation_LLIL_INT_TO_FLOAT: BNLowLevelILOperation = 91;
pub const BNLowLevelILOperation_LLIL_FLOAT_CONV: BNLowLevelILOperation = 92;
pub const BNLowLevelILOperation_LLIL_ROUND_TO_INT: BNLowLevelILOperation = 93;
pub const BNLowLevelILOperation_LLIL_FLOOR: BNLowLevelILOperation = 94;
pub const BNLowLevelILOperation_LLIL_CEIL: BNLowLevelILOperation = 95;
pub const BNLowLevelILOperation_LLIL_FTRUNC: BNLowLevelILOperation = 96;
pub const BNLowLevelILOperation_LLIL_FCMP_E: BNLowLevelILOperation = 97;
pub const BNLowLevelILOperation_LLIL_FCMP_NE: BNLowLevelILOperation = 98;
pub const BNLowLevelILOperation_LLIL_FCMP_LT: BNLowLevelILOperation = 99;
pub const BNLowLevelILOperation_LLIL_FCMP_LE: BNLowLevelILOperation = 100;
pub const BNLowLevelILOperation_LLIL_FCMP_GE: BNLowLevelILOperation = 101;
pub const BNLowLevelILOperation_LLIL_FCMP_GT: BNLowLevelILOperation = 102;
pub const BNLowLevelILOperation_LLIL_FCMP_O: BNLowLevelILOperation = 103;
pub const BNLowLevelILOperation_LLIL_FCMP_UO: BNLowLevelILOperation = 104;
pub const BNLowLevelILOperation_LLIL_SET_REG_SSA: BNLowLevelILOperation = 105;
pub const BNLowLevelILOperation_LLIL_SET_REG_SSA_PARTIAL: BNLowLevelILOperation = 106;
pub const BNLowLevelILOperation_LLIL_SET_REG_SPLIT_SSA: BNLowLevelILOperation = 107;
pub const BNLowLevelILOperation_LLIL_SET_REG_STACK_REL_SSA: BNLowLevelILOperation = 108;
pub const BNLowLevelILOperation_LLIL_SET_REG_STACK_ABS_SSA: BNLowLevelILOperation = 109;
pub const BNLowLevelILOperation_LLIL_REG_SPLIT_DEST_SSA: BNLowLevelILOperation = 110;
pub const BNLowLevelILOperation_LLIL_REG_STACK_DEST_SSA: BNLowLevelILOperation = 111;
pub const BNLowLevelILOperation_LLIL_REG_SSA: BNLowLevelILOperation = 112;
pub const BNLowLevelILOperation_LLIL_REG_SSA_PARTIAL: BNLowLevelILOperation = 113;
pub const BNLowLevelILOperation_LLIL_REG_SPLIT_SSA: BNLowLevelILOperation = 114;
pub const BNLowLevelILOperation_LLIL_REG_STACK_REL_SSA: BNLowLevelILOperation = 115;
pub const BNLowLevelILOperation_LLIL_REG_STACK_ABS_SSA: BNLowLevelILOperation = 116;
pub const BNLowLevelILOperation_LLIL_REG_STACK_FREE_REL_SSA: BNLowLevelILOperation = 117;
pub const BNLowLevelILOperation_LLIL_REG_STACK_FREE_ABS_SSA: BNLowLevelILOperation = 118;
pub const BNLowLevelILOperation_LLIL_SET_FLAG_SSA: BNLowLevelILOperation = 119;
pub const BNLowLevelILOperation_LLIL_FLAG_SSA: BNLowLevelILOperation = 120;
pub const BNLowLevelILOperation_LLIL_FLAG_BIT_SSA: BNLowLevelILOperation = 121;
pub const BNLowLevelILOperation_LLIL_CALL_SSA: BNLowLevelILOperation = 122;
pub const BNLowLevelILOperation_LLIL_SYSCALL_SSA: BNLowLevelILOperation = 123;
pub const BNLowLevelILOperation_LLIL_TAILCALL_SSA: BNLowLevelILOperation = 124;
pub const BNLowLevelILOperation_LLIL_CALL_PARAM: BNLowLevelILOperation = 125;
pub const BNLowLevelILOperation_LLIL_CALL_STACK_SSA: BNLowLevelILOperation = 126;
pub const BNLowLevelILOperation_LLIL_CALL_OUTPUT_SSA: BNLowLevelILOperation = 127;
pub const BNLowLevelILOperation_LLIL_LOAD_SSA: BNLowLevelILOperation = 128;
pub const BNLowLevelILOperation_LLIL_STORE_SSA: BNLowLevelILOperation = 129;
pub const BNLowLevelILOperation_LLIL_INTRINSIC_SSA: BNLowLevelILOperation = 130;
pub const BNLowLevelILOperation_LLIL_REG_PHI: BNLowLevelILOperation = 131;
pub const BNLowLevelILOperation_LLIL_REG_STACK_PHI: BNLowLevelILOperation = 132;
pub const BNLowLevelILOperation_LLIL_FLAG_PHI: BNLowLevelILOperation = 133;
pub const BNLowLevelILOperation_LLIL_MEM_PHI: BNLowLevelILOperation = 134;
pub type BNLowLevelILOperation = ::std::os::raw::c_uint;
pub const BNLowLevelILFlagCondition_LLFC_E: BNLowLevelILFlagCondition = 0;
pub const BNLowLevelILFlagCondition_LLFC_NE: BNLowLevelILFlagCondition = 1;
pub const BNLowLevelILFlagCondition_LLFC_SLT: BNLowLevelILFlagCondition = 2;
pub const BNLowLevelILFlagCondition_LLFC_ULT: BNLowLevelILFlagCondition = 3;
pub const BNLowLevelILFlagCondition_LLFC_SLE: BNLowLevelILFlagCondition = 4;
pub const BNLowLevelILFlagCondition_LLFC_ULE: BNLowLevelILFlagCondition = 5;
pub const BNLowLevelILFlagCondition_LLFC_SGE: BNLowLevelILFlagCondition = 6;
pub const BNLowLevelILFlagCondition_LLFC_UGE: BNLowLevelILFlagCondition = 7;
pub const BNLowLevelILFlagCondition_LLFC_SGT: BNLowLevelILFlagCondition = 8;
pub const BNLowLevelILFlagCondition_LLFC_UGT: BNLowLevelILFlagCondition = 9;
pub const BNLowLevelILFlagCondition_LLFC_NEG: BNLowLevelILFlagCondition = 10;
pub const BNLowLevelILFlagCondition_LLFC_POS: BNLowLevelILFlagCondition = 11;
pub const BNLowLevelILFlagCondition_LLFC_O: BNLowLevelILFlagCondition = 12;
pub const BNLowLevelILFlagCondition_LLFC_NO: BNLowLevelILFlagCondition = 13;
pub const BNLowLevelILFlagCondition_LLFC_FE: BNLowLevelILFlagCondition = 14;
pub const BNLowLevelILFlagCondition_LLFC_FNE: BNLowLevelILFlagCondition = 15;
pub const BNLowLevelILFlagCondition_LLFC_FLT: BNLowLevelILFlagCondition = 16;
pub const BNLowLevelILFlagCondition_LLFC_FLE: BNLowLevelILFlagCondition = 17;
pub const BNLowLevelILFlagCondition_LLFC_FGE: BNLowLevelILFlagCondition = 18;
pub const BNLowLevelILFlagCondition_LLFC_FGT: BNLowLevelILFlagCondition = 19;
pub const BNLowLevelILFlagCondition_LLFC_FO: BNLowLevelILFlagCondition = 20;
pub const BNLowLevelILFlagCondition_LLFC_FUO: BNLowLevelILFlagCondition = 21;
pub type BNLowLevelILFlagCondition = ::std::os::raw::c_uint;
pub const BNFlagRole_SpecialFlagRole: BNFlagRole = 0;
pub const BNFlagRole_ZeroFlagRole: BNFlagRole = 1;
pub const BNFlagRole_PositiveSignFlagRole: BNFlagRole = 2;
pub const BNFlagRole_NegativeSignFlagRole: BNFlagRole = 3;
pub const BNFlagRole_CarryFlagRole: BNFlagRole = 4;
pub const BNFlagRole_OverflowFlagRole: BNFlagRole = 5;
pub const BNFlagRole_HalfCarryFlagRole: BNFlagRole = 6;
pub const BNFlagRole_EvenParityFlagRole: BNFlagRole = 7;
pub const BNFlagRole_OddParityFlagRole: BNFlagRole = 8;
pub const BNFlagRole_OrderedFlagRole: BNFlagRole = 9;
pub const BNFlagRole_UnorderedFlagRole: BNFlagRole = 10;
pub type BNFlagRole = ::std::os::raw::c_uint;
pub const BNFunctionGraphType_InvalidILViewType: BNFunctionGraphType = -1;
pub const BNFunctionGraphType_NormalFunctionGraph: BNFunctionGraphType = 0;
pub const BNFunctionGraphType_LowLevelILFunctionGraph: BNFunctionGraphType = 1;
pub const BNFunctionGraphType_LiftedILFunctionGraph: BNFunctionGraphType = 2;
pub const BNFunctionGraphType_LowLevelILSSAFormFunctionGraph: BNFunctionGraphType = 3;
pub const BNFunctionGraphType_MediumLevelILFunctionGraph: BNFunctionGraphType = 4;
pub const BNFunctionGraphType_MediumLevelILSSAFormFunctionGraph: BNFunctionGraphType = 5;
pub const BNFunctionGraphType_MappedMediumLevelILFunctionGraph: BNFunctionGraphType = 6;
pub const BNFunctionGraphType_MappedMediumLevelILSSAFormFunctionGraph: BNFunctionGraphType = 7;
pub const BNFunctionGraphType_HighLevelILFunctionGraph: BNFunctionGraphType = 8;
pub const BNFunctionGraphType_HighLevelILSSAFormFunctionGraph: BNFunctionGraphType = 9;
pub const BNFunctionGraphType_HighLevelLanguageRepresentationFunctionGraph: BNFunctionGraphType =
    10;
pub type BNFunctionGraphType = ::std::os::raw::c_int;
pub const BNDisassemblyOption_ShowAddress: BNDisassemblyOption = 0;
pub const BNDisassemblyOption_ShowOpcode: BNDisassemblyOption = 1;
pub const BNDisassemblyOption_ExpandLongOpcode: BNDisassemblyOption = 2;
pub const BNDisassemblyOption_ShowVariablesAtTopOfGraph: BNDisassemblyOption = 3;
pub const BNDisassemblyOption_ShowVariableTypesWhenAssigned: BNDisassemblyOption = 4;
pub const BNDisassemblyOption_ShowCallParameterNames: BNDisassemblyOption = 6;
pub const BNDisassemblyOption_ShowRegisterHighlight: BNDisassemblyOption = 7;
pub const BNDisassemblyOption_ShowFunctionAddress: BNDisassemblyOption = 8;
pub const BNDisassemblyOption_ShowFunctionHeader: BNDisassemblyOption = 9;
pub const BNDisassemblyOption_ShowTypeCasts: BNDisassemblyOption = 10;
pub const BNDisassemblyOption_GroupLinearDisassemblyFunctions: BNDisassemblyOption = 64;
pub const BNDisassemblyOption_HighLevelILLinearDisassembly: BNDisassemblyOption = 65;
pub const BNDisassemblyOption_WaitForIL: BNDisassemblyOption = 66;
pub const BNDisassemblyOption_IndentHLILBody: BNDisassemblyOption = 67;
pub const BNDisassemblyOption_ShowFlagUsage: BNDisassemblyOption = 128;
pub const BNDisassemblyOption_ShowStackPointer: BNDisassemblyOption = 129;
pub const BNDisassemblyOption_ShowILTypes: BNDisassemblyOption = 130;
pub const BNDisassemblyOption_ShowILOpcodes: BNDisassemblyOption = 131;
pub type BNDisassemblyOption = ::std::os::raw::c_uint;
pub const BNTypeClass_VoidTypeClass: BNTypeClass = 0;
pub const BNTypeClass_BoolTypeClass: BNTypeClass = 1;
pub const BNTypeClass_IntegerTypeClass: BNTypeClass = 2;
pub const BNTypeClass_FloatTypeClass: BNTypeClass = 3;
pub const BNTypeClass_StructureTypeClass: BNTypeClass = 4;
pub const BNTypeClass_EnumerationTypeClass: BNTypeClass = 5;
pub const BNTypeClass_PointerTypeClass: BNTypeClass = 6;
pub const BNTypeClass_ArrayTypeClass: BNTypeClass = 7;
pub const BNTypeClass_FunctionTypeClass: BNTypeClass = 8;
pub const BNTypeClass_VarArgsTypeClass: BNTypeClass = 9;
pub const BNTypeClass_ValueTypeClass: BNTypeClass = 10;
pub const BNTypeClass_NamedTypeReferenceClass: BNTypeClass = 11;
pub const BNTypeClass_WideCharTypeClass: BNTypeClass = 12;
pub type BNTypeClass = ::std::os::raw::c_uint;
pub const BNNamedTypeReferenceClass_UnknownNamedTypeClass: BNNamedTypeReferenceClass = 0;
pub const BNNamedTypeReferenceClass_TypedefNamedTypeClass: BNNamedTypeReferenceClass = 1;
pub const BNNamedTypeReferenceClass_ClassNamedTypeClass: BNNamedTypeReferenceClass = 2;
pub const BNNamedTypeReferenceClass_StructNamedTypeClass: BNNamedTypeReferenceClass = 3;
pub const BNNamedTypeReferenceClass_UnionNamedTypeClass: BNNamedTypeReferenceClass = 4;
pub const BNNamedTypeReferenceClass_EnumNamedTypeClass: BNNamedTypeReferenceClass = 5;
pub type BNNamedTypeReferenceClass = ::std::os::raw::c_uint;
pub const BNStructureVariant_ClassStructureType: BNStructureVariant = 0;
pub const BNStructureVariant_StructStructureType: BNStructureVariant = 1;
pub const BNStructureVariant_UnionStructureType: BNStructureVariant = 2;
pub type BNStructureVariant = ::std::os::raw::c_uint;
pub const BNMemberScope_NoScope: BNMemberScope = 0;
pub const BNMemberScope_StaticScope: BNMemberScope = 1;
pub const BNMemberScope_VirtualScope: BNMemberScope = 2;
pub const BNMemberScope_ThunkScope: BNMemberScope = 3;
pub const BNMemberScope_FriendScope: BNMemberScope = 4;
pub type BNMemberScope = ::std::os::raw::c_uint;
pub const BNMemberAccess_NoAccess: BNMemberAccess = 0;
pub const BNMemberAccess_PrivateAccess: BNMemberAccess = 1;
pub const BNMemberAccess_ProtectedAccess: BNMemberAccess = 2;
pub const BNMemberAccess_PublicAccess: BNMemberAccess = 3;
pub type BNMemberAccess = ::std::os::raw::c_uint;
pub const BNReferenceType_PointerReferenceType: BNReferenceType = 0;
pub const BNReferenceType_ReferenceReferenceType: BNReferenceType = 1;
pub const BNReferenceType_RValueReferenceType: BNReferenceType = 2;
pub const BNReferenceType_NoReference: BNReferenceType = 3;
pub type BNReferenceType = ::std::os::raw::c_uint;
pub const BNPointerSuffix_Ptr64Suffix: BNPointerSuffix = 0;
pub const BNPointerSuffix_UnalignedSuffix: BNPointerSuffix = 1;
pub const BNPointerSuffix_RestrictSuffix: BNPointerSuffix = 2;
pub const BNPointerSuffix_ReferenceSuffix: BNPointerSuffix = 3;
pub const BNPointerSuffix_LvalueSuffix: BNPointerSuffix = 4;
pub type BNPointerSuffix = ::std::os::raw::c_uint;
pub const BNNameType_NoNameType: BNNameType = 0;
pub const BNNameType_ConstructorNameType: BNNameType = 1;
pub const BNNameType_DestructorNameType: BNNameType = 2;
pub const BNNameType_OperatorNewNameType: BNNameType = 3;
pub const BNNameType_OperatorDeleteNameType: BNNameType = 4;
pub const BNNameType_OperatorAssignNameType: BNNameType = 5;
pub const BNNameType_OperatorRightShiftNameType: BNNameType = 6;
pub const BNNameType_OperatorLeftShiftNameType: BNNameType = 7;
pub const BNNameType_OperatorNotNameType: BNNameType = 8;
pub const BNNameType_OperatorEqualNameType: BNNameType = 9;
pub const BNNameType_OperatorNotEqualNameType: BNNameType = 10;
pub const BNNameType_OperatorArrayNameType: BNNameType = 11;
pub const BNNameType_OperatorArrowNameType: BNNameType = 12;
pub const BNNameType_OperatorStarNameType: BNNameType = 13;
pub const BNNameType_OperatorIncrementNameType: BNNameType = 14;
pub const BNNameType_OperatorDecrementNameType: BNNameType = 15;
pub const BNNameType_OperatorMinusNameType: BNNameType = 16;
pub const BNNameType_OperatorPlusNameType: BNNameType = 17;
pub const BNNameType_OperatorBitAndNameType: BNNameType = 18;
pub const BNNameType_OperatorArrowStarNameType: BNNameType = 19;
pub const BNNameType_OperatorDivideNameType: BNNameType = 20;
pub const BNNameType_OperatorModulusNameType: BNNameType = 21;
pub const BNNameType_OperatorLessThanNameType: BNNameType = 22;
pub const BNNameType_OperatorLessThanEqualNameType: BNNameType = 23;
pub const BNNameType_OperatorGreaterThanNameType: BNNameType = 24;
pub const BNNameType_OperatorGreaterThanEqualNameType: BNNameType = 25;
pub const BNNameType_OperatorCommaNameType: BNNameType = 26;
pub const BNNameType_OperatorParenthesesNameType: BNNameType = 27;
pub const BNNameType_OperatorTildeNameType: BNNameType = 28;
pub const BNNameType_OperatorXorNameType: BNNameType = 29;
pub const BNNameType_OperatorBitOrNameType: BNNameType = 30;
pub const BNNameType_OperatorLogicalAndNameType: BNNameType = 31;
pub const BNNameType_OperatorLogicalOrNameType: BNNameType = 32;
pub const BNNameType_OperatorStarEqualNameType: BNNameType = 33;
pub const BNNameType_OperatorPlusEqualNameType: BNNameType = 34;
pub const BNNameType_OperatorMinusEqualNameType: BNNameType = 35;
pub const BNNameType_OperatorDivideEqualNameType: BNNameType = 36;
pub const BNNameType_OperatorModulusEqualNameType: BNNameType = 37;
pub const BNNameType_OperatorRightShiftEqualNameType: BNNameType = 38;
pub const BNNameType_OperatorLeftShiftEqualNameType: BNNameType = 39;
pub const BNNameType_OperatorAndEqualNameType: BNNameType = 40;
pub const BNNameType_OperatorOrEqualNameType: BNNameType = 41;
pub const BNNameType_OperatorXorEqualNameType: BNNameType = 42;
pub const BNNameType_VFTableNameType: BNNameType = 43;
pub const BNNameType_VBTableNameType: BNNameType = 44;
pub const BNNameType_VCallNameType: BNNameType = 45;
pub const BNNameType_TypeofNameType: BNNameType = 46;
pub const BNNameType_LocalStaticGuardNameType: BNNameType = 47;
pub const BNNameType_StringNameType: BNNameType = 48;
pub const BNNameType_VBaseDestructorNameType: BNNameType = 49;
pub const BNNameType_VectorDeletingDestructorNameType: BNNameType = 50;
pub const BNNameType_DefaultConstructorClosureNameType: BNNameType = 51;
pub const BNNameType_ScalarDeletingDestructorNameType: BNNameType = 52;
pub const BNNameType_VectorConstructorIteratorNameType: BNNameType = 53;
pub const BNNameType_VectorDestructorIteratorNameType: BNNameType = 54;
pub const BNNameType_VectorVBaseConstructorIteratorNameType: BNNameType = 55;
pub const BNNameType_VirtualDisplacementMapNameType: BNNameType = 56;
pub const BNNameType_EHVectorConstructorIteratorNameType: BNNameType = 57;
pub const BNNameType_EHVectorDestructorIteratorNameType: BNNameType = 58;
pub const BNNameType_EHVectorVBaseConstructorIteratorNameType: BNNameType = 59;
pub const BNNameType_CopyConstructorClosureNameType: BNNameType = 60;
pub const BNNameType_UDTReturningNameType: BNNameType = 61;
pub const BNNameType_LocalVFTableNameType: BNNameType = 62;
pub const BNNameType_LocalVFTableConstructorClosureNameType: BNNameType = 63;
pub const BNNameType_OperatorNewArrayNameType: BNNameType = 64;
pub const BNNameType_OperatorDeleteArrayNameType: BNNameType = 65;
pub const BNNameType_PlacementDeleteClosureNameType: BNNameType = 66;
pub const BNNameType_PlacementDeleteClosureArrayNameType: BNNameType = 67;
pub const BNNameType_OperatorReturnTypeNameType: BNNameType = 68;
pub const BNNameType_RttiTypeDescriptor: BNNameType = 69;
pub const BNNameType_RttiBaseClassDescriptor: BNNameType = 70;
pub const BNNameType_RttiBaseClassArray: BNNameType = 71;
pub const BNNameType_RttiClassHierarchyDescriptor: BNNameType = 72;
pub const BNNameType_RttiCompleteObjectLocator: BNNameType = 73;
pub const BNNameType_OperatorUnaryMinusNameType: BNNameType = 74;
pub const BNNameType_OperatorUnaryPlusNameType: BNNameType = 75;
pub const BNNameType_OperatorUnaryBitAndNameType: BNNameType = 76;
pub const BNNameType_OperatorUnaryStarNameType: BNNameType = 77;
pub const BNNameType_OmniCallSigNameType: BNNameType = 78;
pub const BNNameType_ManagedVectorConstructorIteratorNameType: BNNameType = 79;
pub const BNNameType_ManagedVectorDestructorIteratorNameType: BNNameType = 80;
pub const BNNameType_EHVectorCopyConstructorIteratorNameType: BNNameType = 81;
pub const BNNameType_EHVectorVBaseCopyConstructorIteratorNameType: BNNameType = 82;
pub const BNNameType_DynamicInitializerNameType: BNNameType = 83;
pub const BNNameType_DynamicAtExitDestructorNameType: BNNameType = 84;
pub const BNNameType_VectorCopyConstructorIteratorNameType: BNNameType = 85;
pub const BNNameType_VectorVBaseCopyConstructorIteratorNameType: BNNameType = 86;
pub const BNNameType_ManagedVectorCopyConstructorIteratorNameType: BNNameType = 87;
pub const BNNameType_LocalStaticThreadGuardNameType: BNNameType = 88;
pub const BNNameType_UserDefinedLiteralOperatorNameType: BNNameType = 89;
pub type BNNameType = ::std::os::raw::c_uint;
pub const BNCallingConventionName_NoCallingConvention: BNCallingConventionName = 0;
pub const BNCallingConventionName_CdeclCallingConvention: BNCallingConventionName = 1;
pub const BNCallingConventionName_PascalCallingConvention: BNCallingConventionName = 2;
pub const BNCallingConventionName_ThisCallCallingConvention: BNCallingConventionName = 3;
pub const BNCallingConventionName_STDCallCallingConvention: BNCallingConventionName = 4;
pub const BNCallingConventionName_FastcallCallingConvention: BNCallingConventionName = 5;
pub const BNCallingConventionName_CLRCallCallingConvention: BNCallingConventionName = 6;
pub const BNCallingConventionName_EabiCallCallingConvention: BNCallingConventionName = 7;
pub const BNCallingConventionName_VectorCallCallingConvention: BNCallingConventionName = 8;
pub const BNCallingConventionName_SwiftCallingConvention: BNCallingConventionName = 9;
pub const BNCallingConventionName_SwiftAsyncCallingConvention: BNCallingConventionName = 10;
pub type BNCallingConventionName = ::std::os::raw::c_uint;
pub const BNStringType_AsciiString: BNStringType = 0;
pub const BNStringType_Utf16String: BNStringType = 1;
pub const BNStringType_Utf32String: BNStringType = 2;
pub const BNStringType_Utf8String: BNStringType = 3;
pub type BNStringType = ::std::os::raw::c_uint;
pub const BNIntegerDisplayType_DefaultIntegerDisplayType: BNIntegerDisplayType = 0;
pub const BNIntegerDisplayType_BinaryDisplayType: BNIntegerDisplayType = 1;
pub const BNIntegerDisplayType_SignedOctalDisplayType: BNIntegerDisplayType = 2;
pub const BNIntegerDisplayType_UnsignedOctalDisplayType: BNIntegerDisplayType = 3;
pub const BNIntegerDisplayType_SignedDecimalDisplayType: BNIntegerDisplayType = 4;
pub const BNIntegerDisplayType_UnsignedDecimalDisplayType: BNIntegerDisplayType = 5;
pub const BNIntegerDisplayType_SignedHexadecimalDisplayType: BNIntegerDisplayType = 6;
pub const BNIntegerDisplayType_UnsignedHexadecimalDisplayType: BNIntegerDisplayType = 7;
pub const BNIntegerDisplayType_CharacterConstantDisplayType: BNIntegerDisplayType = 8;
pub const BNIntegerDisplayType_PointerDisplayType: BNIntegerDisplayType = 9;
pub const BNIntegerDisplayType_FloatDisplayType: BNIntegerDisplayType = 10;
pub const BNIntegerDisplayType_DoubleDisplayType: BNIntegerDisplayType = 11;
pub const BNIntegerDisplayType_EnumerationDisplayType: BNIntegerDisplayType = 12;
pub type BNIntegerDisplayType = ::std::os::raw::c_uint;
pub const BNFlowGraphOption_FlowGraphUsesBlockHighlights: BNFlowGraphOption = 0;
pub const BNFlowGraphOption_FlowGraphUsesInstructionHighlights: BNFlowGraphOption = 1;
pub const BNFlowGraphOption_FlowGraphIncludesUserComments: BNFlowGraphOption = 2;
pub const BNFlowGraphOption_FlowGraphAllowsPatching: BNFlowGraphOption = 3;
pub const BNFlowGraphOption_FlowGraphAllowsInlineInstructionEditing: BNFlowGraphOption = 4;
pub const BNFlowGraphOption_FlowGraphShowsSecondaryRegisterHighlighting: BNFlowGraphOption = 5;
pub type BNFlowGraphOption = ::std::os::raw::c_uint;
pub const BNILInstructionAttribute_ILAllowDeadStoreElimination: BNILInstructionAttribute = 1;
pub const BNILInstructionAttribute_ILPreventDeadStoreElimination: BNILInstructionAttribute = 2;
pub const BNILInstructionAttribute_MLILAssumePossibleUse: BNILInstructionAttribute = 4;
pub type BNILInstructionAttribute = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLowLevelILInstruction {
    pub operation: BNLowLevelILOperation,
    pub attributes: u32,
    pub size: usize,
    pub flags: u32,
    pub sourceOperand: u32,
    pub operands: [u64; 4usize],
    pub address: u64,
}
#[test]
fn bindgen_test_layout_BNLowLevelILInstruction() {
    const UNINIT: ::std::mem::MaybeUninit<BNLowLevelILInstruction> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNLowLevelILInstruction>(),
        64usize,
        concat!("Size of: ", stringify!(BNLowLevelILInstruction))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLowLevelILInstruction>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLowLevelILInstruction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceOperand) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(sourceOperand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operands) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(operands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILInstruction),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLowLevelILLabel {
    pub resolved: bool,
    pub ref_: usize,
    pub operand: usize,
}
#[test]
fn bindgen_test_layout_BNLowLevelILLabel() {
    const UNINIT: ::std::mem::MaybeUninit<BNLowLevelILLabel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNLowLevelILLabel>(),
        24usize,
        concat!("Size of: ", stringify!(BNLowLevelILLabel))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLowLevelILLabel>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLowLevelILLabel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILLabel),
            "::",
            stringify!(resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILLabel),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operand) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLowLevelILLabel),
            "::",
            stringify!(operand)
        )
    );
}
pub const BNImplicitRegisterExtend_NoExtend: BNImplicitRegisterExtend = 0;
pub const BNImplicitRegisterExtend_ZeroExtendToFullWidth: BNImplicitRegisterExtend = 1;
pub const BNImplicitRegisterExtend_SignExtendToFullWidth: BNImplicitRegisterExtend = 2;
pub type BNImplicitRegisterExtend = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterInfo {
    pub fullWidthRegister: u32,
    pub offset: usize,
    pub size: usize,
    pub extend: BNImplicitRegisterExtend,
}
#[test]
fn bindgen_test_layout_BNRegisterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNRegisterInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNRegisterInfo>(),
        32usize,
        concat!("Size of: ", stringify!(BNRegisterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRegisterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullWidthRegister) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterInfo),
            "::",
            stringify!(fullWidthRegister)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterInfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extend) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterInfo),
            "::",
            stringify!(extend)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterStackInfo {
    pub firstStorageReg: u32,
    pub firstTopRelativeReg: u32,
    pub storageCount: u32,
    pub topRelativeCount: u32,
    pub stackTopReg: u32,
}
#[test]
fn bindgen_test_layout_BNRegisterStackInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNRegisterStackInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNRegisterStackInfo>(),
        20usize,
        concat!("Size of: ", stringify!(BNRegisterStackInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterStackInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(BNRegisterStackInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstStorageReg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackInfo),
            "::",
            stringify!(firstStorageReg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstTopRelativeReg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackInfo),
            "::",
            stringify!(firstTopRelativeReg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackInfo),
            "::",
            stringify!(storageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topRelativeCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackInfo),
            "::",
            stringify!(topRelativeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stackTopReg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackInfo),
            "::",
            stringify!(stackTopReg)
        )
    );
}
pub const BNRegisterValueType_UndeterminedValue: BNRegisterValueType = 0;
pub const BNRegisterValueType_EntryValue: BNRegisterValueType = 1;
pub const BNRegisterValueType_ConstantValue: BNRegisterValueType = 2;
pub const BNRegisterValueType_ConstantPointerValue: BNRegisterValueType = 3;
pub const BNRegisterValueType_ExternalPointerValue: BNRegisterValueType = 4;
pub const BNRegisterValueType_StackFrameOffset: BNRegisterValueType = 5;
pub const BNRegisterValueType_ReturnAddressValue: BNRegisterValueType = 6;
pub const BNRegisterValueType_ImportedAddressValue: BNRegisterValueType = 7;
pub const BNRegisterValueType_SignedRangeValue: BNRegisterValueType = 8;
pub const BNRegisterValueType_UnsignedRangeValue: BNRegisterValueType = 9;
pub const BNRegisterValueType_LookupTableValue: BNRegisterValueType = 10;
pub const BNRegisterValueType_InSetOfValues: BNRegisterValueType = 11;
pub const BNRegisterValueType_NotInSetOfValues: BNRegisterValueType = 12;
pub const BNRegisterValueType_ConstantDataValue: BNRegisterValueType = 32768;
pub const BNRegisterValueType_ConstantDataZeroExtendValue: BNRegisterValueType = 32769;
pub const BNRegisterValueType_ConstantDataSignExtendValue: BNRegisterValueType = 32770;
pub const BNRegisterValueType_ConstantDataAggregateValue: BNRegisterValueType = 32771;
pub type BNRegisterValueType = ::std::os::raw::c_uint;
pub const BNDataFlowQueryOption_FromAddressesInLookupTableQueryOption: BNDataFlowQueryOption = 0;
pub type BNDataFlowQueryOption = ::std::os::raw::c_uint;
pub const BNPluginOrigin_OfficialPluginOrigin: BNPluginOrigin = 0;
pub const BNPluginOrigin_CommunityPluginOrigin: BNPluginOrigin = 1;
pub const BNPluginOrigin_OtherPluginOrigin: BNPluginOrigin = 2;
pub type BNPluginOrigin = ::std::os::raw::c_uint;
pub const BNPluginStatus_NotInstalledPluginStatus: BNPluginStatus = 0;
pub const BNPluginStatus_InstalledPluginStatus: BNPluginStatus = 1;
pub const BNPluginStatus_EnabledPluginStatus: BNPluginStatus = 2;
pub const BNPluginStatus_UpdateAvailablePluginStatus: BNPluginStatus = 16;
pub const BNPluginStatus_DeletePendingPluginStatus: BNPluginStatus = 32;
pub const BNPluginStatus_UpdatePendingPluginStatus: BNPluginStatus = 64;
pub const BNPluginStatus_DisablePendingPluginStatus: BNPluginStatus = 128;
pub const BNPluginStatus_PendingRestartPluginStatus: BNPluginStatus = 512;
pub const BNPluginStatus_BeingUpdatedPluginStatus: BNPluginStatus = 1024;
pub const BNPluginStatus_BeingDeletedPluginStatus: BNPluginStatus = 2048;
pub const BNPluginStatus_DependenciesBeingInstalledStatus: BNPluginStatus = 4096;
pub type BNPluginStatus = ::std::os::raw::c_uint;
pub const BNPluginType_CorePluginType: BNPluginType = 0;
pub const BNPluginType_UiPluginType: BNPluginType = 1;
pub const BNPluginType_ArchitecturePluginType: BNPluginType = 2;
pub const BNPluginType_BinaryViewPluginType: BNPluginType = 3;
pub const BNPluginType_HelperPluginType: BNPluginType = 4;
pub type BNPluginType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLookupTableEntry {
    pub fromValues: *mut i64,
    pub fromCount: usize,
    pub toValue: i64,
}
#[test]
fn bindgen_test_layout_BNLookupTableEntry() {
    const UNINIT: ::std::mem::MaybeUninit<BNLookupTableEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNLookupTableEntry>(),
        24usize,
        concat!("Size of: ", stringify!(BNLookupTableEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLookupTableEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLookupTableEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fromValues) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLookupTableEntry),
            "::",
            stringify!(fromValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fromCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLookupTableEntry),
            "::",
            stringify!(fromCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toValue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLookupTableEntry),
            "::",
            stringify!(toValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterValue {
    pub state: BNRegisterValueType,
    pub value: i64,
    pub offset: i64,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_BNRegisterValue() {
    const UNINIT: ::std::mem::MaybeUninit<BNRegisterValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNRegisterValue>(),
        32usize,
        concat!("Size of: ", stringify!(BNRegisterValue))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterValue>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRegisterValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValue),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValue),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValue),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValue),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterValueWithConfidence {
    pub value: BNRegisterValue,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNRegisterValueWithConfidence() {
    const UNINIT: ::std::mem::MaybeUninit<BNRegisterValueWithConfidence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNRegisterValueWithConfidence>(),
        40usize,
        concat!("Size of: ", stringify!(BNRegisterValueWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterValueWithConfidence>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRegisterValueWithConfidence))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValueWithConfidence),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterValueWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNValueRange {
    pub start: u64,
    pub end: u64,
    pub step: u64,
}
#[test]
fn bindgen_test_layout_BNValueRange() {
    const UNINIT: ::std::mem::MaybeUninit<BNValueRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNValueRange>(),
        24usize,
        concat!("Size of: ", stringify!(BNValueRange))
    );
    assert_eq!(
        ::std::mem::align_of::<BNValueRange>(),
        8usize,
        concat!("Alignment of ", stringify!(BNValueRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNValueRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNValueRange),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNValueRange),
            "::",
            stringify!(step)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNPossibleValueSet {
    pub state: BNRegisterValueType,
    pub value: i64,
    pub offset: i64,
    pub size: usize,
    pub ranges: *mut BNValueRange,
    pub valueSet: *mut i64,
    pub table: *mut BNLookupTableEntry,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_BNPossibleValueSet() {
    const UNINIT: ::std::mem::MaybeUninit<BNPossibleValueSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNPossibleValueSet>(),
        64usize,
        concat!("Size of: ", stringify!(BNPossibleValueSet))
    );
    assert_eq!(
        ::std::mem::align_of::<BNPossibleValueSet>(),
        8usize,
        concat!("Alignment of ", stringify!(BNPossibleValueSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ranges) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(ranges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valueSet) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(valueSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPossibleValueSet),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterOrConstant {
    pub constant: bool,
    pub reg: u32,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_BNRegisterOrConstant() {
    const UNINIT: ::std::mem::MaybeUninit<BNRegisterOrConstant> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNRegisterOrConstant>(),
        16usize,
        concat!("Size of: ", stringify!(BNRegisterOrConstant))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterOrConstant>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRegisterOrConstant))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterOrConstant),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterOrConstant),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterOrConstant),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDataVariable {
    pub address: u64,
    pub type_: *mut BNType,
    pub autoDiscovered: bool,
    pub typeConfidence: u8,
}
#[test]
fn bindgen_test_layout_BNDataVariable() {
    const UNINIT: ::std::mem::MaybeUninit<BNDataVariable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDataVariable>(),
        24usize,
        concat!("Size of: ", stringify!(BNDataVariable))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDataVariable>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDataVariable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariable),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariable),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoDiscovered) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariable),
            "::",
            stringify!(autoDiscovered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeConfidence) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariable),
            "::",
            stringify!(typeConfidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDataVariableAndName {
    pub address: u64,
    pub type_: *mut BNType,
    pub name: *mut ::std::os::raw::c_char,
    pub autoDiscovered: bool,
    pub typeConfidence: u8,
}
#[test]
fn bindgen_test_layout_BNDataVariableAndName() {
    const UNINIT: ::std::mem::MaybeUninit<BNDataVariableAndName> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDataVariableAndName>(),
        32usize,
        concat!("Size of: ", stringify!(BNDataVariableAndName))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDataVariableAndName>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDataVariableAndName))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndName),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndName),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndName),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoDiscovered) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndName),
            "::",
            stringify!(autoDiscovered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeConfidence) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndName),
            "::",
            stringify!(typeConfidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDataVariableAndNameAndDebugParser {
    pub address: u64,
    pub type_: *mut BNType,
    pub name: *mut ::std::os::raw::c_char,
    pub parser: *mut ::std::os::raw::c_char,
    pub autoDiscovered: bool,
    pub typeConfidence: u8,
}
#[test]
fn bindgen_test_layout_BNDataVariableAndNameAndDebugParser() {
    const UNINIT: ::std::mem::MaybeUninit<BNDataVariableAndNameAndDebugParser> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDataVariableAndNameAndDebugParser>(),
        40usize,
        concat!("Size of: ", stringify!(BNDataVariableAndNameAndDebugParser))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDataVariableAndNameAndDebugParser>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNDataVariableAndNameAndDebugParser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndNameAndDebugParser),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndNameAndDebugParser),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndNameAndDebugParser),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parser) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndNameAndDebugParser),
            "::",
            stringify!(parser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoDiscovered) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndNameAndDebugParser),
            "::",
            stringify!(autoDiscovered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeConfidence) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDataVariableAndNameAndDebugParser),
            "::",
            stringify!(typeConfidence)
        )
    );
}
pub const BNMediumLevelILOperation_MLIL_NOP: BNMediumLevelILOperation = 0;
pub const BNMediumLevelILOperation_MLIL_SET_VAR: BNMediumLevelILOperation = 1;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_FIELD: BNMediumLevelILOperation = 2;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_SPLIT: BNMediumLevelILOperation = 3;
pub const BNMediumLevelILOperation_MLIL_LOAD: BNMediumLevelILOperation = 4;
pub const BNMediumLevelILOperation_MLIL_LOAD_STRUCT: BNMediumLevelILOperation = 5;
pub const BNMediumLevelILOperation_MLIL_STORE: BNMediumLevelILOperation = 6;
pub const BNMediumLevelILOperation_MLIL_STORE_STRUCT: BNMediumLevelILOperation = 7;
pub const BNMediumLevelILOperation_MLIL_VAR: BNMediumLevelILOperation = 8;
pub const BNMediumLevelILOperation_MLIL_VAR_FIELD: BNMediumLevelILOperation = 9;
pub const BNMediumLevelILOperation_MLIL_VAR_SPLIT: BNMediumLevelILOperation = 10;
pub const BNMediumLevelILOperation_MLIL_ADDRESS_OF: BNMediumLevelILOperation = 11;
pub const BNMediumLevelILOperation_MLIL_ADDRESS_OF_FIELD: BNMediumLevelILOperation = 12;
pub const BNMediumLevelILOperation_MLIL_CONST: BNMediumLevelILOperation = 13;
pub const BNMediumLevelILOperation_MLIL_CONST_DATA: BNMediumLevelILOperation = 14;
pub const BNMediumLevelILOperation_MLIL_CONST_PTR: BNMediumLevelILOperation = 15;
pub const BNMediumLevelILOperation_MLIL_EXTERN_PTR: BNMediumLevelILOperation = 16;
pub const BNMediumLevelILOperation_MLIL_FLOAT_CONST: BNMediumLevelILOperation = 17;
pub const BNMediumLevelILOperation_MLIL_IMPORT: BNMediumLevelILOperation = 18;
pub const BNMediumLevelILOperation_MLIL_ADD: BNMediumLevelILOperation = 19;
pub const BNMediumLevelILOperation_MLIL_ADC: BNMediumLevelILOperation = 20;
pub const BNMediumLevelILOperation_MLIL_SUB: BNMediumLevelILOperation = 21;
pub const BNMediumLevelILOperation_MLIL_SBB: BNMediumLevelILOperation = 22;
pub const BNMediumLevelILOperation_MLIL_AND: BNMediumLevelILOperation = 23;
pub const BNMediumLevelILOperation_MLIL_OR: BNMediumLevelILOperation = 24;
pub const BNMediumLevelILOperation_MLIL_XOR: BNMediumLevelILOperation = 25;
pub const BNMediumLevelILOperation_MLIL_LSL: BNMediumLevelILOperation = 26;
pub const BNMediumLevelILOperation_MLIL_LSR: BNMediumLevelILOperation = 27;
pub const BNMediumLevelILOperation_MLIL_ASR: BNMediumLevelILOperation = 28;
pub const BNMediumLevelILOperation_MLIL_ROL: BNMediumLevelILOperation = 29;
pub const BNMediumLevelILOperation_MLIL_RLC: BNMediumLevelILOperation = 30;
pub const BNMediumLevelILOperation_MLIL_ROR: BNMediumLevelILOperation = 31;
pub const BNMediumLevelILOperation_MLIL_RRC: BNMediumLevelILOperation = 32;
pub const BNMediumLevelILOperation_MLIL_MUL: BNMediumLevelILOperation = 33;
pub const BNMediumLevelILOperation_MLIL_MULU_DP: BNMediumLevelILOperation = 34;
pub const BNMediumLevelILOperation_MLIL_MULS_DP: BNMediumLevelILOperation = 35;
pub const BNMediumLevelILOperation_MLIL_DIVU: BNMediumLevelILOperation = 36;
pub const BNMediumLevelILOperation_MLIL_DIVU_DP: BNMediumLevelILOperation = 37;
pub const BNMediumLevelILOperation_MLIL_DIVS: BNMediumLevelILOperation = 38;
pub const BNMediumLevelILOperation_MLIL_DIVS_DP: BNMediumLevelILOperation = 39;
pub const BNMediumLevelILOperation_MLIL_MODU: BNMediumLevelILOperation = 40;
pub const BNMediumLevelILOperation_MLIL_MODU_DP: BNMediumLevelILOperation = 41;
pub const BNMediumLevelILOperation_MLIL_MODS: BNMediumLevelILOperation = 42;
pub const BNMediumLevelILOperation_MLIL_MODS_DP: BNMediumLevelILOperation = 43;
pub const BNMediumLevelILOperation_MLIL_NEG: BNMediumLevelILOperation = 44;
pub const BNMediumLevelILOperation_MLIL_NOT: BNMediumLevelILOperation = 45;
pub const BNMediumLevelILOperation_MLIL_SX: BNMediumLevelILOperation = 46;
pub const BNMediumLevelILOperation_MLIL_ZX: BNMediumLevelILOperation = 47;
pub const BNMediumLevelILOperation_MLIL_LOW_PART: BNMediumLevelILOperation = 48;
pub const BNMediumLevelILOperation_MLIL_JUMP: BNMediumLevelILOperation = 49;
pub const BNMediumLevelILOperation_MLIL_JUMP_TO: BNMediumLevelILOperation = 50;
pub const BNMediumLevelILOperation_MLIL_RET_HINT: BNMediumLevelILOperation = 51;
pub const BNMediumLevelILOperation_MLIL_CALL: BNMediumLevelILOperation = 52;
pub const BNMediumLevelILOperation_MLIL_CALL_UNTYPED: BNMediumLevelILOperation = 53;
pub const BNMediumLevelILOperation_MLIL_CALL_OUTPUT: BNMediumLevelILOperation = 54;
pub const BNMediumLevelILOperation_MLIL_CALL_PARAM: BNMediumLevelILOperation = 55;
pub const BNMediumLevelILOperation_MLIL_RET: BNMediumLevelILOperation = 56;
pub const BNMediumLevelILOperation_MLIL_NORET: BNMediumLevelILOperation = 57;
pub const BNMediumLevelILOperation_MLIL_IF: BNMediumLevelILOperation = 58;
pub const BNMediumLevelILOperation_MLIL_GOTO: BNMediumLevelILOperation = 59;
pub const BNMediumLevelILOperation_MLIL_CMP_E: BNMediumLevelILOperation = 60;
pub const BNMediumLevelILOperation_MLIL_CMP_NE: BNMediumLevelILOperation = 61;
pub const BNMediumLevelILOperation_MLIL_CMP_SLT: BNMediumLevelILOperation = 62;
pub const BNMediumLevelILOperation_MLIL_CMP_ULT: BNMediumLevelILOperation = 63;
pub const BNMediumLevelILOperation_MLIL_CMP_SLE: BNMediumLevelILOperation = 64;
pub const BNMediumLevelILOperation_MLIL_CMP_ULE: BNMediumLevelILOperation = 65;
pub const BNMediumLevelILOperation_MLIL_CMP_SGE: BNMediumLevelILOperation = 66;
pub const BNMediumLevelILOperation_MLIL_CMP_UGE: BNMediumLevelILOperation = 67;
pub const BNMediumLevelILOperation_MLIL_CMP_SGT: BNMediumLevelILOperation = 68;
pub const BNMediumLevelILOperation_MLIL_CMP_UGT: BNMediumLevelILOperation = 69;
pub const BNMediumLevelILOperation_MLIL_TEST_BIT: BNMediumLevelILOperation = 70;
pub const BNMediumLevelILOperation_MLIL_BOOL_TO_INT: BNMediumLevelILOperation = 71;
pub const BNMediumLevelILOperation_MLIL_ADD_OVERFLOW: BNMediumLevelILOperation = 72;
pub const BNMediumLevelILOperation_MLIL_SYSCALL: BNMediumLevelILOperation = 73;
pub const BNMediumLevelILOperation_MLIL_SYSCALL_UNTYPED: BNMediumLevelILOperation = 74;
pub const BNMediumLevelILOperation_MLIL_TAILCALL: BNMediumLevelILOperation = 75;
pub const BNMediumLevelILOperation_MLIL_TAILCALL_UNTYPED: BNMediumLevelILOperation = 76;
pub const BNMediumLevelILOperation_MLIL_INTRINSIC: BNMediumLevelILOperation = 77;
pub const BNMediumLevelILOperation_MLIL_FREE_VAR_SLOT: BNMediumLevelILOperation = 78;
pub const BNMediumLevelILOperation_MLIL_BP: BNMediumLevelILOperation = 79;
pub const BNMediumLevelILOperation_MLIL_TRAP: BNMediumLevelILOperation = 80;
pub const BNMediumLevelILOperation_MLIL_UNDEF: BNMediumLevelILOperation = 81;
pub const BNMediumLevelILOperation_MLIL_UNIMPL: BNMediumLevelILOperation = 82;
pub const BNMediumLevelILOperation_MLIL_UNIMPL_MEM: BNMediumLevelILOperation = 83;
pub const BNMediumLevelILOperation_MLIL_FADD: BNMediumLevelILOperation = 84;
pub const BNMediumLevelILOperation_MLIL_FSUB: BNMediumLevelILOperation = 85;
pub const BNMediumLevelILOperation_MLIL_FMUL: BNMediumLevelILOperation = 86;
pub const BNMediumLevelILOperation_MLIL_FDIV: BNMediumLevelILOperation = 87;
pub const BNMediumLevelILOperation_MLIL_FSQRT: BNMediumLevelILOperation = 88;
pub const BNMediumLevelILOperation_MLIL_FNEG: BNMediumLevelILOperation = 89;
pub const BNMediumLevelILOperation_MLIL_FABS: BNMediumLevelILOperation = 90;
pub const BNMediumLevelILOperation_MLIL_FLOAT_TO_INT: BNMediumLevelILOperation = 91;
pub const BNMediumLevelILOperation_MLIL_INT_TO_FLOAT: BNMediumLevelILOperation = 92;
pub const BNMediumLevelILOperation_MLIL_FLOAT_CONV: BNMediumLevelILOperation = 93;
pub const BNMediumLevelILOperation_MLIL_ROUND_TO_INT: BNMediumLevelILOperation = 94;
pub const BNMediumLevelILOperation_MLIL_FLOOR: BNMediumLevelILOperation = 95;
pub const BNMediumLevelILOperation_MLIL_CEIL: BNMediumLevelILOperation = 96;
pub const BNMediumLevelILOperation_MLIL_FTRUNC: BNMediumLevelILOperation = 97;
pub const BNMediumLevelILOperation_MLIL_FCMP_E: BNMediumLevelILOperation = 98;
pub const BNMediumLevelILOperation_MLIL_FCMP_NE: BNMediumLevelILOperation = 99;
pub const BNMediumLevelILOperation_MLIL_FCMP_LT: BNMediumLevelILOperation = 100;
pub const BNMediumLevelILOperation_MLIL_FCMP_LE: BNMediumLevelILOperation = 101;
pub const BNMediumLevelILOperation_MLIL_FCMP_GE: BNMediumLevelILOperation = 102;
pub const BNMediumLevelILOperation_MLIL_FCMP_GT: BNMediumLevelILOperation = 103;
pub const BNMediumLevelILOperation_MLIL_FCMP_O: BNMediumLevelILOperation = 104;
pub const BNMediumLevelILOperation_MLIL_FCMP_UO: BNMediumLevelILOperation = 105;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_SSA: BNMediumLevelILOperation = 106;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_SSA_FIELD: BNMediumLevelILOperation = 107;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_SPLIT_SSA: BNMediumLevelILOperation = 108;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_ALIASED: BNMediumLevelILOperation = 109;
pub const BNMediumLevelILOperation_MLIL_SET_VAR_ALIASED_FIELD: BNMediumLevelILOperation = 110;
pub const BNMediumLevelILOperation_MLIL_VAR_SSA: BNMediumLevelILOperation = 111;
pub const BNMediumLevelILOperation_MLIL_VAR_SSA_FIELD: BNMediumLevelILOperation = 112;
pub const BNMediumLevelILOperation_MLIL_VAR_ALIASED: BNMediumLevelILOperation = 113;
pub const BNMediumLevelILOperation_MLIL_VAR_ALIASED_FIELD: BNMediumLevelILOperation = 114;
pub const BNMediumLevelILOperation_MLIL_VAR_SPLIT_SSA: BNMediumLevelILOperation = 115;
pub const BNMediumLevelILOperation_MLIL_CALL_SSA: BNMediumLevelILOperation = 116;
pub const BNMediumLevelILOperation_MLIL_CALL_UNTYPED_SSA: BNMediumLevelILOperation = 117;
pub const BNMediumLevelILOperation_MLIL_SYSCALL_SSA: BNMediumLevelILOperation = 118;
pub const BNMediumLevelILOperation_MLIL_SYSCALL_UNTYPED_SSA: BNMediumLevelILOperation = 119;
pub const BNMediumLevelILOperation_MLIL_TAILCALL_SSA: BNMediumLevelILOperation = 120;
pub const BNMediumLevelILOperation_MLIL_TAILCALL_UNTYPED_SSA: BNMediumLevelILOperation = 121;
pub const BNMediumLevelILOperation_MLIL_CALL_PARAM_SSA: BNMediumLevelILOperation = 122;
pub const BNMediumLevelILOperation_MLIL_CALL_OUTPUT_SSA: BNMediumLevelILOperation = 123;
pub const BNMediumLevelILOperation_MLIL_LOAD_SSA: BNMediumLevelILOperation = 124;
pub const BNMediumLevelILOperation_MLIL_LOAD_STRUCT_SSA: BNMediumLevelILOperation = 125;
pub const BNMediumLevelILOperation_MLIL_STORE_SSA: BNMediumLevelILOperation = 126;
pub const BNMediumLevelILOperation_MLIL_STORE_STRUCT_SSA: BNMediumLevelILOperation = 127;
pub const BNMediumLevelILOperation_MLIL_INTRINSIC_SSA: BNMediumLevelILOperation = 128;
pub const BNMediumLevelILOperation_MLIL_FREE_VAR_SLOT_SSA: BNMediumLevelILOperation = 129;
pub const BNMediumLevelILOperation_MLIL_VAR_PHI: BNMediumLevelILOperation = 130;
pub const BNMediumLevelILOperation_MLIL_MEM_PHI: BNMediumLevelILOperation = 131;
pub type BNMediumLevelILOperation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMediumLevelILInstruction {
    pub operation: BNMediumLevelILOperation,
    pub attributes: u32,
    pub sourceOperand: u32,
    pub size: usize,
    pub operands: [u64; 5usize],
    pub address: u64,
}
#[test]
fn bindgen_test_layout_BNMediumLevelILInstruction() {
    const UNINIT: ::std::mem::MaybeUninit<BNMediumLevelILInstruction> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNMediumLevelILInstruction>(),
        72usize,
        concat!("Size of: ", stringify!(BNMediumLevelILInstruction))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMediumLevelILInstruction>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMediumLevelILInstruction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceOperand) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(sourceOperand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operands) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(operands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILInstruction),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMediumLevelILLabel {
    pub resolved: bool,
    pub ref_: usize,
    pub operand: usize,
}
#[test]
fn bindgen_test_layout_BNMediumLevelILLabel() {
    const UNINIT: ::std::mem::MaybeUninit<BNMediumLevelILLabel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNMediumLevelILLabel>(),
        24usize,
        concat!("Size of: ", stringify!(BNMediumLevelILLabel))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMediumLevelILLabel>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMediumLevelILLabel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILLabel),
            "::",
            stringify!(resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILLabel),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operand) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMediumLevelILLabel),
            "::",
            stringify!(operand)
        )
    );
}
pub const BNVariableSourceType_StackVariableSourceType: BNVariableSourceType = 0;
pub const BNVariableSourceType_RegisterVariableSourceType: BNVariableSourceType = 1;
pub const BNVariableSourceType_FlagVariableSourceType: BNVariableSourceType = 2;
pub type BNVariableSourceType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNVariable {
    pub type_: BNVariableSourceType,
    pub index: u32,
    pub storage: i64,
}
#[test]
fn bindgen_test_layout_BNVariable() {
    const UNINIT: ::std::mem::MaybeUninit<BNVariable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNVariable>(),
        16usize,
        concat!("Size of: ", stringify!(BNVariable))
    );
    assert_eq!(
        ::std::mem::align_of::<BNVariable>(),
        8usize,
        concat!("Alignment of ", stringify!(BNVariable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariable),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariable),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storage) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariable),
            "::",
            stringify!(storage)
        )
    );
}
pub const BNHighLevelILOperation_HLIL_NOP: BNHighLevelILOperation = 0;
pub const BNHighLevelILOperation_HLIL_BLOCK: BNHighLevelILOperation = 1;
pub const BNHighLevelILOperation_HLIL_IF: BNHighLevelILOperation = 2;
pub const BNHighLevelILOperation_HLIL_WHILE: BNHighLevelILOperation = 3;
pub const BNHighLevelILOperation_HLIL_DO_WHILE: BNHighLevelILOperation = 4;
pub const BNHighLevelILOperation_HLIL_FOR: BNHighLevelILOperation = 5;
pub const BNHighLevelILOperation_HLIL_SWITCH: BNHighLevelILOperation = 6;
pub const BNHighLevelILOperation_HLIL_CASE: BNHighLevelILOperation = 7;
pub const BNHighLevelILOperation_HLIL_BREAK: BNHighLevelILOperation = 8;
pub const BNHighLevelILOperation_HLIL_CONTINUE: BNHighLevelILOperation = 9;
pub const BNHighLevelILOperation_HLIL_JUMP: BNHighLevelILOperation = 10;
pub const BNHighLevelILOperation_HLIL_RET: BNHighLevelILOperation = 11;
pub const BNHighLevelILOperation_HLIL_NORET: BNHighLevelILOperation = 12;
pub const BNHighLevelILOperation_HLIL_GOTO: BNHighLevelILOperation = 13;
pub const BNHighLevelILOperation_HLIL_LABEL: BNHighLevelILOperation = 14;
pub const BNHighLevelILOperation_HLIL_VAR_DECLARE: BNHighLevelILOperation = 15;
pub const BNHighLevelILOperation_HLIL_VAR_INIT: BNHighLevelILOperation = 16;
pub const BNHighLevelILOperation_HLIL_ASSIGN: BNHighLevelILOperation = 17;
pub const BNHighLevelILOperation_HLIL_ASSIGN_UNPACK: BNHighLevelILOperation = 18;
pub const BNHighLevelILOperation_HLIL_VAR: BNHighLevelILOperation = 19;
pub const BNHighLevelILOperation_HLIL_STRUCT_FIELD: BNHighLevelILOperation = 20;
pub const BNHighLevelILOperation_HLIL_ARRAY_INDEX: BNHighLevelILOperation = 21;
pub const BNHighLevelILOperation_HLIL_SPLIT: BNHighLevelILOperation = 22;
pub const BNHighLevelILOperation_HLIL_DEREF: BNHighLevelILOperation = 23;
pub const BNHighLevelILOperation_HLIL_DEREF_FIELD: BNHighLevelILOperation = 24;
pub const BNHighLevelILOperation_HLIL_ADDRESS_OF: BNHighLevelILOperation = 25;
pub const BNHighLevelILOperation_HLIL_CONST: BNHighLevelILOperation = 26;
pub const BNHighLevelILOperation_HLIL_CONST_DATA: BNHighLevelILOperation = 27;
pub const BNHighLevelILOperation_HLIL_CONST_PTR: BNHighLevelILOperation = 28;
pub const BNHighLevelILOperation_HLIL_EXTERN_PTR: BNHighLevelILOperation = 29;
pub const BNHighLevelILOperation_HLIL_FLOAT_CONST: BNHighLevelILOperation = 30;
pub const BNHighLevelILOperation_HLIL_IMPORT: BNHighLevelILOperation = 31;
pub const BNHighLevelILOperation_HLIL_ADD: BNHighLevelILOperation = 32;
pub const BNHighLevelILOperation_HLIL_ADC: BNHighLevelILOperation = 33;
pub const BNHighLevelILOperation_HLIL_SUB: BNHighLevelILOperation = 34;
pub const BNHighLevelILOperation_HLIL_SBB: BNHighLevelILOperation = 35;
pub const BNHighLevelILOperation_HLIL_AND: BNHighLevelILOperation = 36;
pub const BNHighLevelILOperation_HLIL_OR: BNHighLevelILOperation = 37;
pub const BNHighLevelILOperation_HLIL_XOR: BNHighLevelILOperation = 38;
pub const BNHighLevelILOperation_HLIL_LSL: BNHighLevelILOperation = 39;
pub const BNHighLevelILOperation_HLIL_LSR: BNHighLevelILOperation = 40;
pub const BNHighLevelILOperation_HLIL_ASR: BNHighLevelILOperation = 41;
pub const BNHighLevelILOperation_HLIL_ROL: BNHighLevelILOperation = 42;
pub const BNHighLevelILOperation_HLIL_RLC: BNHighLevelILOperation = 43;
pub const BNHighLevelILOperation_HLIL_ROR: BNHighLevelILOperation = 44;
pub const BNHighLevelILOperation_HLIL_RRC: BNHighLevelILOperation = 45;
pub const BNHighLevelILOperation_HLIL_MUL: BNHighLevelILOperation = 46;
pub const BNHighLevelILOperation_HLIL_MULU_DP: BNHighLevelILOperation = 47;
pub const BNHighLevelILOperation_HLIL_MULS_DP: BNHighLevelILOperation = 48;
pub const BNHighLevelILOperation_HLIL_DIVU: BNHighLevelILOperation = 49;
pub const BNHighLevelILOperation_HLIL_DIVU_DP: BNHighLevelILOperation = 50;
pub const BNHighLevelILOperation_HLIL_DIVS: BNHighLevelILOperation = 51;
pub const BNHighLevelILOperation_HLIL_DIVS_DP: BNHighLevelILOperation = 52;
pub const BNHighLevelILOperation_HLIL_MODU: BNHighLevelILOperation = 53;
pub const BNHighLevelILOperation_HLIL_MODU_DP: BNHighLevelILOperation = 54;
pub const BNHighLevelILOperation_HLIL_MODS: BNHighLevelILOperation = 55;
pub const BNHighLevelILOperation_HLIL_MODS_DP: BNHighLevelILOperation = 56;
pub const BNHighLevelILOperation_HLIL_NEG: BNHighLevelILOperation = 57;
pub const BNHighLevelILOperation_HLIL_NOT: BNHighLevelILOperation = 58;
pub const BNHighLevelILOperation_HLIL_SX: BNHighLevelILOperation = 59;
pub const BNHighLevelILOperation_HLIL_ZX: BNHighLevelILOperation = 60;
pub const BNHighLevelILOperation_HLIL_LOW_PART: BNHighLevelILOperation = 61;
pub const BNHighLevelILOperation_HLIL_CALL: BNHighLevelILOperation = 62;
pub const BNHighLevelILOperation_HLIL_CMP_E: BNHighLevelILOperation = 63;
pub const BNHighLevelILOperation_HLIL_CMP_NE: BNHighLevelILOperation = 64;
pub const BNHighLevelILOperation_HLIL_CMP_SLT: BNHighLevelILOperation = 65;
pub const BNHighLevelILOperation_HLIL_CMP_ULT: BNHighLevelILOperation = 66;
pub const BNHighLevelILOperation_HLIL_CMP_SLE: BNHighLevelILOperation = 67;
pub const BNHighLevelILOperation_HLIL_CMP_ULE: BNHighLevelILOperation = 68;
pub const BNHighLevelILOperation_HLIL_CMP_SGE: BNHighLevelILOperation = 69;
pub const BNHighLevelILOperation_HLIL_CMP_UGE: BNHighLevelILOperation = 70;
pub const BNHighLevelILOperation_HLIL_CMP_SGT: BNHighLevelILOperation = 71;
pub const BNHighLevelILOperation_HLIL_CMP_UGT: BNHighLevelILOperation = 72;
pub const BNHighLevelILOperation_HLIL_TEST_BIT: BNHighLevelILOperation = 73;
pub const BNHighLevelILOperation_HLIL_BOOL_TO_INT: BNHighLevelILOperation = 74;
pub const BNHighLevelILOperation_HLIL_ADD_OVERFLOW: BNHighLevelILOperation = 75;
pub const BNHighLevelILOperation_HLIL_SYSCALL: BNHighLevelILOperation = 76;
pub const BNHighLevelILOperation_HLIL_TAILCALL: BNHighLevelILOperation = 77;
pub const BNHighLevelILOperation_HLIL_INTRINSIC: BNHighLevelILOperation = 78;
pub const BNHighLevelILOperation_HLIL_BP: BNHighLevelILOperation = 79;
pub const BNHighLevelILOperation_HLIL_TRAP: BNHighLevelILOperation = 80;
pub const BNHighLevelILOperation_HLIL_UNDEF: BNHighLevelILOperation = 81;
pub const BNHighLevelILOperation_HLIL_UNIMPL: BNHighLevelILOperation = 82;
pub const BNHighLevelILOperation_HLIL_UNIMPL_MEM: BNHighLevelILOperation = 83;
pub const BNHighLevelILOperation_HLIL_FADD: BNHighLevelILOperation = 84;
pub const BNHighLevelILOperation_HLIL_FSUB: BNHighLevelILOperation = 85;
pub const BNHighLevelILOperation_HLIL_FMUL: BNHighLevelILOperation = 86;
pub const BNHighLevelILOperation_HLIL_FDIV: BNHighLevelILOperation = 87;
pub const BNHighLevelILOperation_HLIL_FSQRT: BNHighLevelILOperation = 88;
pub const BNHighLevelILOperation_HLIL_FNEG: BNHighLevelILOperation = 89;
pub const BNHighLevelILOperation_HLIL_FABS: BNHighLevelILOperation = 90;
pub const BNHighLevelILOperation_HLIL_FLOAT_TO_INT: BNHighLevelILOperation = 91;
pub const BNHighLevelILOperation_HLIL_INT_TO_FLOAT: BNHighLevelILOperation = 92;
pub const BNHighLevelILOperation_HLIL_FLOAT_CONV: BNHighLevelILOperation = 93;
pub const BNHighLevelILOperation_HLIL_ROUND_TO_INT: BNHighLevelILOperation = 94;
pub const BNHighLevelILOperation_HLIL_FLOOR: BNHighLevelILOperation = 95;
pub const BNHighLevelILOperation_HLIL_CEIL: BNHighLevelILOperation = 96;
pub const BNHighLevelILOperation_HLIL_FTRUNC: BNHighLevelILOperation = 97;
pub const BNHighLevelILOperation_HLIL_FCMP_E: BNHighLevelILOperation = 98;
pub const BNHighLevelILOperation_HLIL_FCMP_NE: BNHighLevelILOperation = 99;
pub const BNHighLevelILOperation_HLIL_FCMP_LT: BNHighLevelILOperation = 100;
pub const BNHighLevelILOperation_HLIL_FCMP_LE: BNHighLevelILOperation = 101;
pub const BNHighLevelILOperation_HLIL_FCMP_GE: BNHighLevelILOperation = 102;
pub const BNHighLevelILOperation_HLIL_FCMP_GT: BNHighLevelILOperation = 103;
pub const BNHighLevelILOperation_HLIL_FCMP_O: BNHighLevelILOperation = 104;
pub const BNHighLevelILOperation_HLIL_FCMP_UO: BNHighLevelILOperation = 105;
pub const BNHighLevelILOperation_HLIL_UNREACHABLE: BNHighLevelILOperation = 106;
pub const BNHighLevelILOperation_HLIL_WHILE_SSA: BNHighLevelILOperation = 107;
pub const BNHighLevelILOperation_HLIL_DO_WHILE_SSA: BNHighLevelILOperation = 108;
pub const BNHighLevelILOperation_HLIL_FOR_SSA: BNHighLevelILOperation = 109;
pub const BNHighLevelILOperation_HLIL_VAR_INIT_SSA: BNHighLevelILOperation = 110;
pub const BNHighLevelILOperation_HLIL_ASSIGN_MEM_SSA: BNHighLevelILOperation = 111;
pub const BNHighLevelILOperation_HLIL_ASSIGN_UNPACK_MEM_SSA: BNHighLevelILOperation = 112;
pub const BNHighLevelILOperation_HLIL_VAR_SSA: BNHighLevelILOperation = 113;
pub const BNHighLevelILOperation_HLIL_ARRAY_INDEX_SSA: BNHighLevelILOperation = 114;
pub const BNHighLevelILOperation_HLIL_DEREF_SSA: BNHighLevelILOperation = 115;
pub const BNHighLevelILOperation_HLIL_DEREF_FIELD_SSA: BNHighLevelILOperation = 116;
pub const BNHighLevelILOperation_HLIL_CALL_SSA: BNHighLevelILOperation = 117;
pub const BNHighLevelILOperation_HLIL_SYSCALL_SSA: BNHighLevelILOperation = 118;
pub const BNHighLevelILOperation_HLIL_INTRINSIC_SSA: BNHighLevelILOperation = 119;
pub const BNHighLevelILOperation_HLIL_VAR_PHI: BNHighLevelILOperation = 120;
pub const BNHighLevelILOperation_HLIL_MEM_PHI: BNHighLevelILOperation = 121;
pub type BNHighLevelILOperation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNHighLevelILInstruction {
    pub operation: BNHighLevelILOperation,
    pub attributes: u32,
    pub sourceOperand: u32,
    pub size: usize,
    pub operands: [u64; 5usize],
    pub address: u64,
    pub parent: usize,
}
#[test]
fn bindgen_test_layout_BNHighLevelILInstruction() {
    const UNINIT: ::std::mem::MaybeUninit<BNHighLevelILInstruction> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNHighLevelILInstruction>(),
        80usize,
        concat!("Size of: ", stringify!(BNHighLevelILInstruction))
    );
    assert_eq!(
        ::std::mem::align_of::<BNHighLevelILInstruction>(),
        8usize,
        concat!("Alignment of ", stringify!(BNHighLevelILInstruction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceOperand) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(sourceOperand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operands) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(operands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighLevelILInstruction),
            "::",
            stringify!(parent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLogListener {
    pub context: *mut ::std::os::raw::c_void,
    pub log: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            sessionId: usize,
            level: BNLogLevel,
            msg: *const ::std::os::raw::c_char,
            logger_name: *const ::std::os::raw::c_char,
            tid: usize,
        ),
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub getLogLevel: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> BNLogLevel,
    >,
}
#[test]
fn bindgen_test_layout_BNLogListener() {
    const UNINIT: ::std::mem::MaybeUninit<BNLogListener> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNLogListener>(),
        32usize,
        concat!("Size of: ", stringify!(BNLogListener))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLogListener>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLogListener))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLogListener),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLogListener),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLogListener),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getLogLevel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLogListener),
            "::",
            stringify!(getLogLevel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNavigationHandler {
    pub context: *mut ::std::os::raw::c_void,
    pub getCurrentView: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char,
    >,
    pub getCurrentOffset:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u64>,
    pub navigate: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *const ::std::os::raw::c_char,
            offset: u64,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNNavigationHandler() {
    const UNINIT: ::std::mem::MaybeUninit<BNNavigationHandler> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNNavigationHandler>(),
        32usize,
        concat!("Size of: ", stringify!(BNNavigationHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<BNNavigationHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(BNNavigationHandler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNavigationHandler),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getCurrentView) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNavigationHandler),
            "::",
            stringify!(getCurrentView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getCurrentOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNavigationHandler),
            "::",
            stringify!(getCurrentOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).navigate) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNavigationHandler),
            "::",
            stringify!(navigate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNameList {
    pub name: *mut *mut ::std::os::raw::c_char,
    pub join: *mut ::std::os::raw::c_char,
    pub nameCount: usize,
}
#[test]
fn bindgen_test_layout_BNNameList() {
    const UNINIT: ::std::mem::MaybeUninit<BNNameList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNNameList>(),
        24usize,
        concat!("Size of: ", stringify!(BNNameList))
    );
    assert_eq!(
        ::std::mem::align_of::<BNNameList>(),
        8usize,
        concat!("Alignment of ", stringify!(BNNameList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameList),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).join) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameList),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameList),
            "::",
            stringify!(nameCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNameSpace {
    pub name: *mut *mut ::std::os::raw::c_char,
    pub join: *mut ::std::os::raw::c_char,
    pub nameCount: usize,
}
#[test]
fn bindgen_test_layout_BNNameSpace() {
    const UNINIT: ::std::mem::MaybeUninit<BNNameSpace> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNNameSpace>(),
        24usize,
        concat!("Size of: ", stringify!(BNNameSpace))
    );
    assert_eq!(
        ::std::mem::align_of::<BNNameSpace>(),
        8usize,
        concat!("Alignment of ", stringify!(BNNameSpace))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameSpace),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).join) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameSpace),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameSpace),
            "::",
            stringify!(nameCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNQualifiedName {
    pub name: *mut *mut ::std::os::raw::c_char,
    pub join: *mut ::std::os::raw::c_char,
    pub nameCount: usize,
}
#[test]
fn bindgen_test_layout_BNQualifiedName() {
    const UNINIT: ::std::mem::MaybeUninit<BNQualifiedName> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNQualifiedName>(),
        24usize,
        concat!("Size of: ", stringify!(BNQualifiedName))
    );
    assert_eq!(
        ::std::mem::align_of::<BNQualifiedName>(),
        8usize,
        concat!("Alignment of ", stringify!(BNQualifiedName))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedName),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).join) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedName),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedName),
            "::",
            stringify!(nameCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryDataNotification {
    pub context: *mut ::std::os::raw::c_void,
    pub notificationBarrier: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView) -> u64,
    >,
    pub dataWritten: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            offset: u64,
            len: usize,
        ),
    >,
    pub dataInserted: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            offset: u64,
            len: usize,
        ),
    >,
    pub dataRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            offset: u64,
            len: u64,
        ),
    >,
    pub functionAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ),
    >,
    pub functionRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ),
    >,
    pub functionUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ),
    >,
    pub functionUpdateRequested: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ),
    >,
    pub dataVariableAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            var: *mut BNDataVariable,
        ),
    >,
    pub dataVariableRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            var: *mut BNDataVariable,
        ),
    >,
    pub dataVariableUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            var: *mut BNDataVariable,
        ),
    >,
    pub dataMetadataUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            offset: u64,
        ),
    >,
    pub tagTypeUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            tagType: *mut BNTagType,
        ),
    >,
    pub tagAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            tagRef: *mut BNTagReference,
        ),
    >,
    pub tagRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            tagRef: *mut BNTagReference,
        ),
    >,
    pub tagUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            tagRef: *mut BNTagReference,
        ),
    >,
    pub symbolAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            sym: *mut BNSymbol,
        ),
    >,
    pub symbolRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            sym: *mut BNSymbol,
        ),
    >,
    pub symbolUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            sym: *mut BNSymbol,
        ),
    >,
    pub stringFound: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            type_: BNStringType,
            offset: u64,
            len: usize,
        ),
    >,
    pub stringRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            type_: BNStringType,
            offset: u64,
            len: usize,
        ),
    >,
    pub typeDefined: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            name: *mut BNQualifiedName,
            type_: *mut BNType,
        ),
    >,
    pub typeUndefined: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            name: *mut BNQualifiedName,
            type_: *mut BNType,
        ),
    >,
    pub typeReferenceChanged: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            name: *mut BNQualifiedName,
            type_: *mut BNType,
        ),
    >,
    pub typeFieldReferenceChanged: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            name: *mut BNQualifiedName,
            offset: u64,
        ),
    >,
    pub segmentAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            segment: *mut BNSegment,
        ),
    >,
    pub segmentRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            segment: *mut BNSegment,
        ),
    >,
    pub segmentUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            segment: *mut BNSegment,
        ),
    >,
    pub sectionAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            section: *mut BNSection,
        ),
    >,
    pub sectionRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            section: *mut BNSection,
        ),
    >,
    pub sectionUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            section: *mut BNSection,
        ),
    >,
    pub componentNameUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            previousName: *mut ::std::os::raw::c_char,
            component: *mut BNComponent,
        ),
    >,
    pub componentAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            component: *mut BNComponent,
        ),
    >,
    pub componentMoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            formerParent: *mut BNComponent,
            newParent: *mut BNComponent,
            component: *mut BNComponent,
        ),
    >,
    pub componentRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            formerParent: *mut BNComponent,
            component: *mut BNComponent,
        ),
    >,
    pub componentFunctionAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            component: *mut BNComponent,
            function: *mut BNFunction,
        ),
    >,
    pub componentFunctionRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            component: *mut BNComponent,
            function: *mut BNFunction,
        ),
    >,
    pub componentDataVariableAdded: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            component: *mut BNComponent,
            var: *mut BNDataVariable,
        ),
    >,
    pub componentDataVariableRemoved: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            component: *mut BNComponent,
            var: *mut BNDataVariable,
        ),
    >,
}
#[test]
fn bindgen_test_layout_BNBinaryDataNotification() {
    const UNINIT: ::std::mem::MaybeUninit<BNBinaryDataNotification> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNBinaryDataNotification>(),
        320usize,
        concat!("Size of: ", stringify!(BNBinaryDataNotification))
    );
    assert_eq!(
        ::std::mem::align_of::<BNBinaryDataNotification>(),
        8usize,
        concat!("Alignment of ", stringify!(BNBinaryDataNotification))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationBarrier) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(notificationBarrier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataWritten) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataWritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataInserted) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataInserted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataRemoved) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataRemoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionAdded) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(functionAdded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionRemoved) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(functionRemoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionUpdated) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(functionUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionUpdateRequested) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(functionUpdateRequested)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataVariableAdded) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataVariableAdded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataVariableRemoved) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataVariableRemoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataVariableUpdated) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataVariableUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataMetadataUpdated) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(dataMetadataUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagTypeUpdated) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(tagTypeUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagAdded) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(tagAdded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagRemoved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(tagRemoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagUpdated) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(tagUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbolAdded) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(symbolAdded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbolRemoved) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(symbolRemoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbolUpdated) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(symbolUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringFound) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(stringFound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringRemoved) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(stringRemoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeDefined) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(typeDefined)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeUndefined) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(typeUndefined)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeReferenceChanged) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(typeReferenceChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeFieldReferenceChanged) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(typeFieldReferenceChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segmentAdded) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(segmentAdded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segmentRemoved) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(segmentRemoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segmentUpdated) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(segmentUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionAdded) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(sectionAdded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionRemoved) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(sectionRemoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionUpdated) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(sectionUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentNameUpdated) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(componentNameUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentAdded) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(componentAdded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentMoved) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(componentMoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentRemoved) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(componentRemoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentFunctionAdded) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(componentFunctionAdded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentFunctionRemoved) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(componentFunctionRemoved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentDataVariableAdded) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(componentDataVariableAdded)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).componentDataVariableRemoved) as usize - ptr as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryDataNotification),
            "::",
            stringify!(componentDataVariableRemoved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFileAccessor {
    pub context: *mut ::std::os::raw::c_void,
    pub getLength:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u64>,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            dest: *mut ::std::os::raw::c_void,
            offset: u64,
            len: usize,
        ) -> usize,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            offset: u64,
            src: *const ::std::os::raw::c_void,
            len: usize,
        ) -> usize,
    >,
}
#[test]
fn bindgen_test_layout_BNFileAccessor() {
    const UNINIT: ::std::mem::MaybeUninit<BNFileAccessor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNFileAccessor>(),
        32usize,
        concat!("Size of: ", stringify!(BNFileAccessor))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFileAccessor>(),
        8usize,
        concat!("Alignment of ", stringify!(BNFileAccessor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFileAccessor),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getLength) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFileAccessor),
            "::",
            stringify!(getLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFileAccessor),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFileAccessor),
            "::",
            stringify!(write)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomBinaryView {
    pub context: *mut ::std::os::raw::c_void,
    pub init:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub freeObject: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub externalRefTaken:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub externalRefReleased:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            dest: *mut ::std::os::raw::c_void,
            offset: u64,
            len: usize,
        ) -> usize,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            offset: u64,
            src: *const ::std::os::raw::c_void,
            len: usize,
        ) -> usize,
    >,
    pub insert: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            offset: u64,
            src: *const ::std::os::raw::c_void,
            len: usize,
        ) -> usize,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64, len: u64) -> usize,
    >,
    pub getModification: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            offset: u64,
        ) -> BNModificationStatus,
    >,
    pub isValidOffset: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> bool,
    >,
    pub isOffsetReadable: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> bool,
    >,
    pub isOffsetWritable: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> bool,
    >,
    pub isOffsetExecutable: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> bool,
    >,
    pub isOffsetBackedByFile: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> bool,
    >,
    pub getNextValidOffset: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, offset: u64) -> u64,
    >,
    pub getStart:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u64>,
    pub getLength:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u64>,
    pub getEntryPoint:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u64>,
    pub isExecutable:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub getDefaultEndianness: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> BNEndianness,
    >,
    pub isRelocatable:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub getAddressSize:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> usize>,
    pub save: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            accessor: *mut BNFileAccessor,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomBinaryView() {
    const UNINIT: ::std::mem::MaybeUninit<BNCustomBinaryView> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNCustomBinaryView>(),
        192usize,
        concat!("Size of: ", stringify!(BNCustomBinaryView))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomBinaryView>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomBinaryView))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeObject) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(freeObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalRefTaken) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(externalRefTaken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalRefReleased) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(externalRefReleased)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).insert) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(insert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remove) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getModification) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getModification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isValidOffset) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isValidOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isOffsetReadable) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isOffsetReadable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isOffsetWritable) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isOffsetWritable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isOffsetExecutable) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isOffsetExecutable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isOffsetBackedByFile) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isOffsetBackedByFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getNextValidOffset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getNextValidOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getStart) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getLength) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getEntryPoint) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getEntryPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isExecutable) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isExecutable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getDefaultEndianness) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getDefaultEndianness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isRelocatable) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(isRelocatable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAddressSize) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(getAddressSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryView),
            "::",
            stringify!(save)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomBinaryViewType {
    pub context: *mut ::std::os::raw::c_void,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut BNBinaryView,
        ) -> *mut BNBinaryView,
    >,
    pub parse: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut BNBinaryView,
        ) -> *mut BNBinaryView,
    >,
    pub isValidForData: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, data: *mut BNBinaryView) -> bool,
    >,
    pub isDeprecated:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub getLoadSettingsForData: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut BNBinaryView,
        ) -> *mut BNSettings,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomBinaryViewType() {
    const UNINIT: ::std::mem::MaybeUninit<BNCustomBinaryViewType> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNCustomBinaryViewType>(),
        48usize,
        concat!("Size of: ", stringify!(BNCustomBinaryViewType))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomBinaryViewType>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomBinaryViewType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parse) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(parse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isValidForData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(isValidForData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isDeprecated) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(isDeprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getLoadSettingsForData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomBinaryViewType),
            "::",
            stringify!(getLoadSettingsForData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTransformParameterInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub longName: *mut ::std::os::raw::c_char,
    pub fixedLength: usize,
}
#[test]
fn bindgen_test_layout_BNTransformParameterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNTransformParameterInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTransformParameterInfo>(),
        24usize,
        concat!("Size of: ", stringify!(BNTransformParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTransformParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTransformParameterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTransformParameterInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTransformParameterInfo),
            "::",
            stringify!(longName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixedLength) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTransformParameterInfo),
            "::",
            stringify!(fixedLength)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTransformParameter {
    pub name: *const ::std::os::raw::c_char,
    pub value: *mut BNDataBuffer,
}
#[test]
fn bindgen_test_layout_BNTransformParameter() {
    const UNINIT: ::std::mem::MaybeUninit<BNTransformParameter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTransformParameter>(),
        16usize,
        concat!("Size of: ", stringify!(BNTransformParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTransformParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTransformParameter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTransformParameter),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTransformParameter),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomTransform {
    pub context: *mut ::std::os::raw::c_void,
    pub getParameters: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            count: *mut usize,
        ) -> *mut BNTransformParameterInfo,
    >,
    pub freeParameters: ::std::option::Option<
        unsafe extern "C" fn(params: *mut BNTransformParameterInfo, count: usize),
    >,
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            input: *mut BNDataBuffer,
            output: *mut BNDataBuffer,
            params: *mut BNTransformParameter,
            paramCount: usize,
        ) -> bool,
    >,
    pub encode: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            input: *mut BNDataBuffer,
            output: *mut BNDataBuffer,
            params: *mut BNTransformParameter,
            paramCount: usize,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomTransform() {
    const UNINIT: ::std::mem::MaybeUninit<BNCustomTransform> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNCustomTransform>(),
        40usize,
        concat!("Size of: ", stringify!(BNCustomTransform))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomTransform>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomTransform))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomTransform),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getParameters) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomTransform),
            "::",
            stringify!(getParameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeParameters) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomTransform),
            "::",
            stringify!(freeParameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomTransform),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomTransform),
            "::",
            stringify!(encode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNInstructionInfo {
    pub length: usize,
    pub branchCount: usize,
    pub archTransitionByTargetAddr: bool,
    pub branchDelay: bool,
    pub branchType: [BNBranchType; 3usize],
    pub branchTarget: [u64; 3usize],
    pub branchArch: [*mut BNArchitecture; 3usize],
}
#[test]
fn bindgen_test_layout_BNInstructionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNInstructionInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNInstructionInfo>(),
        80usize,
        concat!("Size of: ", stringify!(BNInstructionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNInstructionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNInstructionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).branchCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(branchCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).archTransitionByTargetAddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(archTransitionByTargetAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).branchDelay) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(branchDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).branchType) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(branchType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).branchTarget) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(branchTarget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).branchArch) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionInfo),
            "::",
            stringify!(branchArch)
        )
    );
}
pub const BNRelocationType_ELFGlobalRelocationType: BNRelocationType = 0;
pub const BNRelocationType_ELFCopyRelocationType: BNRelocationType = 1;
pub const BNRelocationType_ELFJumpSlotRelocationType: BNRelocationType = 2;
pub const BNRelocationType_StandardRelocationType: BNRelocationType = 3;
pub const BNRelocationType_IgnoredRelocation: BNRelocationType = 4;
pub const BNRelocationType_UnhandledRelocation: BNRelocationType = 5;
pub type BNRelocationType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRelocationInfo {
    pub type_: BNRelocationType,
    pub pcRelative: bool,
    pub baseRelative: bool,
    pub base: u64,
    pub size: usize,
    pub truncateSize: usize,
    pub nativeType: u64,
    pub addend: usize,
    pub hasSign: bool,
    pub implicitAddend: bool,
    pub external: bool,
    pub symbolIndex: usize,
    pub sectionIndex: usize,
    pub address: u64,
    pub target: u64,
    pub dataRelocation: bool,
    pub relocationDataCache: [u8; 8usize],
    pub prev: *mut BNRelocationInfo,
    pub next: *mut BNRelocationInfo,
}
#[test]
fn bindgen_test_layout_BNRelocationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNRelocationInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNRelocationInfo>(),
        120usize,
        concat!("Size of: ", stringify!(BNRelocationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRelocationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRelocationInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcRelative) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(pcRelative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseRelative) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(baseRelative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).truncateSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(truncateSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nativeType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(nativeType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addend) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(addend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasSign) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(hasSign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implicitAddend) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(implicitAddend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(external)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbolIndex) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(symbolIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionIndex) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(sectionIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataRelocation) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(dataRelocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relocationDataCache) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(relocationDataCache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRelocationInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNInstructionTextToken {
    pub type_: BNInstructionTextTokenType,
    pub text: *mut ::std::os::raw::c_char,
    pub value: u64,
    pub width: u64,
    pub size: usize,
    pub operand: usize,
    pub context: BNInstructionTextTokenContext,
    pub confidence: u8,
    pub address: u64,
    pub typeNames: *mut *mut ::std::os::raw::c_char,
    pub namesCount: usize,
}
#[test]
fn bindgen_test_layout_BNInstructionTextToken() {
    const UNINIT: ::std::mem::MaybeUninit<BNInstructionTextToken> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNInstructionTextToken>(),
        80usize,
        concat!("Size of: ", stringify!(BNInstructionTextToken))
    );
    assert_eq!(
        ::std::mem::align_of::<BNInstructionTextToken>(),
        8usize,
        concat!("Alignment of ", stringify!(BNInstructionTextToken))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operand) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(operand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(confidence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeNames) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(typeNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namesCount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextToken),
            "::",
            stringify!(namesCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNInstructionTextLine {
    pub tokens: *mut BNInstructionTextToken,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_BNInstructionTextLine() {
    const UNINIT: ::std::mem::MaybeUninit<BNInstructionTextLine> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNInstructionTextLine>(),
        16usize,
        concat!("Size of: ", stringify!(BNInstructionTextLine))
    );
    assert_eq!(
        ::std::mem::align_of::<BNInstructionTextLine>(),
        8usize,
        concat!("Alignment of ", stringify!(BNInstructionTextLine))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tokens) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextLine),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInstructionTextLine),
            "::",
            stringify!(count)
        )
    );
}
pub const BNTypeDefinitionLineType_TypedefLineType: BNTypeDefinitionLineType = 0;
pub const BNTypeDefinitionLineType_StructDefinitionLineType: BNTypeDefinitionLineType = 1;
pub const BNTypeDefinitionLineType_StructFieldLineType: BNTypeDefinitionLineType = 2;
pub const BNTypeDefinitionLineType_StructDefinitionEndLineType: BNTypeDefinitionLineType = 3;
pub const BNTypeDefinitionLineType_EnumDefinitionLineType: BNTypeDefinitionLineType = 4;
pub const BNTypeDefinitionLineType_EnumMemberLineType: BNTypeDefinitionLineType = 5;
pub const BNTypeDefinitionLineType_EnumDefinitionEndLineType: BNTypeDefinitionLineType = 6;
pub const BNTypeDefinitionLineType_PaddingLineType: BNTypeDefinitionLineType = 7;
pub const BNTypeDefinitionLineType_UndefinedXrefLineType: BNTypeDefinitionLineType = 8;
pub const BNTypeDefinitionLineType_CollapsedPaddingLineType: BNTypeDefinitionLineType = 9;
pub type BNTypeDefinitionLineType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeDefinitionLine {
    pub lineType: BNTypeDefinitionLineType,
    pub tokens: *mut BNInstructionTextToken,
    pub count: usize,
    pub type_: *mut BNType,
    pub rootType: *mut BNType,
    pub rootTypeName: *mut ::std::os::raw::c_char,
    pub baseType: *mut BNNamedTypeReference,
    pub baseOffset: u64,
    pub offset: u64,
    pub fieldIndex: usize,
}
#[test]
fn bindgen_test_layout_BNTypeDefinitionLine() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeDefinitionLine> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeDefinitionLine>(),
        80usize,
        concat!("Size of: ", stringify!(BNTypeDefinitionLine))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeDefinitionLine>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeDefinitionLine))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeDefinitionLine),
            "::",
            stringify!(lineType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tokens) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeDefinitionLine),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeDefinitionLine),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeDefinitionLine),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rootType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeDefinitionLine),
            "::",
            stringify!(rootType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rootTypeName) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeDefinitionLine),
            "::",
            stringify!(rootTypeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseType) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeDefinitionLine),
            "::",
            stringify!(baseType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseOffset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeDefinitionLine),
            "::",
            stringify!(baseOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeDefinitionLine),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldIndex) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeDefinitionLine),
            "::",
            stringify!(fieldIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFlagConditionForSemanticClass {
    pub semanticClass: u32,
    pub condition: BNLowLevelILFlagCondition,
}
#[test]
fn bindgen_test_layout_BNFlagConditionForSemanticClass() {
    const UNINIT: ::std::mem::MaybeUninit<BNFlagConditionForSemanticClass> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNFlagConditionForSemanticClass>(),
        8usize,
        concat!("Size of: ", stringify!(BNFlagConditionForSemanticClass))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFlagConditionForSemanticClass>(),
        4usize,
        concat!("Alignment of ", stringify!(BNFlagConditionForSemanticClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semanticClass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlagConditionForSemanticClass),
            "::",
            stringify!(semanticClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlagConditionForSemanticClass),
            "::",
            stringify!(condition)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNNameAndType {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut BNType,
    pub typeConfidence: u8,
}
#[test]
fn bindgen_test_layout_BNNameAndType() {
    const UNINIT: ::std::mem::MaybeUninit<BNNameAndType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNNameAndType>(),
        24usize,
        concat!("Size of: ", stringify!(BNNameAndType))
    );
    assert_eq!(
        ::std::mem::align_of::<BNNameAndType>(),
        8usize,
        concat!("Alignment of ", stringify!(BNNameAndType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameAndType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameAndType),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeConfidence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNNameAndType),
            "::",
            stringify!(typeConfidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeWithConfidence {
    pub type_: *mut BNType,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNTypeWithConfidence() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeWithConfidence> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeWithConfidence>(),
        16usize,
        concat!("Size of: ", stringify!(BNTypeWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeWithConfidence>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeWithConfidence))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeWithConfidence),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomArchitecture {
    pub context: *mut ::std::os::raw::c_void,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, obj: *mut BNArchitecture),
    >,
    pub getEndianness: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> BNEndianness,
    >,
    pub getAddressSize:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> usize>,
    pub getDefaultIntegerSize:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> usize>,
    pub getInstructionAlignment:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> usize>,
    pub getMaxInstructionLength:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> usize>,
    pub getOpcodeDisplayLength:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> usize>,
    pub getAssociatedArchitectureByAddress: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            addr: *mut u64,
        ) -> *mut BNArchitecture,
    >,
    pub getInstructionInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            maxLen: usize,
            result: *mut BNInstructionInfo,
        ) -> bool,
    >,
    pub getInstructionText: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: *mut usize,
            result: *mut *mut BNInstructionTextToken,
            count: *mut usize,
        ) -> bool,
    >,
    pub freeInstructionText: ::std::option::Option<
        unsafe extern "C" fn(tokens: *mut BNInstructionTextToken, count: usize),
    >,
    pub getInstructionLowLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: *mut usize,
            il: *mut BNLowLevelILFunction,
        ) -> bool,
    >,
    pub getRegisterName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            reg: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getFlagName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            flag: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getFlagWriteTypeName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            flags: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getSemanticFlagClassName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            semClass: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getSemanticFlagGroupName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            semGroup: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getFullWidthRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getAllRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getAllFlags: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getAllFlagWriteTypes: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getAllSemanticFlagClasses: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getAllSemanticFlagGroups: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getFlagRole: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            flag: u32,
            semClass: u32,
        ) -> BNFlagRole,
    >,
    pub getFlagsRequiredForFlagCondition: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            cond: BNLowLevelILFlagCondition,
            semClass: u32,
            count: *mut usize,
        ) -> *mut u32,
    >,
    pub getFlagsRequiredForSemanticFlagGroup: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            semGroup: u32,
            count: *mut usize,
        ) -> *mut u32,
    >,
    pub getFlagConditionsForSemanticFlagGroup: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            semGroup: u32,
            count: *mut usize,
        ) -> *mut BNFlagConditionForSemanticClass,
    >,
    pub freeFlagConditionsForSemanticFlagGroup: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            conditions: *mut BNFlagConditionForSemanticClass,
        ),
    >,
    pub getFlagsWrittenByFlagWriteType: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            writeType: u32,
            count: *mut usize,
        ) -> *mut u32,
    >,
    pub getSemanticClassForFlagWriteType: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, writeType: u32) -> u32,
    >,
    pub getFlagWriteLowLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            op: BNLowLevelILOperation,
            size: usize,
            flagWriteType: u32,
            flag: u32,
            operands: *mut BNRegisterOrConstant,
            operandCount: usize,
            il: *mut BNLowLevelILFunction,
        ) -> usize,
    >,
    pub getFlagConditionLowLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            cond: BNLowLevelILFlagCondition,
            semClass: u32,
            il: *mut BNLowLevelILFunction,
        ) -> usize,
    >,
    pub getSemanticFlagGroupLowLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            semGroup: u32,
            il: *mut BNLowLevelILFunction,
        ) -> usize,
    >,
    pub freeRegisterList: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, regs: *mut u32),
    >,
    pub getRegisterInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            reg: u32,
            result: *mut BNRegisterInfo,
        ),
    >,
    pub getStackPointerRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getLinkRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getGlobalRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getSystemRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getRegisterStackName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            regStack: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getAllRegisterStacks: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getRegisterStackInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            regStack: u32,
            result: *mut BNRegisterStackInfo,
        ),
    >,
    pub getIntrinsicName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            intrinsic: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub getAllIntrinsics: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getIntrinsicInputs: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            intrinsic: u32,
            count: *mut usize,
        ) -> *mut BNNameAndType,
    >,
    pub freeNameAndTypeList: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            nt: *mut BNNameAndType,
            count: usize,
        ),
    >,
    pub getIntrinsicOutputs: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            intrinsic: u32,
            count: *mut usize,
        ) -> *mut BNTypeWithConfidence,
    >,
    pub freeTypeList: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            types: *mut BNTypeWithConfidence,
            count: usize,
        ),
    >,
    pub canAssemble:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub assemble: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            code: *const ::std::os::raw::c_char,
            addr: u64,
            result: *mut BNDataBuffer,
            errors: *mut *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub isNeverBranchPatchAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: usize,
        ) -> bool,
    >,
    pub isAlwaysBranchPatchAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: usize,
        ) -> bool,
    >,
    pub isInvertBranchPatchAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: usize,
        ) -> bool,
    >,
    pub isSkipAndReturnZeroPatchAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: usize,
        ) -> bool,
    >,
    pub isSkipAndReturnValuePatchAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            len: usize,
        ) -> bool,
    >,
    pub convertToNop: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut u8,
            addr: u64,
            len: usize,
        ) -> bool,
    >,
    pub alwaysBranch: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut u8,
            addr: u64,
            len: usize,
        ) -> bool,
    >,
    pub invertBranch: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut u8,
            addr: u64,
            len: usize,
        ) -> bool,
    >,
    pub skipAndReturnValue: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut u8,
            addr: u64,
            len: usize,
            value: u64,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomArchitecture() {
    const UNINIT: ::std::mem::MaybeUninit<BNCustomArchitecture> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNCustomArchitecture>(),
        480usize,
        concat!("Size of: ", stringify!(BNCustomArchitecture))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomArchitecture>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomArchitecture))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getEndianness) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getEndianness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAddressSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAddressSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getDefaultIntegerSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getDefaultIntegerSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getInstructionAlignment) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getInstructionAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getMaxInstructionLength) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getMaxInstructionLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getOpcodeDisplayLength) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getOpcodeDisplayLength)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getAssociatedArchitectureByAddress) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAssociatedArchitectureByAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getInstructionInfo) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getInstructionInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getInstructionText) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getInstructionText)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeInstructionText) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(freeInstructionText)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getInstructionLowLevelIL) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getInstructionLowLevelIL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getRegisterName) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getRegisterName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFlagName) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFlagWriteTypeName) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagWriteTypeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getSemanticFlagClassName) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getSemanticFlagClassName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getSemanticFlagGroupName) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getSemanticFlagGroupName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFullWidthRegisters) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFullWidthRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAllRegisters) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAllFlags) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAllFlagWriteTypes) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllFlagWriteTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAllSemanticFlagClasses) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllSemanticFlagClasses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAllSemanticFlagGroups) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllSemanticFlagGroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFlagRole) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagRole)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getFlagsRequiredForFlagCondition) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagsRequiredForFlagCondition)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getFlagsRequiredForSemanticFlagGroup) as usize
                - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagsRequiredForSemanticFlagGroup)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getFlagConditionsForSemanticFlagGroup) as usize
                - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagConditionsForSemanticFlagGroup)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).freeFlagConditionsForSemanticFlagGroup) as usize
                - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(freeFlagConditionsForSemanticFlagGroup)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getFlagsWrittenByFlagWriteType) as usize - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagsWrittenByFlagWriteType)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getSemanticClassForFlagWriteType) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getSemanticClassForFlagWriteType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFlagWriteLowLevelIL) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagWriteLowLevelIL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFlagConditionLowLevelIL) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getFlagConditionLowLevelIL)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getSemanticFlagGroupLowLevelIL) as usize - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getSemanticFlagGroupLowLevelIL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeRegisterList) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(freeRegisterList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getRegisterInfo) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getRegisterInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getStackPointerRegister) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getStackPointerRegister)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getLinkRegister) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getLinkRegister)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getGlobalRegisters) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getGlobalRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getSystemRegisters) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getSystemRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getRegisterStackName) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getRegisterStackName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAllRegisterStacks) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllRegisterStacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getRegisterStackInfo) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getRegisterStackInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getIntrinsicName) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getIntrinsicName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAllIntrinsics) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getAllIntrinsics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getIntrinsicInputs) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getIntrinsicInputs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeNameAndTypeList) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(freeNameAndTypeList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getIntrinsicOutputs) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(getIntrinsicOutputs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeTypeList) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(freeTypeList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canAssemble) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(canAssemble)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assemble) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(assemble)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isNeverBranchPatchAvailable) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(isNeverBranchPatchAvailable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).isAlwaysBranchPatchAvailable) as usize - ptr as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(isAlwaysBranchPatchAvailable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).isInvertBranchPatchAvailable) as usize - ptr as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(isInvertBranchPatchAvailable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).isSkipAndReturnZeroPatchAvailable) as usize - ptr as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(isSkipAndReturnZeroPatchAvailable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).isSkipAndReturnValuePatchAvailable) as usize - ptr as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(isSkipAndReturnValuePatchAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).convertToNop) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(convertToNop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alwaysBranch) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(alwaysBranch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invertBranch) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(invertBranch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skipAndReturnValue) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomArchitecture),
            "::",
            stringify!(skipAndReturnValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBasicBlockEdge {
    pub type_: BNBranchType,
    pub target: *mut BNBasicBlock,
    pub backEdge: bool,
    pub fallThrough: bool,
}
#[test]
fn bindgen_test_layout_BNBasicBlockEdge() {
    const UNINIT: ::std::mem::MaybeUninit<BNBasicBlockEdge> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNBasicBlockEdge>(),
        24usize,
        concat!("Size of: ", stringify!(BNBasicBlockEdge))
    );
    assert_eq!(
        ::std::mem::align_of::<BNBasicBlockEdge>(),
        8usize,
        concat!("Alignment of ", stringify!(BNBasicBlockEdge))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBasicBlockEdge),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBasicBlockEdge),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backEdge) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBasicBlockEdge),
            "::",
            stringify!(backEdge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fallThrough) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBasicBlockEdge),
            "::",
            stringify!(fallThrough)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNPoint {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_BNPoint() {
    const UNINIT: ::std::mem::MaybeUninit<BNPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNPoint>(),
        8usize,
        concat!("Size of: ", stringify!(BNPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<BNPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(BNPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPoint),
            "::",
            stringify!(y)
        )
    );
}
pub const BNThemeColor_AddressColor: BNThemeColor = 0;
pub const BNThemeColor_ModifiedColor: BNThemeColor = 1;
pub const BNThemeColor_InsertedColor: BNThemeColor = 2;
pub const BNThemeColor_NotPresentColor: BNThemeColor = 3;
pub const BNThemeColor_SelectionColor: BNThemeColor = 4;
pub const BNThemeColor_OutlineColor: BNThemeColor = 5;
pub const BNThemeColor_BackgroundHighlightDarkColor: BNThemeColor = 6;
pub const BNThemeColor_BackgroundHighlightLightColor: BNThemeColor = 7;
pub const BNThemeColor_BoldBackgroundHighlightDarkColor: BNThemeColor = 8;
pub const BNThemeColor_BoldBackgroundHighlightLightColor: BNThemeColor = 9;
pub const BNThemeColor_AlphanumericHighlightColor: BNThemeColor = 10;
pub const BNThemeColor_PrintableHighlightColor: BNThemeColor = 11;
pub const BNThemeColor_GraphBackgroundDarkColor: BNThemeColor = 12;
pub const BNThemeColor_GraphBackgroundLightColor: BNThemeColor = 13;
pub const BNThemeColor_GraphNodeDarkColor: BNThemeColor = 14;
pub const BNThemeColor_GraphNodeLightColor: BNThemeColor = 15;
pub const BNThemeColor_GraphNodeOutlineColor: BNThemeColor = 16;
pub const BNThemeColor_GraphNodeShadowColor: BNThemeColor = 17;
pub const BNThemeColor_GraphEntryNodeIndicatorColor: BNThemeColor = 18;
pub const BNThemeColor_GraphExitNodeIndicatorColor: BNThemeColor = 19;
pub const BNThemeColor_GraphExitNoreturnNodeIndicatorColor: BNThemeColor = 20;
pub const BNThemeColor_TrueBranchColor: BNThemeColor = 21;
pub const BNThemeColor_FalseBranchColor: BNThemeColor = 22;
pub const BNThemeColor_UnconditionalBranchColor: BNThemeColor = 23;
pub const BNThemeColor_AltTrueBranchColor: BNThemeColor = 24;
pub const BNThemeColor_AltFalseBranchColor: BNThemeColor = 25;
pub const BNThemeColor_AltUnconditionalBranchColor: BNThemeColor = 26;
pub const BNThemeColor_RegisterColor: BNThemeColor = 27;
pub const BNThemeColor_NumberColor: BNThemeColor = 28;
pub const BNThemeColor_CodeSymbolColor: BNThemeColor = 29;
pub const BNThemeColor_DataSymbolColor: BNThemeColor = 30;
pub const BNThemeColor_StackVariableColor: BNThemeColor = 31;
pub const BNThemeColor_ImportColor: BNThemeColor = 32;
pub const BNThemeColor_InstructionHighlightColor: BNThemeColor = 33;
pub const BNThemeColor_RelatedInstructionHighlightColor: BNThemeColor = 34;
pub const BNThemeColor_TokenHighlightColor: BNThemeColor = 35;
pub const BNThemeColor_TokenSelectionColor: BNThemeColor = 36;
pub const BNThemeColor_AnnotationColor: BNThemeColor = 37;
pub const BNThemeColor_OpcodeColor: BNThemeColor = 38;
pub const BNThemeColor_LinearDisassemblyFunctionHeaderColor: BNThemeColor = 39;
pub const BNThemeColor_LinearDisassemblyBlockColor: BNThemeColor = 40;
pub const BNThemeColor_LinearDisassemblyNoteColor: BNThemeColor = 41;
pub const BNThemeColor_LinearDisassemblySeparatorColor: BNThemeColor = 42;
pub const BNThemeColor_StringColor: BNThemeColor = 43;
pub const BNThemeColor_TypeNameColor: BNThemeColor = 44;
pub const BNThemeColor_FieldNameColor: BNThemeColor = 45;
pub const BNThemeColor_KeywordColor: BNThemeColor = 46;
pub const BNThemeColor_UncertainColor: BNThemeColor = 47;
pub const BNThemeColor_NameSpaceColor: BNThemeColor = 48;
pub const BNThemeColor_NameSpaceSeparatorColor: BNThemeColor = 49;
pub const BNThemeColor_GotoLabelColor: BNThemeColor = 50;
pub const BNThemeColor_CommentColor: BNThemeColor = 51;
pub const BNThemeColor_OperationColor: BNThemeColor = 52;
pub const BNThemeColor_BaseStructureNameColor: BNThemeColor = 53;
pub const BNThemeColor_ScriptConsoleOutputColor: BNThemeColor = 54;
pub const BNThemeColor_ScriptConsoleWarningColor: BNThemeColor = 55;
pub const BNThemeColor_ScriptConsoleErrorColor: BNThemeColor = 56;
pub const BNThemeColor_ScriptConsoleEchoColor: BNThemeColor = 57;
pub const BNThemeColor_BlueStandardHighlightColor: BNThemeColor = 58;
pub const BNThemeColor_GreenStandardHighlightColor: BNThemeColor = 59;
pub const BNThemeColor_CyanStandardHighlightColor: BNThemeColor = 60;
pub const BNThemeColor_RedStandardHighlightColor: BNThemeColor = 61;
pub const BNThemeColor_MagentaStandardHighlightColor: BNThemeColor = 62;
pub const BNThemeColor_YellowStandardHighlightColor: BNThemeColor = 63;
pub const BNThemeColor_OrangeStandardHighlightColor: BNThemeColor = 64;
pub const BNThemeColor_WhiteStandardHighlightColor: BNThemeColor = 65;
pub const BNThemeColor_BlackStandardHighlightColor: BNThemeColor = 66;
pub const BNThemeColor_MiniGraphOverlayColor: BNThemeColor = 67;
pub const BNThemeColor_FeatureMapBaseColor: BNThemeColor = 68;
pub const BNThemeColor_FeatureMapNavLineColor: BNThemeColor = 69;
pub const BNThemeColor_FeatureMapNavHighlightColor: BNThemeColor = 70;
pub const BNThemeColor_FeatureMapDataVariableColor: BNThemeColor = 71;
pub const BNThemeColor_FeatureMapAsciiStringColor: BNThemeColor = 72;
pub const BNThemeColor_FeatureMapUnicodeStringColor: BNThemeColor = 73;
pub const BNThemeColor_FeatureMapFunctionColor: BNThemeColor = 74;
pub const BNThemeColor_FeatureMapImportColor: BNThemeColor = 75;
pub const BNThemeColor_FeatureMapExternColor: BNThemeColor = 76;
pub const BNThemeColor_FeatureMapLibraryColor: BNThemeColor = 77;
pub const BNThemeColor_SidebarBackgroundColor: BNThemeColor = 78;
pub const BNThemeColor_SidebarInactiveIconColor: BNThemeColor = 79;
pub const BNThemeColor_SidebarActiveIconColor: BNThemeColor = 80;
pub const BNThemeColor_SidebarHeaderBackgroundColor: BNThemeColor = 81;
pub const BNThemeColor_SidebarHeaderTextColor: BNThemeColor = 82;
pub const BNThemeColor_SidebarWidgetBackgroundColor: BNThemeColor = 83;
pub const BNThemeColor_ActivePaneBackgroundColor: BNThemeColor = 84;
pub const BNThemeColor_InactivePaneBackgroundColor: BNThemeColor = 85;
pub const BNThemeColor_BraceOption1Color: BNThemeColor = 86;
pub const BNThemeColor_BraceOption2Color: BNThemeColor = 87;
pub const BNThemeColor_BraceOption3Color: BNThemeColor = 88;
pub const BNThemeColor_BraceOption4Color: BNThemeColor = 89;
pub const BNThemeColor_BraceOption5Color: BNThemeColor = 90;
pub const BNThemeColor_BraceOption6Color: BNThemeColor = 91;
pub type BNThemeColor = ::std::os::raw::c_uint;
pub const BNEdgePenStyle_NoPen: BNEdgePenStyle = 0;
pub const BNEdgePenStyle_SolidLine: BNEdgePenStyle = 1;
pub const BNEdgePenStyle_DashLine: BNEdgePenStyle = 2;
pub const BNEdgePenStyle_DotLine: BNEdgePenStyle = 3;
pub const BNEdgePenStyle_DashDotLine: BNEdgePenStyle = 4;
pub const BNEdgePenStyle_DashDotDotLine: BNEdgePenStyle = 5;
pub type BNEdgePenStyle = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNEdgeStyle {
    pub style: BNEdgePenStyle,
    pub width: usize,
    pub color: BNThemeColor,
}
#[test]
fn bindgen_test_layout_BNEdgeStyle() {
    const UNINIT: ::std::mem::MaybeUninit<BNEdgeStyle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNEdgeStyle>(),
        24usize,
        concat!("Size of: ", stringify!(BNEdgeStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<BNEdgeStyle>(),
        8usize,
        concat!("Alignment of ", stringify!(BNEdgeStyle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEdgeStyle),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEdgeStyle),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEdgeStyle),
            "::",
            stringify!(color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFlowGraphEdge {
    pub type_: BNBranchType,
    pub target: *mut BNFlowGraphNode,
    pub points: *mut BNPoint,
    pub pointCount: usize,
    pub backEdge: bool,
    pub style: BNEdgeStyle,
}
#[test]
fn bindgen_test_layout_BNFlowGraphEdge() {
    const UNINIT: ::std::mem::MaybeUninit<BNFlowGraphEdge> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNFlowGraphEdge>(),
        64usize,
        concat!("Size of: ", stringify!(BNFlowGraphEdge))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFlowGraphEdge>(),
        8usize,
        concat!("Alignment of ", stringify!(BNFlowGraphEdge))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(pointCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backEdge) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(backEdge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFlowGraphEdge),
            "::",
            stringify!(style)
        )
    );
}
pub const BNHighlightColorStyle_StandardHighlightColor: BNHighlightColorStyle = 0;
pub const BNHighlightColorStyle_MixedHighlightColor: BNHighlightColorStyle = 1;
pub const BNHighlightColorStyle_CustomHighlightColor: BNHighlightColorStyle = 2;
pub type BNHighlightColorStyle = ::std::os::raw::c_uint;
pub const BNHighlightStandardColor_NoHighlightColor: BNHighlightStandardColor = 0;
pub const BNHighlightStandardColor_BlueHighlightColor: BNHighlightStandardColor = 1;
pub const BNHighlightStandardColor_GreenHighlightColor: BNHighlightStandardColor = 2;
pub const BNHighlightStandardColor_CyanHighlightColor: BNHighlightStandardColor = 3;
pub const BNHighlightStandardColor_RedHighlightColor: BNHighlightStandardColor = 4;
pub const BNHighlightStandardColor_MagentaHighlightColor: BNHighlightStandardColor = 5;
pub const BNHighlightStandardColor_YellowHighlightColor: BNHighlightStandardColor = 6;
pub const BNHighlightStandardColor_OrangeHighlightColor: BNHighlightStandardColor = 7;
pub const BNHighlightStandardColor_WhiteHighlightColor: BNHighlightStandardColor = 8;
pub const BNHighlightStandardColor_BlackHighlightColor: BNHighlightStandardColor = 9;
pub type BNHighlightStandardColor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNHighlightColor {
    pub style: BNHighlightColorStyle,
    pub color: BNHighlightStandardColor,
    pub mixColor: BNHighlightStandardColor,
    pub mix: u8,
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub alpha: u8,
}
#[test]
fn bindgen_test_layout_BNHighlightColor() {
    const UNINIT: ::std::mem::MaybeUninit<BNHighlightColor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNHighlightColor>(),
        20usize,
        concat!("Size of: ", stringify!(BNHighlightColor))
    );
    assert_eq!(
        ::std::mem::align_of::<BNHighlightColor>(),
        4usize,
        concat!("Alignment of ", stringify!(BNHighlightColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixColor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(mixColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mix) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(mix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNHighlightColor),
            "::",
            stringify!(alpha)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDisassemblyTextLineTypeInfo {
    pub hasTypeInfo: bool,
    pub parentType: *mut BNType,
    pub fieldIndex: usize,
    pub offset: u64,
}
#[test]
fn bindgen_test_layout_BNDisassemblyTextLineTypeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNDisassemblyTextLineTypeInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDisassemblyTextLineTypeInfo>(),
        32usize,
        concat!("Size of: ", stringify!(BNDisassemblyTextLineTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDisassemblyTextLineTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDisassemblyTextLineTypeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasTypeInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLineTypeInfo),
            "::",
            stringify!(hasTypeInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLineTypeInfo),
            "::",
            stringify!(parentType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLineTypeInfo),
            "::",
            stringify!(fieldIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLineTypeInfo),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDisassemblyTextLine {
    pub addr: u64,
    pub instrIndex: usize,
    pub tokens: *mut BNInstructionTextToken,
    pub count: usize,
    pub highlight: BNHighlightColor,
    pub tags: *mut *mut BNTag,
    pub tagCount: usize,
    pub typeInfo: BNDisassemblyTextLineTypeInfo,
}
#[test]
fn bindgen_test_layout_BNDisassemblyTextLine() {
    const UNINIT: ::std::mem::MaybeUninit<BNDisassemblyTextLine> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDisassemblyTextLine>(),
        104usize,
        concat!("Size of: ", stringify!(BNDisassemblyTextLine))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDisassemblyTextLine>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDisassemblyTextLine))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instrIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(instrIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tokens) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).highlight) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(highlight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(tagCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeInfo) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDisassemblyTextLine),
            "::",
            stringify!(typeInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLinearDisassemblyLine {
    pub type_: BNLinearDisassemblyLineType,
    pub function: *mut BNFunction,
    pub block: *mut BNBasicBlock,
    pub contents: BNDisassemblyTextLine,
}
#[test]
fn bindgen_test_layout_BNLinearDisassemblyLine() {
    const UNINIT: ::std::mem::MaybeUninit<BNLinearDisassemblyLine> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNLinearDisassemblyLine>(),
        128usize,
        concat!("Size of: ", stringify!(BNLinearDisassemblyLine))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLinearDisassemblyLine>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLinearDisassemblyLine))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearDisassemblyLine),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearDisassemblyLine),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearDisassemblyLine),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contents) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearDisassemblyLine),
            "::",
            stringify!(contents)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNReferenceSource {
    pub func: *mut BNFunction,
    pub arch: *mut BNArchitecture,
    pub addr: u64,
}
#[test]
fn bindgen_test_layout_BNReferenceSource() {
    const UNINIT: ::std::mem::MaybeUninit<BNReferenceSource> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNReferenceSource>(),
        24usize,
        concat!("Size of: ", stringify!(BNReferenceSource))
    );
    assert_eq!(
        ::std::mem::align_of::<BNReferenceSource>(),
        8usize,
        concat!("Alignment of ", stringify!(BNReferenceSource))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNReferenceSource),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNReferenceSource),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNReferenceSource),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeFieldReference {
    pub func: *mut BNFunction,
    pub arch: *mut BNArchitecture,
    pub addr: u64,
    pub size: usize,
    pub incomingType: BNTypeWithConfidence,
}
#[test]
fn bindgen_test_layout_BNTypeFieldReference() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeFieldReference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeFieldReference>(),
        48usize,
        concat!("Size of: ", stringify!(BNTypeFieldReference))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeFieldReference>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeFieldReference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReference),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReference),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReference),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReference),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).incomingType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReference),
            "::",
            stringify!(incomingType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNILReferenceSource {
    pub func: *mut BNFunction,
    pub arch: *mut BNArchitecture,
    pub addr: u64,
    pub type_: BNFunctionGraphType,
    pub exprId: usize,
}
#[test]
fn bindgen_test_layout_BNILReferenceSource() {
    const UNINIT: ::std::mem::MaybeUninit<BNILReferenceSource> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNILReferenceSource>(),
        40usize,
        concat!("Size of: ", stringify!(BNILReferenceSource))
    );
    assert_eq!(
        ::std::mem::align_of::<BNILReferenceSource>(),
        8usize,
        concat!("Alignment of ", stringify!(BNILReferenceSource))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILReferenceSource),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILReferenceSource),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILReferenceSource),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILReferenceSource),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exprId) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILReferenceSource),
            "::",
            stringify!(exprId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeFieldReferenceSizeInfo {
    pub offset: u64,
    pub sizes: *mut usize,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_BNTypeFieldReferenceSizeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeFieldReferenceSizeInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeFieldReferenceSizeInfo>(),
        24usize,
        concat!("Size of: ", stringify!(BNTypeFieldReferenceSizeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeFieldReferenceSizeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeFieldReferenceSizeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReferenceSizeInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReferenceSizeInfo),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReferenceSizeInfo),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeFieldReferenceTypeInfo {
    pub offset: u64,
    pub types: *mut BNTypeWithConfidence,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_BNTypeFieldReferenceTypeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeFieldReferenceTypeInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeFieldReferenceTypeInfo>(),
        24usize,
        concat!("Size of: ", stringify!(BNTypeFieldReferenceTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeFieldReferenceTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeFieldReferenceTypeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReferenceTypeInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReferenceTypeInfo),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeFieldReferenceTypeInfo),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNVariableReferenceSource {
    pub var: BNVariable,
    pub source: BNILReferenceSource,
}
#[test]
fn bindgen_test_layout_BNVariableReferenceSource() {
    const UNINIT: ::std::mem::MaybeUninit<BNVariableReferenceSource> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNVariableReferenceSource>(),
        56usize,
        concat!("Size of: ", stringify!(BNVariableReferenceSource))
    );
    assert_eq!(
        ::std::mem::align_of::<BNVariableReferenceSource>(),
        8usize,
        concat!("Alignment of ", stringify!(BNVariableReferenceSource))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableReferenceSource),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableReferenceSource),
            "::",
            stringify!(source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeField {
    pub name: BNQualifiedName,
    pub offset: u64,
}
#[test]
fn bindgen_test_layout_BNTypeField() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeField> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeField>(),
        32usize,
        concat!("Size of: ", stringify!(BNTypeField))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeField>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeField))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeField),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeField),
            "::",
            stringify!(offset)
        )
    );
}
pub const BNTypeReferenceType_DirectTypeReferenceType: BNTypeReferenceType = 0;
pub const BNTypeReferenceType_IndirectTypeReferenceType: BNTypeReferenceType = 1;
pub const BNTypeReferenceType_UnknownTypeReferenceType: BNTypeReferenceType = 2;
pub type BNTypeReferenceType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeReferenceSource {
    pub name: BNQualifiedName,
    pub offset: u64,
    pub type_: BNTypeReferenceType,
}
#[test]
fn bindgen_test_layout_BNTypeReferenceSource() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeReferenceSource> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeReferenceSource>(),
        40usize,
        concat!("Size of: ", stringify!(BNTypeReferenceSource))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeReferenceSource>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeReferenceSource))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeReferenceSource),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeReferenceSource),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeReferenceSource),
            "::",
            stringify!(type_)
        )
    );
}
pub const BNTagTypeType_UserTagType: BNTagTypeType = 0;
pub const BNTagTypeType_NotificationTagType: BNTagTypeType = 1;
pub const BNTagTypeType_BookmarksTagType: BNTagTypeType = 2;
pub type BNTagTypeType = ::std::os::raw::c_uint;
pub const BNTagReferenceType_AddressTagReference: BNTagReferenceType = 0;
pub const BNTagReferenceType_FunctionTagReference: BNTagReferenceType = 1;
pub const BNTagReferenceType_DataTagReference: BNTagReferenceType = 2;
pub type BNTagReferenceType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTagReference {
    pub refType: BNTagReferenceType,
    pub autoDefined: bool,
    pub tag: *mut BNTag,
    pub arch: *mut BNArchitecture,
    pub func: *mut BNFunction,
    pub addr: u64,
}
#[test]
fn bindgen_test_layout_BNTagReference() {
    const UNINIT: ::std::mem::MaybeUninit<BNTagReference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTagReference>(),
        40usize,
        concat!("Size of: ", stringify!(BNTagReference))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTagReference>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTagReference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(refType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoDefined) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(autoDefined)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTagReference),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUndoAction {
    pub actionType: BNActionType,
    pub summaryText: *mut ::std::os::raw::c_char,
    pub summaryTokens: *mut BNInstructionTextToken,
    pub summaryTokenCount: usize,
}
#[test]
fn bindgen_test_layout_BNUndoAction() {
    const UNINIT: ::std::mem::MaybeUninit<BNUndoAction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNUndoAction>(),
        32usize,
        concat!("Size of: ", stringify!(BNUndoAction))
    );
    assert_eq!(
        ::std::mem::align_of::<BNUndoAction>(),
        8usize,
        concat!("Alignment of ", stringify!(BNUndoAction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoAction),
            "::",
            stringify!(actionType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).summaryText) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoAction),
            "::",
            stringify!(summaryText)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).summaryTokens) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoAction),
            "::",
            stringify!(summaryTokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).summaryTokenCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoAction),
            "::",
            stringify!(summaryTokenCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUndoEntry {
    pub valid: bool,
    pub user: *mut BNUser,
    pub id: *mut ::std::os::raw::c_char,
    pub actions: *mut BNUndoAction,
    pub actionCount: u64,
    pub timestamp: u64,
}
#[test]
fn bindgen_test_layout_BNUndoEntry() {
    const UNINIT: ::std::mem::MaybeUninit<BNUndoEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNUndoEntry>(),
        48usize,
        concat!("Size of: ", stringify!(BNUndoEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<BNUndoEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(BNUndoEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(actionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUndoEntry),
            "::",
            stringify!(timestamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCallingConventionWithConfidence {
    pub convention: *mut BNCallingConvention,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNCallingConventionWithConfidence() {
    const UNINIT: ::std::mem::MaybeUninit<BNCallingConventionWithConfidence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNCallingConventionWithConfidence>(),
        16usize,
        concat!("Size of: ", stringify!(BNCallingConventionWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCallingConventionWithConfidence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNCallingConventionWithConfidence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).convention) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCallingConventionWithConfidence),
            "::",
            stringify!(convention)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCallingConventionWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBoolWithConfidence {
    pub value: bool,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNBoolWithConfidence() {
    const UNINIT: ::std::mem::MaybeUninit<BNBoolWithConfidence> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNBoolWithConfidence>(),
        2usize,
        concat!("Size of: ", stringify!(BNBoolWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNBoolWithConfidence>(),
        1usize,
        concat!("Alignment of ", stringify!(BNBoolWithConfidence))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBoolWithConfidence),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBoolWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNOffsetWithConfidence {
    pub value: i64,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNOffsetWithConfidence() {
    const UNINIT: ::std::mem::MaybeUninit<BNOffsetWithConfidence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNOffsetWithConfidence>(),
        16usize,
        concat!("Size of: ", stringify!(BNOffsetWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNOffsetWithConfidence>(),
        8usize,
        concat!("Alignment of ", stringify!(BNOffsetWithConfidence))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNOffsetWithConfidence),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNOffsetWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNParameterVariablesWithConfidence {
    pub vars: *mut BNVariable,
    pub count: usize,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNParameterVariablesWithConfidence() {
    const UNINIT: ::std::mem::MaybeUninit<BNParameterVariablesWithConfidence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNParameterVariablesWithConfidence>(),
        24usize,
        concat!("Size of: ", stringify!(BNParameterVariablesWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNParameterVariablesWithConfidence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNParameterVariablesWithConfidence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vars) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNParameterVariablesWithConfidence),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNParameterVariablesWithConfidence),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNParameterVariablesWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterSetWithConfidence {
    pub regs: *mut u32,
    pub count: usize,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNRegisterSetWithConfidence() {
    const UNINIT: ::std::mem::MaybeUninit<BNRegisterSetWithConfidence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNRegisterSetWithConfidence>(),
        24usize,
        concat!("Size of: ", stringify!(BNRegisterSetWithConfidence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterSetWithConfidence>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRegisterSetWithConfidence))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterSetWithConfidence),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterSetWithConfidence),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterSetWithConfidence),
            "::",
            stringify!(confidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFunctionParameter {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut BNType,
    pub typeConfidence: u8,
    pub defaultLocation: bool,
    pub location: BNVariable,
}
#[test]
fn bindgen_test_layout_BNFunctionParameter() {
    const UNINIT: ::std::mem::MaybeUninit<BNFunctionParameter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNFunctionParameter>(),
        40usize,
        concat!("Size of: ", stringify!(BNFunctionParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFunctionParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(BNFunctionParameter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionParameter),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionParameter),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeConfidence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionParameter),
            "::",
            stringify!(typeConfidence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultLocation) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionParameter),
            "::",
            stringify!(defaultLocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionParameter),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNQualifiedNameAndType {
    pub name: BNQualifiedName,
    pub type_: *mut BNType,
}
#[test]
fn bindgen_test_layout_BNQualifiedNameAndType() {
    const UNINIT: ::std::mem::MaybeUninit<BNQualifiedNameAndType> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNQualifiedNameAndType>(),
        32usize,
        concat!("Size of: ", stringify!(BNQualifiedNameAndType))
    );
    assert_eq!(
        ::std::mem::align_of::<BNQualifiedNameAndType>(),
        8usize,
        concat!("Alignment of ", stringify!(BNQualifiedNameAndType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameAndType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameAndType),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNQualifiedNameTypeAndId {
    pub name: BNQualifiedName,
    pub id: *mut ::std::os::raw::c_char,
    pub type_: *mut BNType,
}
#[test]
fn bindgen_test_layout_BNQualifiedNameTypeAndId() {
    const UNINIT: ::std::mem::MaybeUninit<BNQualifiedNameTypeAndId> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNQualifiedNameTypeAndId>(),
        40usize,
        concat!("Size of: ", stringify!(BNQualifiedNameTypeAndId))
    );
    assert_eq!(
        ::std::mem::align_of::<BNQualifiedNameTypeAndId>(),
        8usize,
        concat!("Alignment of ", stringify!(BNQualifiedNameTypeAndId))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameTypeAndId),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameTypeAndId),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameTypeAndId),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNStructureMember {
    pub type_: *mut BNType,
    pub name: *mut ::std::os::raw::c_char,
    pub offset: u64,
    pub typeConfidence: u8,
    pub access: BNMemberAccess,
    pub scope: BNMemberScope,
}
#[test]
fn bindgen_test_layout_BNStructureMember() {
    const UNINIT: ::std::mem::MaybeUninit<BNStructureMember> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNStructureMember>(),
        40usize,
        concat!("Size of: ", stringify!(BNStructureMember))
    );
    assert_eq!(
        ::std::mem::align_of::<BNStructureMember>(),
        8usize,
        concat!("Alignment of ", stringify!(BNStructureMember))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStructureMember),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStructureMember),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStructureMember),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeConfidence) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStructureMember),
            "::",
            stringify!(typeConfidence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStructureMember),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStructureMember),
            "::",
            stringify!(scope)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNInheritedStructureMember {
    pub base: *mut BNNamedTypeReference,
    pub baseOffset: u64,
    pub member: BNStructureMember,
    pub memberIndex: usize,
}
#[test]
fn bindgen_test_layout_BNInheritedStructureMember() {
    const UNINIT: ::std::mem::MaybeUninit<BNInheritedStructureMember> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNInheritedStructureMember>(),
        64usize,
        concat!("Size of: ", stringify!(BNInheritedStructureMember))
    );
    assert_eq!(
        ::std::mem::align_of::<BNInheritedStructureMember>(),
        8usize,
        concat!("Alignment of ", stringify!(BNInheritedStructureMember))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInheritedStructureMember),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInheritedStructureMember),
            "::",
            stringify!(baseOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).member) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInheritedStructureMember),
            "::",
            stringify!(member)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memberIndex) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInheritedStructureMember),
            "::",
            stringify!(memberIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBaseStructure {
    pub type_: *mut BNNamedTypeReference,
    pub offset: u64,
    pub width: u64,
}
#[test]
fn bindgen_test_layout_BNBaseStructure() {
    const UNINIT: ::std::mem::MaybeUninit<BNBaseStructure> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNBaseStructure>(),
        24usize,
        concat!("Size of: ", stringify!(BNBaseStructure))
    );
    assert_eq!(
        ::std::mem::align_of::<BNBaseStructure>(),
        8usize,
        concat!("Alignment of ", stringify!(BNBaseStructure))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBaseStructure),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBaseStructure),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBaseStructure),
            "::",
            stringify!(width)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNEnumerationMember {
    pub name: *mut ::std::os::raw::c_char,
    pub value: u64,
    pub isDefault: bool,
}
#[test]
fn bindgen_test_layout_BNEnumerationMember() {
    const UNINIT: ::std::mem::MaybeUninit<BNEnumerationMember> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNEnumerationMember>(),
        24usize,
        concat!("Size of: ", stringify!(BNEnumerationMember))
    );
    assert_eq!(
        ::std::mem::align_of::<BNEnumerationMember>(),
        8usize,
        concat!("Alignment of ", stringify!(BNEnumerationMember))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEnumerationMember),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEnumerationMember),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isDefault) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEnumerationMember),
            "::",
            stringify!(isDefault)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFunctionRecognizer {
    pub context: *mut ::std::os::raw::c_void,
    pub recognizeLowLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut BNBinaryView,
            func: *mut BNFunction,
            il: *mut BNLowLevelILFunction,
        ) -> bool,
    >,
    pub recognizeMediumLevelIL: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *mut BNBinaryView,
            func: *mut BNFunction,
            il: *mut BNMediumLevelILFunction,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNFunctionRecognizer() {
    const UNINIT: ::std::mem::MaybeUninit<BNFunctionRecognizer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNFunctionRecognizer>(),
        24usize,
        concat!("Size of: ", stringify!(BNFunctionRecognizer))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFunctionRecognizer>(),
        8usize,
        concat!("Alignment of ", stringify!(BNFunctionRecognizer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionRecognizer),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recognizeLowLevelIL) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionRecognizer),
            "::",
            stringify!(recognizeLowLevelIL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recognizeMediumLevelIL) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFunctionRecognizer),
            "::",
            stringify!(recognizeMediumLevelIL)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomRelocationHandler {
    pub context: *mut ::std::os::raw::c_void,
    pub freeObject: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub getRelocationInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            arch: *mut BNArchitecture,
            result: *mut BNRelocationInfo,
            resultCount: usize,
        ) -> bool,
    >,
    pub applyRelocation: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            arch: *mut BNArchitecture,
            reloc: *mut BNRelocation,
            dest: *mut u8,
            len: usize,
        ) -> bool,
    >,
    pub getOperandForExternalRelocation: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            data: *const u8,
            addr: u64,
            length: usize,
            il: *mut BNLowLevelILFunction,
            relocation: *mut BNRelocation,
        ) -> usize,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomRelocationHandler() {
    const UNINIT: ::std::mem::MaybeUninit<BNCustomRelocationHandler> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNCustomRelocationHandler>(),
        40usize,
        concat!("Size of: ", stringify!(BNCustomRelocationHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomRelocationHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomRelocationHandler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomRelocationHandler),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomRelocationHandler),
            "::",
            stringify!(freeObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getRelocationInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomRelocationHandler),
            "::",
            stringify!(getRelocationInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).applyRelocation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomRelocationHandler),
            "::",
            stringify!(applyRelocation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getOperandForExternalRelocation) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomRelocationHandler),
            "::",
            stringify!(getOperandForExternalRelocation)
        )
    );
}
pub const BNTypeParserOption_IncludeSystemTypes: BNTypeParserOption = 0;
pub const BNTypeParserOption_BuiltinMacros: BNTypeParserOption = 1;
pub type BNTypeParserOption = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNParsedType {
    pub name: BNQualifiedName,
    pub type_: *mut BNType,
    pub isUser: bool,
}
#[test]
fn bindgen_test_layout_BNParsedType() {
    const UNINIT: ::std::mem::MaybeUninit<BNParsedType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNParsedType>(),
        40usize,
        concat!("Size of: ", stringify!(BNParsedType))
    );
    assert_eq!(
        ::std::mem::align_of::<BNParsedType>(),
        8usize,
        concat!("Alignment of ", stringify!(BNParsedType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNParsedType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNParsedType),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isUser) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNParsedType),
            "::",
            stringify!(isUser)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeParserResult {
    pub types: *mut BNParsedType,
    pub variables: *mut BNParsedType,
    pub functions: *mut BNParsedType,
    pub typeCount: usize,
    pub variableCount: usize,
    pub functionCount: usize,
}
#[test]
fn bindgen_test_layout_BNTypeParserResult() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeParserResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeParserResult>(),
        48usize,
        concat!("Size of: ", stringify!(BNTypeParserResult))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeParserResult>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeParserResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(typeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variableCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(variableCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserResult),
            "::",
            stringify!(functionCount)
        )
    );
}
pub const BNTypeParserErrorSeverity_IgnoredSeverity: BNTypeParserErrorSeverity = 0;
pub const BNTypeParserErrorSeverity_NoteSeverity: BNTypeParserErrorSeverity = 1;
pub const BNTypeParserErrorSeverity_RemarkSeverity: BNTypeParserErrorSeverity = 2;
pub const BNTypeParserErrorSeverity_WarningSeverity: BNTypeParserErrorSeverity = 3;
pub const BNTypeParserErrorSeverity_ErrorSeverity: BNTypeParserErrorSeverity = 4;
pub const BNTypeParserErrorSeverity_FatalSeverity: BNTypeParserErrorSeverity = 5;
pub type BNTypeParserErrorSeverity = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeParserError {
    pub severity: BNTypeParserErrorSeverity,
    pub message: *mut ::std::os::raw::c_char,
    pub fileName: *mut ::std::os::raw::c_char,
    pub line: u64,
    pub column: u64,
}
#[test]
fn bindgen_test_layout_BNTypeParserError() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeParserError> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeParserError>(),
        40usize,
        concat!("Size of: ", stringify!(BNTypeParserError))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeParserError>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeParserError))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).severity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserError),
            "::",
            stringify!(severity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserError),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserError),
            "::",
            stringify!(fileName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserError),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserError),
            "::",
            stringify!(column)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNQualifiedNameList {
    pub names: *mut BNQualifiedName,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_BNQualifiedNameList() {
    const UNINIT: ::std::mem::MaybeUninit<BNQualifiedNameList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNQualifiedNameList>(),
        16usize,
        concat!("Size of: ", stringify!(BNQualifiedNameList))
    );
    assert_eq!(
        ::std::mem::align_of::<BNQualifiedNameList>(),
        8usize,
        concat!("Alignment of ", stringify!(BNQualifiedNameList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameList),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNQualifiedNameList),
            "::",
            stringify!(count)
        )
    );
}
pub const BNUpdateResult_UpdateFailed: BNUpdateResult = 0;
pub const BNUpdateResult_UpdateSuccess: BNUpdateResult = 1;
pub const BNUpdateResult_AlreadyUpToDate: BNUpdateResult = 2;
pub const BNUpdateResult_UpdateAvailable: BNUpdateResult = 3;
pub type BNUpdateResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUpdateChannel {
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub latestVersion: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_BNUpdateChannel() {
    const UNINIT: ::std::mem::MaybeUninit<BNUpdateChannel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNUpdateChannel>(),
        24usize,
        concat!("Size of: ", stringify!(BNUpdateChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<BNUpdateChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(BNUpdateChannel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateChannel),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateChannel),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latestVersion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateChannel),
            "::",
            stringify!(latestVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUpdateVersion {
    pub version: *mut ::std::os::raw::c_char,
    pub notes: *mut ::std::os::raw::c_char,
    pub time: u64,
}
#[test]
fn bindgen_test_layout_BNUpdateVersion() {
    const UNINIT: ::std::mem::MaybeUninit<BNUpdateVersion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNUpdateVersion>(),
        24usize,
        concat!("Size of: ", stringify!(BNUpdateVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<BNUpdateVersion>(),
        8usize,
        concat!("Alignment of ", stringify!(BNUpdateVersion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateVersion),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateVersion),
            "::",
            stringify!(notes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUpdateVersion),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNStringReference {
    pub type_: BNStringType,
    pub start: u64,
    pub length: usize,
}
#[test]
fn bindgen_test_layout_BNStringReference() {
    const UNINIT: ::std::mem::MaybeUninit<BNStringReference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNStringReference>(),
        24usize,
        concat!("Size of: ", stringify!(BNStringReference))
    );
    assert_eq!(
        ::std::mem::align_of::<BNStringReference>(),
        8usize,
        concat!("Alignment of ", stringify!(BNStringReference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStringReference),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStringReference),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStringReference),
            "::",
            stringify!(length)
        )
    );
}
pub const BNPluginCommandType_DefaultPluginCommand: BNPluginCommandType = 0;
pub const BNPluginCommandType_AddressPluginCommand: BNPluginCommandType = 1;
pub const BNPluginCommandType_RangePluginCommand: BNPluginCommandType = 2;
pub const BNPluginCommandType_FunctionPluginCommand: BNPluginCommandType = 3;
pub const BNPluginCommandType_LowLevelILFunctionPluginCommand: BNPluginCommandType = 4;
pub const BNPluginCommandType_LowLevelILInstructionPluginCommand: BNPluginCommandType = 5;
pub const BNPluginCommandType_MediumLevelILFunctionPluginCommand: BNPluginCommandType = 6;
pub const BNPluginCommandType_MediumLevelILInstructionPluginCommand: BNPluginCommandType = 7;
pub const BNPluginCommandType_HighLevelILFunctionPluginCommand: BNPluginCommandType = 8;
pub const BNPluginCommandType_HighLevelILInstructionPluginCommand: BNPluginCommandType = 9;
pub type BNPluginCommandType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNPluginCommand {
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub type_: BNPluginCommandType,
    pub context: *mut ::std::os::raw::c_void,
    pub defaultCommand: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
    >,
    pub addressCommand: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView, addr: u64),
    >,
    pub rangeCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            addr: u64,
            len: u64,
        ),
    >,
    pub functionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ),
    >,
    pub lowLevelILFunctionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNLowLevelILFunction,
        ),
    >,
    pub lowLevelILInstructionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNLowLevelILFunction,
            instr: usize,
        ),
    >,
    pub mediumLevelILFunctionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNMediumLevelILFunction,
        ),
    >,
    pub mediumLevelILInstructionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNMediumLevelILFunction,
            instr: usize,
        ),
    >,
    pub highLevelILFunctionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNHighLevelILFunction,
        ),
    >,
    pub highLevelILInstructionCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNHighLevelILFunction,
            instr: usize,
        ),
    >,
    pub defaultIsValid: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView) -> bool,
    >,
    pub addressIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            addr: u64,
        ) -> bool,
    >,
    pub rangeIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            addr: u64,
            len: u64,
        ) -> bool,
    >,
    pub functionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNFunction,
        ) -> bool,
    >,
    pub lowLevelILFunctionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNLowLevelILFunction,
        ) -> bool,
    >,
    pub lowLevelILInstructionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNLowLevelILFunction,
            instr: usize,
        ) -> bool,
    >,
    pub mediumLevelILFunctionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNMediumLevelILFunction,
        ) -> bool,
    >,
    pub mediumLevelILInstructionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNMediumLevelILFunction,
            instr: usize,
        ) -> bool,
    >,
    pub highLevelILFunctionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNHighLevelILFunction,
        ) -> bool,
    >,
    pub highLevelILInstructionIsValid: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            func: *mut BNHighLevelILFunction,
            instr: usize,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNPluginCommand() {
    const UNINIT: ::std::mem::MaybeUninit<BNPluginCommand> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNPluginCommand>(),
        192usize,
        concat!("Size of: ", stringify!(BNPluginCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<BNPluginCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(BNPluginCommand))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultCommand) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(defaultCommand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressCommand) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(addressCommand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeCommand) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(rangeCommand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionCommand) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(functionCommand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowLevelILFunctionCommand) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(lowLevelILFunctionCommand)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lowLevelILInstructionCommand) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(lowLevelILInstructionCommand)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mediumLevelILFunctionCommand) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(mediumLevelILFunctionCommand)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mediumLevelILInstructionCommand) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(mediumLevelILInstructionCommand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).highLevelILFunctionCommand) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(highLevelILFunctionCommand)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).highLevelILInstructionCommand) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(highLevelILInstructionCommand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultIsValid) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(defaultIsValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressIsValid) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(addressIsValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeIsValid) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(rangeIsValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionIsValid) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(functionIsValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowLevelILFunctionIsValid) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(lowLevelILFunctionIsValid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lowLevelILInstructionIsValid) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(lowLevelILInstructionIsValid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mediumLevelILFunctionIsValid) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(mediumLevelILFunctionIsValid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mediumLevelILInstructionIsValid) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(mediumLevelILInstructionIsValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).highLevelILFunctionIsValid) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(highLevelILFunctionIsValid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).highLevelILInstructionIsValid) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPluginCommand),
            "::",
            stringify!(highLevelILInstructionIsValid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomCallingConvention {
    pub context: *mut ::std::os::raw::c_void,
    pub freeObject: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub getCallerSavedRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getCalleeSavedRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getIntegerArgumentRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getFloatArgumentRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub freeRegisterList: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, regs: *mut u32),
    >,
    pub areArgumentRegistersSharedIndex:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub isStackReservedForArgumentRegisters:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub isStackAdjustedOnReturn:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub isEligibleForHeuristics:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub getIntegerReturnValueRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getHighIntegerReturnValueRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getFloatReturnValueRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getGlobalPointerRegister:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> u32>,
    pub getImplicitlyDefinedRegisters: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, count: *mut usize) -> *mut u32,
    >,
    pub getIncomingRegisterValue: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            reg: u32,
            func: *mut BNFunction,
            result: *mut BNRegisterValue,
        ),
    >,
    pub getIncomingFlagValue: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            flag: u32,
            func: *mut BNFunction,
            result: *mut BNRegisterValue,
        ),
    >,
    pub getIncomingVariableForParameterVariable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            var: *const BNVariable,
            func: *mut BNFunction,
            result: *mut BNVariable,
        ),
    >,
    pub getParameterVariableForIncomingVariable: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            var: *const BNVariable,
            func: *mut BNFunction,
            result: *mut BNVariable,
        ),
    >,
    pub areArgumentRegistersUsedForVarArgs:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
}
#[test]
fn bindgen_test_layout_BNCustomCallingConvention() {
    const UNINIT: ::std::mem::MaybeUninit<BNCustomCallingConvention> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNCustomCallingConvention>(),
        168usize,
        concat!("Size of: ", stringify!(BNCustomCallingConvention))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomCallingConvention>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomCallingConvention))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(freeObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getCallerSavedRegisters) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getCallerSavedRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getCalleeSavedRegisters) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getCalleeSavedRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getIntegerArgumentRegisters) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getIntegerArgumentRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFloatArgumentRegisters) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getFloatArgumentRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeRegisterList) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(freeRegisterList)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).areArgumentRegistersSharedIndex) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(areArgumentRegistersSharedIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).isStackReservedForArgumentRegisters) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(isStackReservedForArgumentRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isStackAdjustedOnReturn) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(isStackAdjustedOnReturn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isEligibleForHeuristics) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(isEligibleForHeuristics)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getIntegerReturnValueRegister) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getIntegerReturnValueRegister)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getHighIntegerReturnValueRegister) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getHighIntegerReturnValueRegister)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFloatReturnValueRegister) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getFloatReturnValueRegister)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getGlobalPointerRegister) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getGlobalPointerRegister)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getImplicitlyDefinedRegisters) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getImplicitlyDefinedRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getIncomingRegisterValue) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getIncomingRegisterValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getIncomingFlagValue) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getIncomingFlagValue)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getIncomingVariableForParameterVariable) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getIncomingVariableForParameterVariable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getParameterVariableForIncomingVariable) as usize
                - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(getParameterVariableForIncomingVariable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).areArgumentRegistersUsedForVarArgs) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomCallingConvention),
            "::",
            stringify!(areArgumentRegistersUsedForVarArgs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNVariableNameAndType {
    pub var: BNVariable,
    pub type_: *mut BNType,
    pub name: *mut ::std::os::raw::c_char,
    pub autoDefined: bool,
    pub typeConfidence: u8,
}
#[test]
fn bindgen_test_layout_BNVariableNameAndType() {
    const UNINIT: ::std::mem::MaybeUninit<BNVariableNameAndType> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNVariableNameAndType>(),
        40usize,
        concat!("Size of: ", stringify!(BNVariableNameAndType))
    );
    assert_eq!(
        ::std::mem::align_of::<BNVariableNameAndType>(),
        8usize,
        concat!("Alignment of ", stringify!(BNVariableNameAndType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableNameAndType),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableNameAndType),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableNameAndType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoDefined) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableNameAndType),
            "::",
            stringify!(autoDefined)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeConfidence) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVariableNameAndType),
            "::",
            stringify!(typeConfidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNStackVariableReference {
    pub sourceOperand: u32,
    pub typeConfidence: u8,
    pub type_: *mut BNType,
    pub name: *mut ::std::os::raw::c_char,
    pub varIdentifier: u64,
    pub referencedOffset: i64,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_BNStackVariableReference() {
    const UNINIT: ::std::mem::MaybeUninit<BNStackVariableReference> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNStackVariableReference>(),
        48usize,
        concat!("Size of: ", stringify!(BNStackVariableReference))
    );
    assert_eq!(
        ::std::mem::align_of::<BNStackVariableReference>(),
        8usize,
        concat!("Alignment of ", stringify!(BNStackVariableReference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceOperand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(sourceOperand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeConfidence) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(typeConfidence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).varIdentifier) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(varIdentifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referencedOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(referencedOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNStackVariableReference),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNIndirectBranchInfo {
    pub sourceArch: *mut BNArchitecture,
    pub sourceAddr: u64,
    pub destArch: *mut BNArchitecture,
    pub destAddr: u64,
    pub autoDefined: bool,
}
#[test]
fn bindgen_test_layout_BNIndirectBranchInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNIndirectBranchInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNIndirectBranchInfo>(),
        40usize,
        concat!("Size of: ", stringify!(BNIndirectBranchInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNIndirectBranchInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNIndirectBranchInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceArch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNIndirectBranchInfo),
            "::",
            stringify!(sourceArch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNIndirectBranchInfo),
            "::",
            stringify!(sourceAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destArch) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNIndirectBranchInfo),
            "::",
            stringify!(destArch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destAddr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNIndirectBranchInfo),
            "::",
            stringify!(destAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoDefined) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNIndirectBranchInfo),
            "::",
            stringify!(autoDefined)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNArchitectureAndAddress {
    pub arch: *mut BNArchitecture,
    pub address: u64,
}
#[test]
fn bindgen_test_layout_BNArchitectureAndAddress() {
    const UNINIT: ::std::mem::MaybeUninit<BNArchitectureAndAddress> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNArchitectureAndAddress>(),
        16usize,
        concat!("Size of: ", stringify!(BNArchitectureAndAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<BNArchitectureAndAddress>(),
        8usize,
        concat!("Alignment of ", stringify!(BNArchitectureAndAddress))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNArchitectureAndAddress),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNArchitectureAndAddress),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNUserVariableValue {
    pub var: BNVariable,
    pub defSite: BNArchitectureAndAddress,
    pub value: BNPossibleValueSet,
}
#[test]
fn bindgen_test_layout_BNUserVariableValue() {
    const UNINIT: ::std::mem::MaybeUninit<BNUserVariableValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNUserVariableValue>(),
        96usize,
        concat!("Size of: ", stringify!(BNUserVariableValue))
    );
    assert_eq!(
        ::std::mem::align_of::<BNUserVariableValue>(),
        8usize,
        concat!("Alignment of ", stringify!(BNUserVariableValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUserVariableValue),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defSite) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUserVariableValue),
            "::",
            stringify!(defSite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNUserVariableValue),
            "::",
            stringify!(value)
        )
    );
}
pub const BNFunctionUpdateType_UserFunctionUpdate: BNFunctionUpdateType = 0;
pub const BNFunctionUpdateType_FullAutoFunctionUpdate: BNFunctionUpdateType = 1;
pub const BNFunctionUpdateType_IncrementalAutoFunctionUpdate: BNFunctionUpdateType = 2;
pub type BNFunctionUpdateType = ::std::os::raw::c_uint;
pub const BNAnalysisState_InitialState: BNAnalysisState = 0;
pub const BNAnalysisState_HoldState: BNAnalysisState = 1;
pub const BNAnalysisState_IdleState: BNAnalysisState = 2;
pub const BNAnalysisState_DisassembleState: BNAnalysisState = 3;
pub const BNAnalysisState_AnalyzeState: BNAnalysisState = 4;
pub const BNAnalysisState_ExtendedAnalyzeState: BNAnalysisState = 5;
pub type BNAnalysisState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNActiveAnalysisInfo {
    pub func: *mut BNFunction,
    pub analysisTime: u64,
    pub updateCount: usize,
    pub submitCount: usize,
}
#[test]
fn bindgen_test_layout_BNActiveAnalysisInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNActiveAnalysisInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNActiveAnalysisInfo>(),
        32usize,
        concat!("Size of: ", stringify!(BNActiveAnalysisInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNActiveAnalysisInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNActiveAnalysisInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNActiveAnalysisInfo),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).analysisTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNActiveAnalysisInfo),
            "::",
            stringify!(analysisTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updateCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNActiveAnalysisInfo),
            "::",
            stringify!(updateCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submitCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNActiveAnalysisInfo),
            "::",
            stringify!(submitCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAnalysisInfo {
    pub state: BNAnalysisState,
    pub analysisTime: u64,
    pub activeInfo: *mut BNActiveAnalysisInfo,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_BNAnalysisInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNAnalysisInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNAnalysisInfo>(),
        32usize,
        concat!("Size of: ", stringify!(BNAnalysisInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNAnalysisInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNAnalysisInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisInfo),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).analysisTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisInfo),
            "::",
            stringify!(analysisTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activeInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisInfo),
            "::",
            stringify!(activeInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisInfo),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAnalysisProgress {
    pub state: BNAnalysisState,
    pub count: usize,
    pub total: usize,
}
#[test]
fn bindgen_test_layout_BNAnalysisProgress() {
    const UNINIT: ::std::mem::MaybeUninit<BNAnalysisProgress> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNAnalysisProgress>(),
        24usize,
        concat!("Size of: ", stringify!(BNAnalysisProgress))
    );
    assert_eq!(
        ::std::mem::align_of::<BNAnalysisProgress>(),
        8usize,
        concat!("Alignment of ", stringify!(BNAnalysisProgress))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisProgress),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisProgress),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisProgress),
            "::",
            stringify!(total)
        )
    );
}
pub const BNAnalysisMode_FullAnalysisMode: BNAnalysisMode = 0;
pub const BNAnalysisMode_IntermediateAnalysisMode: BNAnalysisMode = 1;
pub const BNAnalysisMode_BasicAnalysisMode: BNAnalysisMode = 2;
pub const BNAnalysisMode_ControlFlowAnalysisMode: BNAnalysisMode = 3;
pub type BNAnalysisMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAnalysisParameters {
    pub maxAnalysisTime: u64,
    pub maxFunctionSize: u64,
    pub maxFunctionAnalysisTime: u64,
    pub maxFunctionUpdateCount: usize,
    pub maxFunctionSubmitCount: usize,
    pub suppressNewAutoFunctionAnalysis: bool,
    pub mode: BNAnalysisMode,
    pub alwaysAnalyzeIndirectBranches: bool,
    pub advancedAnalysisCacheSize: usize,
}
#[test]
fn bindgen_test_layout_BNAnalysisParameters() {
    const UNINIT: ::std::mem::MaybeUninit<BNAnalysisParameters> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNAnalysisParameters>(),
        64usize,
        concat!("Size of: ", stringify!(BNAnalysisParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<BNAnalysisParameters>(),
        8usize,
        concat!("Alignment of ", stringify!(BNAnalysisParameters))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxAnalysisTime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(maxAnalysisTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFunctionSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(maxFunctionSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFunctionAnalysisTime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(maxFunctionAnalysisTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFunctionUpdateCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(maxFunctionUpdateCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFunctionSubmitCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(maxFunctionSubmitCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).suppressNewAutoFunctionAnalysis) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(suppressNewAutoFunctionAnalysis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).alwaysAnalyzeIndirectBranches) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(alwaysAnalyzeIndirectBranches)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advancedAnalysisCacheSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAnalysisParameters),
            "::",
            stringify!(advancedAnalysisCacheSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadInstanceResponse {
    pub statusCode: u16,
    pub headerCount: u64,
    pub headerKeys: *mut *mut ::std::os::raw::c_char,
    pub headerValues: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_BNDownloadInstanceResponse() {
    const UNINIT: ::std::mem::MaybeUninit<BNDownloadInstanceResponse> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDownloadInstanceResponse>(),
        32usize,
        concat!("Size of: ", stringify!(BNDownloadInstanceResponse))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDownloadInstanceResponse>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDownloadInstanceResponse))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).statusCode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceResponse),
            "::",
            stringify!(statusCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceResponse),
            "::",
            stringify!(headerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerKeys) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceResponse),
            "::",
            stringify!(headerKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerValues) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceResponse),
            "::",
            stringify!(headerValues)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadInstanceInputOutputCallbacks {
    pub readCallback: ::std::option::Option<
        unsafe extern "C" fn(data: *mut u8, len: u64, ctxt: *mut ::std::os::raw::c_void) -> i64,
    >,
    pub readContext: *mut ::std::os::raw::c_void,
    pub writeCallback: ::std::option::Option<
        unsafe extern "C" fn(data: *mut u8, len: u64, ctxt: *mut ::std::os::raw::c_void) -> u64,
    >,
    pub writeContext: *mut ::std::os::raw::c_void,
    pub progressCallback: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, progress: u64, total: u64) -> bool,
    >,
    pub progressContext: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_BNDownloadInstanceInputOutputCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNDownloadInstanceInputOutputCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDownloadInstanceInputOutputCallbacks>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<BNDownloadInstanceInputOutputCallbacks>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNDownloadInstanceInputOutputCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readCallback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(readCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readContext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(readContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeCallback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(writeCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeContext) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(writeContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressCallback) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(progressCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressContext) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceInputOutputCallbacks),
            "::",
            stringify!(progressContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadInstanceOutputCallbacks {
    pub writeCallback: ::std::option::Option<
        unsafe extern "C" fn(data: *mut u8, len: u64, ctxt: *mut ::std::os::raw::c_void) -> u64,
    >,
    pub writeContext: *mut ::std::os::raw::c_void,
    pub progressCallback: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, progress: u64, total: u64) -> bool,
    >,
    pub progressContext: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_BNDownloadInstanceOutputCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNDownloadInstanceOutputCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDownloadInstanceOutputCallbacks>(),
        32usize,
        concat!("Size of: ", stringify!(BNDownloadInstanceOutputCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDownloadInstanceOutputCallbacks>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNDownloadInstanceOutputCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeCallback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceOutputCallbacks),
            "::",
            stringify!(writeCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeContext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceOutputCallbacks),
            "::",
            stringify!(writeContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressCallback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceOutputCallbacks),
            "::",
            stringify!(progressCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressContext) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceOutputCallbacks),
            "::",
            stringify!(progressContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadInstanceCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub destroyInstance:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub performRequest: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            url: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub performCustomRequest: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            method: *const ::std::os::raw::c_char,
            url: *const ::std::os::raw::c_char,
            headerCount: u64,
            headerKeys: *const *const ::std::os::raw::c_char,
            headerValues: *const *const ::std::os::raw::c_char,
            response: *mut *mut BNDownloadInstanceResponse,
        ) -> ::std::os::raw::c_int,
    >,
    pub freeResponse: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            response: *mut BNDownloadInstanceResponse,
        ),
    >,
}
#[test]
fn bindgen_test_layout_BNDownloadInstanceCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNDownloadInstanceCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDownloadInstanceCallbacks>(),
        40usize,
        concat!("Size of: ", stringify!(BNDownloadInstanceCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDownloadInstanceCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDownloadInstanceCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroyInstance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceCallbacks),
            "::",
            stringify!(destroyInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).performRequest) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceCallbacks),
            "::",
            stringify!(performRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).performCustomRequest) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceCallbacks),
            "::",
            stringify!(performCustomRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeResponse) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadInstanceCallbacks),
            "::",
            stringify!(freeResponse)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDownloadProviderCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub createInstance: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> *mut BNDownloadInstance,
    >,
}
#[test]
fn bindgen_test_layout_BNDownloadProviderCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNDownloadProviderCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDownloadProviderCallbacks>(),
        16usize,
        concat!("Size of: ", stringify!(BNDownloadProviderCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDownloadProviderCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDownloadProviderCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadProviderCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createInstance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDownloadProviderCallbacks),
            "::",
            stringify!(createInstance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNWebsocketClientOutputCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub connectedCallback:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
    pub disconnectedCallback:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub errorCallback: ::std::option::Option<
        unsafe extern "C" fn(msg: *const ::std::os::raw::c_char, ctxt: *mut ::std::os::raw::c_void),
    >,
    pub readCallback: ::std::option::Option<
        unsafe extern "C" fn(data: *mut u8, len: u64, ctxt: *mut ::std::os::raw::c_void) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNWebsocketClientOutputCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNWebsocketClientOutputCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNWebsocketClientOutputCallbacks>(),
        40usize,
        concat!("Size of: ", stringify!(BNWebsocketClientOutputCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNWebsocketClientOutputCallbacks>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNWebsocketClientOutputCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketClientOutputCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connectedCallback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketClientOutputCallbacks),
            "::",
            stringify!(connectedCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disconnectedCallback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketClientOutputCallbacks),
            "::",
            stringify!(disconnectedCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errorCallback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketClientOutputCallbacks),
            "::",
            stringify!(errorCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readCallback) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketClientOutputCallbacks),
            "::",
            stringify!(readCallback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNWebsocketClientCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub destroyClient:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub connect: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            host: *const ::std::os::raw::c_char,
            headerCount: u64,
            headerKeys: *const *const ::std::os::raw::c_char,
            headerValues: *const *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(data: *const u8, len: u64, ctxt: *mut ::std::os::raw::c_void) -> bool,
    >,
    pub disconnect:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> bool>,
}
#[test]
fn bindgen_test_layout_BNWebsocketClientCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNWebsocketClientCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNWebsocketClientCallbacks>(),
        40usize,
        concat!("Size of: ", stringify!(BNWebsocketClientCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNWebsocketClientCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNWebsocketClientCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketClientCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroyClient) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketClientCallbacks),
            "::",
            stringify!(destroyClient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketClientCallbacks),
            "::",
            stringify!(connect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketClientCallbacks),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disconnect) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketClientCallbacks),
            "::",
            stringify!(disconnect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNWebsocketProviderCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub createClient: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> *mut BNWebsocketClient,
    >,
}
#[test]
fn bindgen_test_layout_BNWebsocketProviderCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNWebsocketProviderCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNWebsocketProviderCallbacks>(),
        16usize,
        concat!("Size of: ", stringify!(BNWebsocketProviderCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNWebsocketProviderCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNWebsocketProviderCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketProviderCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createClient) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNWebsocketProviderCallbacks),
            "::",
            stringify!(createClient)
        )
    );
}
pub const BNFindFlag_FindCaseSensitive: BNFindFlag = 0;
pub const BNFindFlag_FindCaseInsensitive: BNFindFlag = 1;
pub type BNFindFlag = ::std::os::raw::c_uint;
pub const BNFindRangeType_AllRangeType: BNFindRangeType = 0;
pub const BNFindRangeType_CustomRangeType: BNFindRangeType = 1;
pub const BNFindRangeType_CurrentFunctionRangeType: BNFindRangeType = 2;
pub type BNFindRangeType = ::std::os::raw::c_uint;
pub const BNFindType_FindTypeRawString: BNFindType = 0;
pub const BNFindType_FindTypeEscapedString: BNFindType = 1;
pub const BNFindType_FindTypeText: BNFindType = 2;
pub const BNFindType_FindTypeConstant: BNFindType = 3;
pub const BNFindType_FindTypeBytes: BNFindType = 4;
pub type BNFindType = ::std::os::raw::c_uint;
pub const BNScriptingProviderInputReadyState_NotReadyForInput: BNScriptingProviderInputReadyState =
    0;
pub const BNScriptingProviderInputReadyState_ReadyForScriptExecution:
    BNScriptingProviderInputReadyState = 1;
pub const BNScriptingProviderInputReadyState_ReadyForScriptProgramInput:
    BNScriptingProviderInputReadyState = 2;
pub type BNScriptingProviderInputReadyState = ::std::os::raw::c_uint;
pub const BNScriptingProviderExecuteResult_InvalidScriptInput: BNScriptingProviderExecuteResult = 0;
pub const BNScriptingProviderExecuteResult_IncompleteScriptInput: BNScriptingProviderExecuteResult =
    1;
pub const BNScriptingProviderExecuteResult_SuccessfulScriptExecution:
    BNScriptingProviderExecuteResult = 2;
pub const BNScriptingProviderExecuteResult_ScriptExecutionCancelled:
    BNScriptingProviderExecuteResult = 3;
pub type BNScriptingProviderExecuteResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNScriptingInstanceCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub destroyInstance:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub externalRefTaken:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub externalRefReleased:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub executeScriptInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            input: *const ::std::os::raw::c_char,
        ) -> BNScriptingProviderExecuteResult,
    >,
    pub executeScriptInputFromFilename: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            input: *const ::std::os::raw::c_char,
        ) -> BNScriptingProviderExecuteResult,
    >,
    pub cancelScriptInput:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub releaseBinaryView: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
    >,
    pub setCurrentBinaryView: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
    >,
    pub setCurrentFunction: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, func: *mut BNFunction),
    >,
    pub setCurrentBasicBlock: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, block: *mut BNBasicBlock),
    >,
    pub setCurrentAddress:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, addr: u64)>,
    pub setCurrentSelection: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, begin: u64, end: u64),
    >,
    pub completeInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
            state: u64,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub stop: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_BNScriptingInstanceCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNScriptingInstanceCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNScriptingInstanceCallbacks>(),
        120usize,
        concat!("Size of: ", stringify!(BNScriptingInstanceCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNScriptingInstanceCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNScriptingInstanceCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroyInstance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(destroyInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalRefTaken) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(externalRefTaken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalRefReleased) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(externalRefReleased)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executeScriptInput) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(executeScriptInput)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).executeScriptInputFromFilename) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(executeScriptInputFromFilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancelScriptInput) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(cancelScriptInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).releaseBinaryView) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(releaseBinaryView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setCurrentBinaryView) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(setCurrentBinaryView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setCurrentFunction) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(setCurrentFunction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setCurrentBasicBlock) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(setCurrentBasicBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setCurrentAddress) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(setCurrentAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setCurrentSelection) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(setCurrentSelection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completeInput) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(completeInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingInstanceCallbacks),
            "::",
            stringify!(stop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNScriptingProviderCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub createInstance: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> *mut BNScriptingInstance,
    >,
    pub loadModule: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            repoPath: *const ::std::os::raw::c_char,
            pluginPath: *const ::std::os::raw::c_char,
            force: bool,
        ) -> bool,
    >,
    pub installModules: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            modules: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNScriptingProviderCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNScriptingProviderCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNScriptingProviderCallbacks>(),
        32usize,
        concat!("Size of: ", stringify!(BNScriptingProviderCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNScriptingProviderCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNScriptingProviderCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingProviderCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createInstance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingProviderCallbacks),
            "::",
            stringify!(createInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadModule) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingProviderCallbacks),
            "::",
            stringify!(loadModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).installModules) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingProviderCallbacks),
            "::",
            stringify!(installModules)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNScriptingOutputListener {
    pub context: *mut ::std::os::raw::c_void,
    pub output: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub warning: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub error: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub inputReadyStateChanged: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            state: BNScriptingProviderInputReadyState,
        ),
    >,
}
#[test]
fn bindgen_test_layout_BNScriptingOutputListener() {
    const UNINIT: ::std::mem::MaybeUninit<BNScriptingOutputListener> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNScriptingOutputListener>(),
        40usize,
        concat!("Size of: ", stringify!(BNScriptingOutputListener))
    );
    assert_eq!(
        ::std::mem::align_of::<BNScriptingOutputListener>(),
        8usize,
        concat!("Alignment of ", stringify!(BNScriptingOutputListener))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingOutputListener),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingOutputListener),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).warning) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingOutputListener),
            "::",
            stringify!(warning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingOutputListener),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputReadyStateChanged) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNScriptingOutputListener),
            "::",
            stringify!(inputReadyStateChanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMainThreadCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub addAction: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, action: *mut BNMainThreadAction),
    >,
}
#[test]
fn bindgen_test_layout_BNMainThreadCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNMainThreadCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNMainThreadCallbacks>(),
        16usize,
        concat!("Size of: ", stringify!(BNMainThreadCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMainThreadCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMainThreadCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMainThreadCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addAction) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMainThreadCallbacks),
            "::",
            stringify!(addAction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BNTypeParserCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub getOptionText: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            option: BNTypeParserOption,
            value: *const ::std::os::raw::c_char,
            result: *mut *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub preprocessSource: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            source: *const ::std::os::raw::c_char,
            fileName: *const ::std::os::raw::c_char,
            platform: *mut BNPlatform,
            existingTypes: *const BNQualifiedNameTypeAndId,
            existingTypeCount: usize,
            options: *const *const ::std::os::raw::c_char,
            optionCount: usize,
            includeDirs: *const *const ::std::os::raw::c_char,
            includeDirCount: usize,
            output: *mut *mut ::std::os::raw::c_char,
            errors: *mut *mut BNTypeParserError,
            errorCount: *mut usize,
        ) -> bool,
    >,
    pub parseTypesFromSource: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            source: *const ::std::os::raw::c_char,
            fileName: *const ::std::os::raw::c_char,
            platform: *mut BNPlatform,
            existingTypes: *const BNQualifiedNameTypeAndId,
            existingTypeCount: usize,
            options: *const *const ::std::os::raw::c_char,
            optionCount: usize,
            includeDirs: *const *const ::std::os::raw::c_char,
            includeDirCount: usize,
            autoTypeSource: *const ::std::os::raw::c_char,
            result: *mut BNTypeParserResult,
            errors: *mut *mut BNTypeParserError,
            errorCount: *mut usize,
        ) -> bool,
    >,
    pub parseTypeString: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            source: *const ::std::os::raw::c_char,
            platform: *mut BNPlatform,
            existingTypes: *const BNQualifiedNameTypeAndId,
            existingTypeCount: usize,
            result: *mut BNQualifiedNameAndType,
            errors: *mut *mut BNTypeParserError,
            errorCount: *mut usize,
        ) -> bool,
    >,
    pub freeString: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            string: *mut ::std::os::raw::c_char,
        ),
    >,
    pub freeResult: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, result: *mut BNTypeParserResult),
    >,
    pub freeErrorList: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            errors: *mut BNTypeParserError,
            errorCount: usize,
        ),
    >,
}
#[test]
fn bindgen_test_layout_BNTypeParserCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeParserCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeParserCallbacks>(),
        64usize,
        concat!("Size of: ", stringify!(BNTypeParserCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeParserCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeParserCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getOptionText) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserCallbacks),
            "::",
            stringify!(getOptionText)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preprocessSource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserCallbacks),
            "::",
            stringify!(preprocessSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parseTypesFromSource) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserCallbacks),
            "::",
            stringify!(parseTypesFromSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parseTypeString) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserCallbacks),
            "::",
            stringify!(parseTypeString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeString) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserCallbacks),
            "::",
            stringify!(freeString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeResult) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserCallbacks),
            "::",
            stringify!(freeResult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeErrorList) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeParserCallbacks),
            "::",
            stringify!(freeErrorList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypePrinterCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub getTypeTokens: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            type_: *mut BNType,
            platform: *mut BNPlatform,
            name: *mut BNQualifiedName,
            baseConfidence: u8,
            escaping: BNTokenEscapingType,
            result: *mut *mut BNInstructionTextToken,
            resultCount: *mut usize,
        ) -> bool,
    >,
    pub getTypeTokensBeforeName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            type_: *mut BNType,
            platform: *mut BNPlatform,
            baseConfidence: u8,
            parentType: *mut BNType,
            escaping: BNTokenEscapingType,
            result: *mut *mut BNInstructionTextToken,
            resultCount: *mut usize,
        ) -> bool,
    >,
    pub getTypeTokensAfterName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            type_: *mut BNType,
            platform: *mut BNPlatform,
            baseConfidence: u8,
            parentType: *mut BNType,
            escaping: BNTokenEscapingType,
            result: *mut *mut BNInstructionTextToken,
            resultCount: *mut usize,
        ) -> bool,
    >,
    pub getTypeString: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            type_: *mut BNType,
            platform: *mut BNPlatform,
            name: *mut BNQualifiedName,
            escaping: BNTokenEscapingType,
            result: *mut *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getTypeStringBeforeName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            type_: *mut BNType,
            platform: *mut BNPlatform,
            escaping: BNTokenEscapingType,
            result: *mut *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getTypeStringAfterName: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            type_: *mut BNType,
            platform: *mut BNPlatform,
            escaping: BNTokenEscapingType,
            result: *mut *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getTypeLines: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            type_: *mut BNType,
            data: *mut BNBinaryView,
            name: *mut BNQualifiedName,
            lineWidth: ::std::os::raw::c_int,
            collapsed: bool,
            escaping: BNTokenEscapingType,
            result: *mut *mut BNTypeDefinitionLine,
            resultCount: *mut usize,
        ) -> bool,
    >,
    pub printAllTypes: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            names: *mut BNQualifiedName,
            types: *mut *mut BNType,
            typeCount: usize,
            data: *mut BNBinaryView,
            lineWidth: ::std::os::raw::c_int,
            escaping: BNTokenEscapingType,
            result: *mut *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub freeTokens: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            tokens: *mut BNInstructionTextToken,
            count: usize,
        ),
    >,
    pub freeString: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            string: *mut ::std::os::raw::c_char,
        ),
    >,
    pub freeLines: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            lines: *mut BNTypeDefinitionLine,
            count: usize,
        ),
    >,
}
#[test]
fn bindgen_test_layout_BNTypePrinterCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypePrinterCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypePrinterCallbacks>(),
        96usize,
        concat!("Size of: ", stringify!(BNTypePrinterCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypePrinterCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypePrinterCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTypeTokens) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(getTypeTokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTypeTokensBeforeName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(getTypeTokensBeforeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTypeTokensAfterName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(getTypeTokensAfterName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTypeString) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(getTypeString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTypeStringBeforeName) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(getTypeStringBeforeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTypeStringAfterName) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(getTypeStringAfterName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTypeLines) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(getTypeLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).printAllTypes) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(printAllTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeTokens) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(freeTokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeString) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(freeString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeLines) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypePrinterCallbacks),
            "::",
            stringify!(freeLines)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNConstantReference {
    pub value: i64,
    pub size: usize,
    pub pointer: bool,
    pub intermediate: bool,
}
#[test]
fn bindgen_test_layout_BNConstantReference() {
    const UNINIT: ::std::mem::MaybeUninit<BNConstantReference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNConstantReference>(),
        24usize,
        concat!("Size of: ", stringify!(BNConstantReference))
    );
    assert_eq!(
        ::std::mem::align_of::<BNConstantReference>(),
        8usize,
        concat!("Alignment of ", stringify!(BNConstantReference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNConstantReference),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNConstantReference),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNConstantReference),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intermediate) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(BNConstantReference),
            "::",
            stringify!(intermediate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMetadataValueStore {
    pub size: usize,
    pub keys: *mut *mut ::std::os::raw::c_char,
    pub values: *mut *mut BNMetadata,
}
#[test]
fn bindgen_test_layout_BNMetadataValueStore() {
    const UNINIT: ::std::mem::MaybeUninit<BNMetadataValueStore> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNMetadataValueStore>(),
        24usize,
        concat!("Size of: ", stringify!(BNMetadataValueStore))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMetadataValueStore>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMetadataValueStore))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMetadataValueStore),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMetadataValueStore),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMetadataValueStore),
            "::",
            stringify!(values)
        )
    );
}
pub const BNSaveOption_RemoveUndoData: BNSaveOption = 0;
pub const BNSaveOption_TrimSnapshots: BNSaveOption = 1;
pub const BNSaveOption_PurgeOriginalFilenamePath: BNSaveOption = 2;
pub type BNSaveOption = ::std::os::raw::c_uint;
pub const BNMessageBoxIcon_InformationIcon: BNMessageBoxIcon = 0;
pub const BNMessageBoxIcon_QuestionIcon: BNMessageBoxIcon = 1;
pub const BNMessageBoxIcon_WarningIcon: BNMessageBoxIcon = 2;
pub const BNMessageBoxIcon_ErrorIcon: BNMessageBoxIcon = 3;
pub type BNMessageBoxIcon = ::std::os::raw::c_uint;
pub const BNMessageBoxButtonSet_OKButtonSet: BNMessageBoxButtonSet = 0;
pub const BNMessageBoxButtonSet_YesNoButtonSet: BNMessageBoxButtonSet = 1;
pub const BNMessageBoxButtonSet_YesNoCancelButtonSet: BNMessageBoxButtonSet = 2;
pub type BNMessageBoxButtonSet = ::std::os::raw::c_uint;
pub const BNMessageBoxButtonResult_NoButton: BNMessageBoxButtonResult = 0;
pub const BNMessageBoxButtonResult_YesButton: BNMessageBoxButtonResult = 1;
pub const BNMessageBoxButtonResult_OKButton: BNMessageBoxButtonResult = 2;
pub const BNMessageBoxButtonResult_CancelButton: BNMessageBoxButtonResult = 3;
pub type BNMessageBoxButtonResult = ::std::os::raw::c_uint;
pub const BNFormInputFieldType_LabelFormField: BNFormInputFieldType = 0;
pub const BNFormInputFieldType_SeparatorFormField: BNFormInputFieldType = 1;
pub const BNFormInputFieldType_TextLineFormField: BNFormInputFieldType = 2;
pub const BNFormInputFieldType_MultilineTextFormField: BNFormInputFieldType = 3;
pub const BNFormInputFieldType_IntegerFormField: BNFormInputFieldType = 4;
pub const BNFormInputFieldType_AddressFormField: BNFormInputFieldType = 5;
pub const BNFormInputFieldType_ChoiceFormField: BNFormInputFieldType = 6;
pub const BNFormInputFieldType_OpenFileNameFormField: BNFormInputFieldType = 7;
pub const BNFormInputFieldType_SaveFileNameFormField: BNFormInputFieldType = 8;
pub const BNFormInputFieldType_DirectoryNameFormField: BNFormInputFieldType = 9;
pub type BNFormInputFieldType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNFormInputField {
    pub type_: BNFormInputFieldType,
    pub prompt: *const ::std::os::raw::c_char,
    pub view: *mut BNBinaryView,
    pub currentAddress: u64,
    pub choices: *mut *const ::std::os::raw::c_char,
    pub count: usize,
    pub ext: *const ::std::os::raw::c_char,
    pub defaultName: *const ::std::os::raw::c_char,
    pub intResult: i64,
    pub addressResult: u64,
    pub stringResult: *mut ::std::os::raw::c_char,
    pub indexResult: usize,
    pub hasDefault: bool,
    pub intDefault: i64,
    pub addressDefault: u64,
    pub stringDefault: *const ::std::os::raw::c_char,
    pub indexDefault: usize,
}
#[test]
fn bindgen_test_layout_BNFormInputField() {
    const UNINIT: ::std::mem::MaybeUninit<BNFormInputField> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNFormInputField>(),
        136usize,
        concat!("Size of: ", stringify!(BNFormInputField))
    );
    assert_eq!(
        ::std::mem::align_of::<BNFormInputField>(),
        8usize,
        concat!("Alignment of ", stringify!(BNFormInputField))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prompt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(prompt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentAddress) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(currentAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).choices) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(choices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultName) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(defaultName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intResult) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(intResult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressResult) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(addressResult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringResult) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(stringResult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexResult) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(indexResult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasDefault) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(hasDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intDefault) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(intDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressDefault) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(addressDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringDefault) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(stringDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexDefault) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNFormInputField),
            "::",
            stringify!(indexDefault)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNInteractionHandlerCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub showPlainTextReport: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            title: *const ::std::os::raw::c_char,
            contents: *const ::std::os::raw::c_char,
        ),
    >,
    pub showMarkdownReport: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            title: *const ::std::os::raw::c_char,
            contents: *const ::std::os::raw::c_char,
            plaintext: *const ::std::os::raw::c_char,
        ),
    >,
    pub showHTMLReport: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            title: *const ::std::os::raw::c_char,
            contents: *const ::std::os::raw::c_char,
            plaintext: *const ::std::os::raw::c_char,
        ),
    >,
    pub showGraphReport: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            title: *const ::std::os::raw::c_char,
            graph: *mut BNFlowGraph,
        ),
    >,
    pub showReportCollection: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            title: *const ::std::os::raw::c_char,
            reports: *mut BNReportCollection,
        ),
    >,
    pub getTextLineInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut *mut ::std::os::raw::c_char,
            prompt: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getIntegerInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut i64,
            prompt: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getAddressInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut u64,
            prompt: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            view: *mut BNBinaryView,
            currentAddr: u64,
        ) -> bool,
    >,
    pub getChoiceInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut usize,
            prompt: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            choices: *mut *const ::std::os::raw::c_char,
            count: usize,
        ) -> bool,
    >,
    pub getOpenFileNameInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut *mut ::std::os::raw::c_char,
            prompt: *const ::std::os::raw::c_char,
            ext: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getSaveFileNameInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut *mut ::std::os::raw::c_char,
            prompt: *const ::std::os::raw::c_char,
            ext: *const ::std::os::raw::c_char,
            defaultName: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getDirectoryNameInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            result: *mut *mut ::std::os::raw::c_char,
            prompt: *const ::std::os::raw::c_char,
            defaultName: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getFormInput: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            fields: *mut BNFormInputField,
            count: usize,
            title: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub showMessageBox: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            title: *const ::std::os::raw::c_char,
            text: *const ::std::os::raw::c_char,
            buttons: BNMessageBoxButtonSet,
            icon: BNMessageBoxIcon,
        ) -> BNMessageBoxButtonResult,
    >,
    pub openUrl: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            url: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub runProgressDialog: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            title: *const ::std::os::raw::c_char,
            canCancel: bool,
            task: ::std::option::Option<
                unsafe extern "C" fn(
                    taskCtxt: *mut ::std::os::raw::c_void,
                    progress: ::std::option::Option<
                        unsafe extern "C" fn(
                            progressCtxt: *mut ::std::os::raw::c_void,
                            cur: usize,
                            max: usize,
                        ) -> bool,
                    >,
                    progressCtxt: *mut ::std::os::raw::c_void,
                ),
            >,
            taskCtxt: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNInteractionHandlerCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNInteractionHandlerCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNInteractionHandlerCallbacks>(),
        136usize,
        concat!("Size of: ", stringify!(BNInteractionHandlerCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNInteractionHandlerCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNInteractionHandlerCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showPlainTextReport) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showPlainTextReport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showMarkdownReport) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showMarkdownReport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showHTMLReport) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showHTMLReport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showGraphReport) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showGraphReport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showReportCollection) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showReportCollection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTextLineInput) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getTextLineInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getIntegerInput) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getIntegerInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAddressInput) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getAddressInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getChoiceInput) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getChoiceInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getOpenFileNameInput) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getOpenFileNameInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getSaveFileNameInput) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getSaveFileNameInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getDirectoryNameInput) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getDirectoryNameInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFormInput) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(getFormInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showMessageBox) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(showMessageBox)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).openUrl) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(openUrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runProgressDialog) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BNInteractionHandlerCallbacks),
            "::",
            stringify!(runProgressDialog)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNObjectDestructionCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub destructBinaryView: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
    >,
    pub destructFileMetadata: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, file: *mut BNFileMetadata),
    >,
    pub destructFunction: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, func: *mut BNFunction),
    >,
}
#[test]
fn bindgen_test_layout_BNObjectDestructionCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNObjectDestructionCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNObjectDestructionCallbacks>(),
        32usize,
        concat!("Size of: ", stringify!(BNObjectDestructionCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNObjectDestructionCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNObjectDestructionCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNObjectDestructionCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destructBinaryView) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNObjectDestructionCallbacks),
            "::",
            stringify!(destructBinaryView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destructFileMetadata) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNObjectDestructionCallbacks),
            "::",
            stringify!(destructFileMetadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destructFunction) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNObjectDestructionCallbacks),
            "::",
            stringify!(destructFunction)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNTypeContext {
    pub type_: *mut BNType,
    pub offset: usize,
}
#[test]
fn bindgen_test_layout_BNTypeContext() {
    const UNINIT: ::std::mem::MaybeUninit<BNTypeContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNTypeContext>(),
        16usize,
        concat!("Size of: ", stringify!(BNTypeContext))
    );
    assert_eq!(
        ::std::mem::align_of::<BNTypeContext>(),
        8usize,
        concat!("Alignment of ", stringify!(BNTypeContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeContext),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNTypeContext),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomDataRenderer {
    pub context: *mut ::std::os::raw::c_void,
    pub freeObject: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub isValidForData: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            addr: u64,
            type_: *mut BNType,
            typeCtx: *mut BNTypeContext,
            ctxCount: usize,
        ) -> bool,
    >,
    pub getLinesForData: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            view: *mut BNBinaryView,
            addr: u64,
            type_: *mut BNType,
            prefix: *const BNInstructionTextToken,
            prefixCount: usize,
            width: usize,
            count: *mut usize,
            typeCtx: *mut BNTypeContext,
            ctxCount: usize,
        ) -> *mut BNDisassemblyTextLine,
    >,
}
#[test]
fn bindgen_test_layout_BNCustomDataRenderer() {
    const UNINIT: ::std::mem::MaybeUninit<BNCustomDataRenderer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNCustomDataRenderer>(),
        32usize,
        concat!("Size of: ", stringify!(BNCustomDataRenderer))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomDataRenderer>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomDataRenderer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomDataRenderer),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomDataRenderer),
            "::",
            stringify!(freeObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isValidForData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomDataRenderer),
            "::",
            stringify!(isValidForData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getLinesForData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomDataRenderer),
            "::",
            stringify!(getLinesForData)
        )
    );
}
pub const BNSegmentFlag_SegmentExecutable: BNSegmentFlag = 1;
pub const BNSegmentFlag_SegmentWritable: BNSegmentFlag = 2;
pub const BNSegmentFlag_SegmentReadable: BNSegmentFlag = 4;
pub const BNSegmentFlag_SegmentContainsData: BNSegmentFlag = 8;
pub const BNSegmentFlag_SegmentContainsCode: BNSegmentFlag = 16;
pub const BNSegmentFlag_SegmentDenyWrite: BNSegmentFlag = 32;
pub const BNSegmentFlag_SegmentDenyExecute: BNSegmentFlag = 64;
pub type BNSegmentFlag = ::std::os::raw::c_uint;
pub const BNSectionSemantics_DefaultSectionSemantics: BNSectionSemantics = 0;
pub const BNSectionSemantics_ReadOnlyCodeSectionSemantics: BNSectionSemantics = 1;
pub const BNSectionSemantics_ReadOnlyDataSectionSemantics: BNSectionSemantics = 2;
pub const BNSectionSemantics_ReadWriteDataSectionSemantics: BNSectionSemantics = 3;
pub const BNSectionSemantics_ExternalSectionSemantics: BNSectionSemantics = 4;
pub type BNSectionSemantics = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNAddressRange {
    pub start: u64,
    pub end: u64,
}
#[test]
fn bindgen_test_layout_BNAddressRange() {
    const UNINIT: ::std::mem::MaybeUninit<BNAddressRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNAddressRange>(),
        16usize,
        concat!("Size of: ", stringify!(BNAddressRange))
    );
    assert_eq!(
        ::std::mem::align_of::<BNAddressRange>(),
        8usize,
        concat!("Alignment of ", stringify!(BNAddressRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAddressRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNAddressRange),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNILIndexRange {
    pub start: usize,
    pub end: usize,
}
#[test]
fn bindgen_test_layout_BNILIndexRange() {
    const UNINIT: ::std::mem::MaybeUninit<BNILIndexRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNILIndexRange>(),
        16usize,
        concat!("Size of: ", stringify!(BNILIndexRange))
    );
    assert_eq!(
        ::std::mem::align_of::<BNILIndexRange>(),
        8usize,
        concat!("Alignment of ", stringify!(BNILIndexRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILIndexRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILIndexRange),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSystemCallInfo {
    pub number: u32,
    pub name: BNQualifiedName,
    pub type_: *mut BNType,
}
#[test]
fn bindgen_test_layout_BNSystemCallInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNSystemCallInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNSystemCallInfo>(),
        40usize,
        concat!("Size of: ", stringify!(BNSystemCallInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNSystemCallInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNSystemCallInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSystemCallInfo),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSystemCallInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSystemCallInfo),
            "::",
            stringify!(type_)
        )
    );
}
pub const BNILBranchDependence_NotBranchDependent: BNILBranchDependence = 0;
pub const BNILBranchDependence_TrueBranchDependent: BNILBranchDependence = 1;
pub const BNILBranchDependence_FalseBranchDependent: BNILBranchDependence = 2;
pub type BNILBranchDependence = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNILBranchInstructionAndDependence {
    pub branch: usize,
    pub dependence: BNILBranchDependence,
}
#[test]
fn bindgen_test_layout_BNILBranchInstructionAndDependence() {
    const UNINIT: ::std::mem::MaybeUninit<BNILBranchInstructionAndDependence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNILBranchInstructionAndDependence>(),
        16usize,
        concat!("Size of: ", stringify!(BNILBranchInstructionAndDependence))
    );
    assert_eq!(
        ::std::mem::align_of::<BNILBranchInstructionAndDependence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BNILBranchInstructionAndDependence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).branch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILBranchInstructionAndDependence),
            "::",
            stringify!(branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependence) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNILBranchInstructionAndDependence),
            "::",
            stringify!(dependence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNPerformanceInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub seconds: f64,
}
#[test]
fn bindgen_test_layout_BNPerformanceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNPerformanceInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNPerformanceInfo>(),
        16usize,
        concat!("Size of: ", stringify!(BNPerformanceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNPerformanceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNPerformanceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPerformanceInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNPerformanceInfo),
            "::",
            stringify!(seconds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMemoryUsageInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_BNMemoryUsageInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNMemoryUsageInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNMemoryUsageInfo>(),
        16usize,
        concat!("Size of: ", stringify!(BNMemoryUsageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMemoryUsageInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMemoryUsageInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMemoryUsageInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMemoryUsageInfo),
            "::",
            stringify!(value)
        )
    );
}
pub const BNMetadataType_InvalidDataType: BNMetadataType = 0;
pub const BNMetadataType_BooleanDataType: BNMetadataType = 1;
pub const BNMetadataType_StringDataType: BNMetadataType = 2;
pub const BNMetadataType_UnsignedIntegerDataType: BNMetadataType = 3;
pub const BNMetadataType_SignedIntegerDataType: BNMetadataType = 4;
pub const BNMetadataType_DoubleDataType: BNMetadataType = 5;
pub const BNMetadataType_RawDataType: BNMetadataType = 6;
pub const BNMetadataType_KeyValueDataType: BNMetadataType = 7;
pub const BNMetadataType_ArrayDataType: BNMetadataType = 8;
pub type BNMetadataType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRegisterStackAdjustment {
    pub regStack: u32,
    pub adjustment: i32,
    pub confidence: u8,
}
#[test]
fn bindgen_test_layout_BNRegisterStackAdjustment() {
    const UNINIT: ::std::mem::MaybeUninit<BNRegisterStackAdjustment> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNRegisterStackAdjustment>(),
        12usize,
        concat!("Size of: ", stringify!(BNRegisterStackAdjustment))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRegisterStackAdjustment>(),
        4usize,
        concat!("Alignment of ", stringify!(BNRegisterStackAdjustment))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regStack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackAdjustment),
            "::",
            stringify!(regStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjustment) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackAdjustment),
            "::",
            stringify!(adjustment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRegisterStackAdjustment),
            "::",
            stringify!(confidence)
        )
    );
}
pub const BNFunctionAnalysisSkipOverride_DefaultFunctionAnalysisSkip:
    BNFunctionAnalysisSkipOverride = 0;
pub const BNFunctionAnalysisSkipOverride_NeverSkipFunctionAnalysis: BNFunctionAnalysisSkipOverride =
    1;
pub const BNFunctionAnalysisSkipOverride_AlwaysSkipFunctionAnalysis:
    BNFunctionAnalysisSkipOverride = 2;
pub type BNFunctionAnalysisSkipOverride = ::std::os::raw::c_uint;
pub const BNReportType_PlainTextReportType: BNReportType = 0;
pub const BNReportType_MarkdownReportType: BNReportType = 1;
pub const BNReportType_HTMLReportType: BNReportType = 2;
pub const BNReportType_FlowGraphReportType: BNReportType = 3;
pub type BNReportType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNCustomFlowGraph {
    pub context: *mut ::std::os::raw::c_void,
    pub prepareForLayout:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub populateNodes:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub completeLayout:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void) -> *mut BNFlowGraph,
    >,
    pub freeObject: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub externalRefTaken:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    pub externalRefReleased:
        ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_BNCustomFlowGraph() {
    const UNINIT: ::std::mem::MaybeUninit<BNCustomFlowGraph> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNCustomFlowGraph>(),
        64usize,
        concat!("Size of: ", stringify!(BNCustomFlowGraph))
    );
    assert_eq!(
        ::std::mem::align_of::<BNCustomFlowGraph>(),
        8usize,
        concat!("Alignment of ", stringify!(BNCustomFlowGraph))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prepareForLayout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(prepareForLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).populateNodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(populateNodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completeLayout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(completeLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeObject) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(freeObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalRefTaken) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(externalRefTaken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalRefReleased) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BNCustomFlowGraph),
            "::",
            stringify!(externalRefReleased)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNRange {
    pub start: u64,
    pub end: u64,
}
#[test]
fn bindgen_test_layout_BNRange() {
    const UNINIT: ::std::mem::MaybeUninit<BNRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNRange>(),
        16usize,
        concat!("Size of: ", stringify!(BNRange))
    );
    assert_eq!(
        ::std::mem::align_of::<BNRange>(),
        8usize,
        concat!("Alignment of ", stringify!(BNRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNRange),
            "::",
            stringify!(end)
        )
    );
}
pub const BNAnalysisSkipReason_NoSkipReason: BNAnalysisSkipReason = 0;
pub const BNAnalysisSkipReason_AlwaysSkipReason: BNAnalysisSkipReason = 1;
pub const BNAnalysisSkipReason_ExceedFunctionSizeSkipReason: BNAnalysisSkipReason = 2;
pub const BNAnalysisSkipReason_ExceedFunctionAnalysisTimeSkipReason: BNAnalysisSkipReason = 3;
pub const BNAnalysisSkipReason_ExceedFunctionUpdateCountSkipReason: BNAnalysisSkipReason = 4;
pub const BNAnalysisSkipReason_NewAutoFunctionAnalysisSuppressedReason: BNAnalysisSkipReason = 5;
pub const BNAnalysisSkipReason_BasicAnalysisSkipReason: BNAnalysisSkipReason = 6;
pub const BNAnalysisSkipReason_IntermediateAnalysisSkipReason: BNAnalysisSkipReason = 7;
pub type BNAnalysisSkipReason = ::std::os::raw::c_uint;
pub const BNSettingsScope_SettingsInvalidScope: BNSettingsScope = 0;
pub const BNSettingsScope_SettingsAutoScope: BNSettingsScope = 1;
pub const BNSettingsScope_SettingsDefaultScope: BNSettingsScope = 2;
pub const BNSettingsScope_SettingsUserScope: BNSettingsScope = 4;
pub const BNSettingsScope_SettingsProjectScope: BNSettingsScope = 8;
pub const BNSettingsScope_SettingsResourceScope: BNSettingsScope = 16;
pub type BNSettingsScope = ::std::os::raw::c_uint;
pub const BNLinearViewObjectIdentifierType_SingleLinearViewObject:
    BNLinearViewObjectIdentifierType = 0;
pub const BNLinearViewObjectIdentifierType_AddressLinearViewObject:
    BNLinearViewObjectIdentifierType = 1;
pub const BNLinearViewObjectIdentifierType_AddressRangeLinearViewObject:
    BNLinearViewObjectIdentifierType = 2;
pub type BNLinearViewObjectIdentifierType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNLinearViewObjectIdentifier {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: BNLinearViewObjectIdentifierType,
    pub start: u64,
    pub end: u64,
}
#[test]
fn bindgen_test_layout_BNLinearViewObjectIdentifier() {
    const UNINIT: ::std::mem::MaybeUninit<BNLinearViewObjectIdentifier> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNLinearViewObjectIdentifier>(),
        32usize,
        concat!("Size of: ", stringify!(BNLinearViewObjectIdentifier))
    );
    assert_eq!(
        ::std::mem::align_of::<BNLinearViewObjectIdentifier>(),
        8usize,
        concat!("Alignment of ", stringify!(BNLinearViewObjectIdentifier))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearViewObjectIdentifier),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearViewObjectIdentifier),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearViewObjectIdentifier),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNLinearViewObjectIdentifier),
            "::",
            stringify!(end)
        )
    );
}
pub const BNBinaryViewEventType_BinaryViewFinalizationEvent: BNBinaryViewEventType = 0;
pub const BNBinaryViewEventType_BinaryViewInitialAnalysisCompletionEvent: BNBinaryViewEventType = 1;
pub type BNBinaryViewEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNBinaryViewEvent {
    pub type_: BNBinaryViewEventType,
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
    >,
    pub ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_BNBinaryViewEvent() {
    const UNINIT: ::std::mem::MaybeUninit<BNBinaryViewEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNBinaryViewEvent>(),
        24usize,
        concat!("Size of: ", stringify!(BNBinaryViewEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<BNBinaryViewEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(BNBinaryViewEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryViewEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryViewEvent),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNBinaryViewEvent),
            "::",
            stringify!(ctx)
        )
    );
}
pub const BNDeadStoreElimination_DefaultDeadStoreElimination: BNDeadStoreElimination = 0;
pub const BNDeadStoreElimination_PreventDeadStoreElimination: BNDeadStoreElimination = 1;
pub const BNDeadStoreElimination_AllowDeadStoreElimination: BNDeadStoreElimination = 2;
pub type BNDeadStoreElimination = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNDebugFunctionInfo {
    pub shortName: *mut ::std::os::raw::c_char,
    pub fullName: *mut ::std::os::raw::c_char,
    pub rawName: *mut ::std::os::raw::c_char,
    pub address: u64,
    pub type_: *mut BNType,
    pub platform: *mut BNPlatform,
}
#[test]
fn bindgen_test_layout_BNDebugFunctionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNDebugFunctionInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNDebugFunctionInfo>(),
        48usize,
        concat!("Size of: ", stringify!(BNDebugFunctionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNDebugFunctionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNDebugFunctionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDebugFunctionInfo),
            "::",
            stringify!(shortName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDebugFunctionInfo),
            "::",
            stringify!(fullName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rawName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDebugFunctionInfo),
            "::",
            stringify!(rawName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDebugFunctionInfo),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDebugFunctionInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).platform) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BNDebugFunctionInfo),
            "::",
            stringify!(platform)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNSecretsProviderCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub hasData: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            key: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getData: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            key: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub storeData: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            key: *const ::std::os::raw::c_char,
            data: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub deleteData: ::std::option::Option<
        unsafe extern "C" fn(
            ctxt: *mut ::std::os::raw::c_void,
            key: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_BNSecretsProviderCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNSecretsProviderCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNSecretsProviderCallbacks>(),
        40usize,
        concat!("Size of: ", stringify!(BNSecretsProviderCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNSecretsProviderCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNSecretsProviderCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSecretsProviderCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSecretsProviderCallbacks),
            "::",
            stringify!(hasData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSecretsProviderCallbacks),
            "::",
            stringify!(getData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storeData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSecretsProviderCallbacks),
            "::",
            stringify!(storeData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleteData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BNSecretsProviderCallbacks),
            "::",
            stringify!(deleteData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNVersionInfo {
    pub major: u32,
    pub minor: u32,
    pub build: u32,
    pub channel: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_BNVersionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<BNVersionInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNVersionInfo>(),
        24usize,
        concat!("Size of: ", stringify!(BNVersionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BNVersionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BNVersionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVersionInfo),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVersionInfo),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).build) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVersionInfo),
            "::",
            stringify!(build)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNVersionInfo),
            "::",
            stringify!(channel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNMergedVariable {
    pub target: BNVariable,
    pub sources: *mut BNVariable,
    pub sourceCount: usize,
}
#[test]
fn bindgen_test_layout_BNMergedVariable() {
    const UNINIT: ::std::mem::MaybeUninit<BNMergedVariable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNMergedVariable>(),
        32usize,
        concat!("Size of: ", stringify!(BNMergedVariable))
    );
    assert_eq!(
        ::std::mem::align_of::<BNMergedVariable>(),
        8usize,
        concat!("Alignment of ", stringify!(BNMergedVariable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMergedVariable),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sources) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMergedVariable),
            "::",
            stringify!(sources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BNMergedVariable),
            "::",
            stringify!(sourceCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BNEnterpriseServerCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub licenseStatusChanged: ::std::option::Option<
        unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, stillValid: bool),
    >,
}
#[test]
fn bindgen_test_layout_BNEnterpriseServerCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<BNEnterpriseServerCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BNEnterpriseServerCallbacks>(),
        16usize,
        concat!("Size of: ", stringify!(BNEnterpriseServerCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<BNEnterpriseServerCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(BNEnterpriseServerCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEnterpriseServerCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).licenseStatusChanged) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BNEnterpriseServerCallbacks),
            "::",
            stringify!(licenseStatusChanged)
        )
    );
}
extern "C" {
    pub fn BNAllocString(contents: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreeString(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAllocStringList(
        contents: *mut *const ::std::os::raw::c_char,
        size: usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreeStringList(strs: *mut *mut ::std::os::raw::c_char, count: usize);
}
extern "C" {
    pub fn BNShutdown();
}
extern "C" {
    pub fn BNIsShutdownRequested() -> bool;
}
extern "C" {
    pub fn BNGetVersionInfo() -> BNVersionInfo;
}
extern "C" {
    pub fn BNGetVersionString() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetBuildId() -> u32;
}
extern "C" {
    pub fn BNGetCurrentCoreABIVersion() -> u32;
}
extern "C" {
    pub fn BNGetMinimumCoreABIVersion() -> u32;
}
extern "C" {
    pub fn BNGetSerialNumber() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetLicenseExpirationTime() -> u64;
}
extern "C" {
    pub fn BNIsLicenseValidated() -> bool;
}
extern "C" {
    pub fn BNGetLicensedUserEmail() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetProduct() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetProductType() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetLicenseCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNIsUIEnabled() -> bool;
}
extern "C" {
    pub fn BNSetLicense(licenseData: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAuthenticateEnterpriseServerWithCredentials(
        username: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        remember: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNAuthenticateEnterpriseServerWithMethod(
        method: *const ::std::os::raw::c_char,
        remember: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNGetEnterpriseServerAuthenticationMethods(
        methods: *mut *mut *mut ::std::os::raw::c_char,
        names: *mut *mut *mut ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn BNDeauthenticateEnterpriseServer() -> bool;
}
extern "C" {
    pub fn BNCancelEnterpriseServerAuthentication();
}
extern "C" {
    pub fn BNConnectEnterpriseServer() -> bool;
}
extern "C" {
    pub fn BNUpdateEnterpriseServerLicense(timeout: u64) -> bool;
}
extern "C" {
    pub fn BNReleaseEnterpriseServerLicense() -> bool;
}
extern "C" {
    pub fn BNIsEnterpriseServerConnected() -> bool;
}
extern "C" {
    pub fn BNIsEnterpriseServerAuthenticated() -> bool;
}
extern "C" {
    pub fn BNGetEnterpriseServerUsername() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetEnterpriseServerToken() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetEnterpriseServerUrl() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetEnterpriseServerUrl(url: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn BNGetEnterpriseServerName() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetEnterpriseServerId() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetEnterpriseServerVersion() -> u64;
}
extern "C" {
    pub fn BNGetEnterpriseServerBuildId() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetEnterpriseServerLicenseExpirationTime() -> u64;
}
extern "C" {
    pub fn BNGetEnterpriseServerLicenseDuration() -> u64;
}
extern "C" {
    pub fn BNIsEnterpriseServerFloatingLicense() -> bool;
}
extern "C" {
    pub fn BNGetEnterpriseServerReservationTimeLimit() -> u64;
}
extern "C" {
    pub fn BNIsEnterpriseServerLicenseStillActivated() -> bool;
}
extern "C" {
    pub fn BNGetEnterpriseServerLastError() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRegisterEnterpriseServerNotification(notify: *mut BNEnterpriseServerCallbacks);
}
extern "C" {
    pub fn BNUnregisterEnterpriseServerNotification(notify: *mut BNEnterpriseServerCallbacks);
}
extern "C" {
    pub fn BNIsEnterpriseServerInitialized() -> bool;
}
extern "C" {
    pub fn BNRegisterObjectDestructionCallbacks(callbacks: *mut BNObjectDestructionCallbacks);
}
extern "C" {
    pub fn BNUnregisterObjectDestructionCallbacks(callbacks: *mut BNObjectDestructionCallbacks);
}
extern "C" {
    pub fn BNGetUniqueIdentifierString() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNInitPlugins(allowUserPlugins: bool) -> bool;
}
extern "C" {
    pub fn BNInitCorePlugins() -> bool;
}
extern "C" {
    pub fn BNDisablePlugins();
}
extern "C" {
    pub fn BNIsPluginsEnabled() -> bool;
}
extern "C" {
    pub fn BNInitUserPlugins();
}
extern "C" {
    pub fn BNInitRepoPlugins();
}
extern "C" {
    pub fn BNGetInstallDirectory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetBundledPluginDirectory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetBundledPluginDirectory(path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetUserDirectory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetUserPluginDirectory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetRepositoriesDirectory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetSettingsFileName() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSaveLastRun();
}
extern "C" {
    pub fn BNGetPathRelativeToBundledPluginDirectory(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetPathRelativeToUserPluginDirectory(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetPathRelativeToUserDirectory(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNExecuteWorkerProcess(
        path: *const ::std::os::raw::c_char,
        args: *mut *const ::std::os::raw::c_char,
        input: *mut BNDataBuffer,
        output: *mut *mut ::std::os::raw::c_char,
        error: *mut *mut ::std::os::raw::c_char,
        stdoutIsText: bool,
        stderrIsText: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNSetCurrentPluginLoadOrder(order: BNPluginLoadOrder);
}
extern "C" {
    pub fn BNAddRequiredPluginDependency(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddOptionalPluginDependency(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNLog(
        session: usize,
        level: BNLogLevel,
        logger_name: *const ::std::os::raw::c_char,
        tid: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn BNLogDebug(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogInfo(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogWarn(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogError(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogAlert(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn BNLogString(
        session: usize,
        level: BNLogLevel,
        logger_name: *const ::std::os::raw::c_char,
        tid: usize,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNNewLoggerReference(logger: *mut BNLogger) -> *mut BNLogger;
}
extern "C" {
    pub fn BNFreeLogger(logger: *mut BNLogger);
}
extern "C" {
    pub fn BNLoggerLog(
        logger: *mut BNLogger,
        level: BNLogLevel,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn BNLoggerLogString(
        logger: *mut BNLogger,
        level: BNLogLevel,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNLoggerGetName(logger: *mut BNLogger) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNLoggerGetSessionId(logger: *mut BNLogger) -> usize;
}
extern "C" {
    pub fn BNLogCreateLogger(
        loggerName: *const ::std::os::raw::c_char,
        sessionId: usize,
    ) -> *mut BNLogger;
}
extern "C" {
    pub fn BNLogGetLogger(
        loggerName: *const ::std::os::raw::c_char,
        sessionId: usize,
    ) -> *mut BNLogger;
}
extern "C" {
    pub fn BNLogGetLoggerNames(count: *mut usize) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNLogRegisterLoggerCallback(
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                name: *const ::std::os::raw::c_char,
                ctxt: *mut ::std::os::raw::c_void,
            ),
        >,
        ctxt: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterLogListener(listener: *mut BNLogListener);
}
extern "C" {
    pub fn BNUnregisterLogListener(listener: *mut BNLogListener);
}
extern "C" {
    pub fn BNUpdateLogListeners();
}
extern "C" {
    pub fn BNLogToStdout(minimumLevel: BNLogLevel);
}
extern "C" {
    pub fn BNLogToStderr(minimumLevel: BNLogLevel);
}
extern "C" {
    pub fn BNLogToFile(
        minimumLevel: BNLogLevel,
        path: *const ::std::os::raw::c_char,
        append: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNCloseLogs();
}
extern "C" {
    pub fn BNCreateTemporaryFile() -> *mut BNTemporaryFile;
}
extern "C" {
    pub fn BNCreateTemporaryFileWithContents(data: *mut BNDataBuffer) -> *mut BNTemporaryFile;
}
extern "C" {
    pub fn BNNewTemporaryFileReference(file: *mut BNTemporaryFile) -> *mut BNTemporaryFile;
}
extern "C" {
    pub fn BNFreeTemporaryFile(file: *mut BNTemporaryFile);
}
extern "C" {
    pub fn BNGetTemporaryFilePath(file: *mut BNTemporaryFile) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTemporaryFileContents(file: *mut BNTemporaryFile) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNCreateDataBuffer(data: *const ::std::os::raw::c_void, len: usize)
        -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNDuplicateDataBuffer(buf: *mut BNDataBuffer) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNFreeDataBuffer(buf: *mut BNDataBuffer);
}
extern "C" {
    pub fn BNGetDataBufferContents(buf: *mut BNDataBuffer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BNGetDataBufferContentsAt(
        buf: *mut BNDataBuffer,
        offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BNGetDataBufferLength(buf: *mut BNDataBuffer) -> usize;
}
extern "C" {
    pub fn BNGetDataBufferSlice(
        buf: *mut BNDataBuffer,
        start: usize,
        len: usize,
    ) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNSetDataBufferLength(buf: *mut BNDataBuffer, len: usize);
}
extern "C" {
    pub fn BNClearDataBuffer(buf: *mut BNDataBuffer);
}
extern "C" {
    pub fn BNSetDataBufferContents(
        buf: *mut BNDataBuffer,
        data: *mut ::std::os::raw::c_void,
        len: usize,
    );
}
extern "C" {
    pub fn BNAssignDataBuffer(dest: *mut BNDataBuffer, src: *mut BNDataBuffer);
}
extern "C" {
    pub fn BNAppendDataBuffer(dest: *mut BNDataBuffer, src: *mut BNDataBuffer);
}
extern "C" {
    pub fn BNAppendDataBufferContents(
        dest: *mut BNDataBuffer,
        src: *const ::std::os::raw::c_void,
        len: usize,
    );
}
extern "C" {
    pub fn BNGetDataBufferByte(buf: *mut BNDataBuffer, offset: usize) -> u8;
}
extern "C" {
    pub fn BNSetDataBufferByte(buf: *mut BNDataBuffer, offset: usize, val: u8);
}
extern "C" {
    pub fn BNDataBufferToEscapedString(
        buf: *mut BNDataBuffer,
        nullTerminates: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNDecodeEscapedString(str_: *const ::std::os::raw::c_char) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNDataBufferToBase64(buf: *mut BNDataBuffer) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNDecodeBase64(str_: *const ::std::os::raw::c_char) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNZlibCompress(buf: *mut BNDataBuffer) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNZlibDecompress(buf: *mut BNDataBuffer) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNCreateSaveSettings() -> *mut BNSaveSettings;
}
extern "C" {
    pub fn BNNewSaveSettingsReference(settings: *mut BNSaveSettings) -> *mut BNSaveSettings;
}
extern "C" {
    pub fn BNFreeSaveSettings(settings: *mut BNSaveSettings);
}
extern "C" {
    pub fn BNIsSaveSettingsOptionSet(settings: *mut BNSaveSettings, option: BNSaveOption) -> bool;
}
extern "C" {
    pub fn BNSetSaveSettingsOption(
        settings: *mut BNSaveSettings,
        option: BNSaveOption,
        state: bool,
    );
}
extern "C" {
    pub fn BNGetSaveSettingsName(settings: *mut BNSaveSettings) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetSaveSettingsName(
        settings: *mut BNSaveSettings,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNCreateFileMetadata() -> *mut BNFileMetadata;
}
extern "C" {
    pub fn BNNewFileReference(file: *mut BNFileMetadata) -> *mut BNFileMetadata;
}
extern "C" {
    pub fn BNFreeFileMetadata(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNCloseFile(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNSetFileMetadataNavigationHandler(
        file: *mut BNFileMetadata,
        handler: *mut BNNavigationHandler,
    );
}
extern "C" {
    pub fn BNIsFileModified(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNIsAnalysisChanged(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNMarkFileModified(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNMarkFileSaved(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNIsBackedByDatabase(
        file: *mut BNFileMetadata,
        binaryViewType: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNCreateDatabase(
        data: *mut BNBinaryView,
        path: *const ::std::os::raw::c_char,
        settings: *mut BNSaveSettings,
    ) -> bool;
}
extern "C" {
    pub fn BNCreateDatabaseWithProgress(
        data: *mut BNBinaryView,
        path: *const ::std::os::raw::c_char,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: usize,
                total: usize,
            ) -> bool,
        >,
        settings: *mut BNSaveSettings,
    ) -> bool;
}
extern "C" {
    pub fn BNOpenExistingDatabase(
        file: *mut BNFileMetadata,
        path: *const ::std::os::raw::c_char,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNOpenExistingDatabaseWithProgress(
        file: *mut BNFileMetadata,
        path: *const ::std::os::raw::c_char,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: usize,
                total: usize,
            ) -> bool,
        >,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNOpenDatabaseForConfiguration(
        file: *mut BNFileMetadata,
        path: *const ::std::os::raw::c_char,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNSaveAutoSnapshot(data: *mut BNBinaryView, settings: *mut BNSaveSettings) -> bool;
}
extern "C" {
    pub fn BNSaveAutoSnapshotWithProgress(
        data: *mut BNBinaryView,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: usize,
                total: usize,
            ) -> bool,
        >,
        settings: *mut BNSaveSettings,
    ) -> bool;
}
extern "C" {
    pub fn BNGetSnapshotData(
        file: *mut BNFileMetadata,
        data: *mut BNKeyValueStore,
        cache: *mut BNKeyValueStore,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: usize,
                total: usize,
            ) -> bool,
        >,
    );
}
extern "C" {
    pub fn BNApplySnapshotData(
        file: *mut BNFileMetadata,
        view: *mut BNBinaryView,
        data: *mut BNKeyValueStore,
        cache: *mut BNKeyValueStore,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: usize,
                total: usize,
            ) -> bool,
        >,
        openForConfiguration: bool,
        restoreRawView: bool,
    );
}
extern "C" {
    pub fn BNGetFileMetadataDatabase(file: *mut BNFileMetadata) -> *mut BNDatabase;
}
extern "C" {
    pub fn BNCreateKeyValueStore() -> *mut BNKeyValueStore;
}
extern "C" {
    pub fn BNCreateKeyValueStoreFromDataBuffer(buffer: *mut BNDataBuffer) -> *mut BNKeyValueStore;
}
extern "C" {
    pub fn BNNewKeyValueStoreReference(store: *mut BNKeyValueStore) -> *mut BNKeyValueStore;
}
extern "C" {
    pub fn BNFreeKeyValueStore(store: *mut BNKeyValueStore);
}
extern "C" {
    pub fn BNGetKeyValueStoreKeys(
        store: *mut BNKeyValueStore,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNKeyValueStoreHasValue(
        store: *mut BNKeyValueStore,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetKeyValueStoreValue(
        store: *mut BNKeyValueStore,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetKeyValueStoreValueHash(
        store: *mut BNKeyValueStore,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNGetKeyValueStoreBuffer(
        store: *mut BNKeyValueStore,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNSetKeyValueStoreValue(
        store: *mut BNKeyValueStore,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSetKeyValueStoreBuffer(
        store: *mut BNKeyValueStore,
        name: *const ::std::os::raw::c_char,
        value: *const BNDataBuffer,
    ) -> bool;
}
extern "C" {
    pub fn BNGetKeyValueStoreSerializedData(store: *mut BNKeyValueStore) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNBeginKeyValueStoreNamespace(
        store: *mut BNKeyValueStore,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNEndKeyValueStoreNamespace(store: *mut BNKeyValueStore);
}
extern "C" {
    pub fn BNIsKeyValueStoreEmpty(store: *mut BNKeyValueStore) -> bool;
}
extern "C" {
    pub fn BNGetKeyValueStoreValueSize(store: *mut BNKeyValueStore) -> usize;
}
extern "C" {
    pub fn BNGetKeyValueStoreDataSize(store: *mut BNKeyValueStore) -> usize;
}
extern "C" {
    pub fn BNGetKeyValueStoreValueStorageSize(store: *mut BNKeyValueStore) -> usize;
}
extern "C" {
    pub fn BNGetKeyValueStoreNamespaceSize(store: *mut BNKeyValueStore) -> usize;
}
extern "C" {
    pub fn BNNewDatabaseReference(database: *mut BNDatabase) -> *mut BNDatabase;
}
extern "C" {
    pub fn BNFreeDatabase(database: *mut BNDatabase);
}
extern "C" {
    pub fn BNSetDatabaseCurrentSnapshot(database: *mut BNDatabase, id: i64);
}
extern "C" {
    pub fn BNGetDatabaseCurrentSnapshot(database: *mut BNDatabase) -> *mut BNSnapshot;
}
extern "C" {
    pub fn BNGetDatabaseSnapshots(
        database: *mut BNDatabase,
        count: *mut usize,
    ) -> *mut *mut BNSnapshot;
}
extern "C" {
    pub fn BNGetDatabaseSnapshot(database: *mut BNDatabase, id: i64) -> *mut BNSnapshot;
}
extern "C" {
    pub fn BNWriteDatabaseSnapshotData(
        database: *mut BNDatabase,
        parents: *mut i64,
        parentCount: usize,
        file: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        data: *mut BNKeyValueStore,
        autoSave: bool,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
                arg3: usize,
            ) -> bool,
        >,
    ) -> i64;
}
extern "C" {
    pub fn BNTrimDatabaseSnapshot(database: *mut BNDatabase, id: i64) -> bool;
}
extern "C" {
    pub fn BNRemoveDatabaseSnapshot(database: *mut BNDatabase, id: i64) -> bool;
}
extern "C" {
    pub fn BNGetDatabaseGlobalKeys(
        database: *mut BNDatabase,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNDatabaseHasGlobal(
        database: *mut BNDatabase,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNReadDatabaseGlobal(
        database: *mut BNDatabase,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNWriteDatabaseGlobal(
        database: *mut BNDatabase,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNReadDatabaseGlobalData(
        database: *mut BNDatabase,
        key: *const ::std::os::raw::c_char,
    ) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNWriteDatabaseGlobalData(
        database: *mut BNDatabase,
        key: *const ::std::os::raw::c_char,
        val: *mut BNDataBuffer,
    ) -> bool;
}
extern "C" {
    pub fn BNGetDatabaseFile(database: *mut BNDatabase) -> *mut BNFileMetadata;
}
extern "C" {
    pub fn BNReadDatabaseAnalysisCache(database: *mut BNDatabase) -> *mut BNKeyValueStore;
}
extern "C" {
    pub fn BNWriteDatabaseAnalysisCache(
        database: *mut BNDatabase,
        val: *mut BNKeyValueStore,
    ) -> bool;
}
extern "C" {
    pub fn BNSnapshotHasData(db: *mut BNDatabase, id: i64) -> bool;
}
extern "C" {
    pub fn BNNewSnapshotReference(snapshot: *mut BNSnapshot) -> *mut BNSnapshot;
}
extern "C" {
    pub fn BNFreeSnapshot(snapshot: *mut BNSnapshot);
}
extern "C" {
    pub fn BNFreeSnapshotList(snapshots: *mut *mut BNSnapshot, count: usize);
}
extern "C" {
    pub fn BNGetSnapshotDatabase(snapshot: *mut BNSnapshot) -> *mut BNDatabase;
}
extern "C" {
    pub fn BNGetSnapshotId(snapshot: *mut BNSnapshot) -> i64;
}
extern "C" {
    pub fn BNGetSnapshotFirstParent(snapshot: *mut BNSnapshot) -> *mut BNSnapshot;
}
extern "C" {
    pub fn BNGetSnapshotParents(
        snapshot: *mut BNSnapshot,
        count: *mut usize,
    ) -> *mut *mut BNSnapshot;
}
extern "C" {
    pub fn BNGetSnapshotChildren(
        snapshot: *mut BNSnapshot,
        count: *mut usize,
    ) -> *mut *mut BNSnapshot;
}
extern "C" {
    pub fn BNGetSnapshotName(snapshot: *mut BNSnapshot) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetSnapshotName(snapshot: *mut BNSnapshot, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNIsSnapshotAutoSave(snapshot: *mut BNSnapshot) -> bool;
}
extern "C" {
    pub fn BNSnapshotHasContents(snapshot: *mut BNSnapshot) -> bool;
}
extern "C" {
    pub fn BNSnapshotHasUndo(snapshot: *mut BNSnapshot) -> bool;
}
extern "C" {
    pub fn BNGetSnapshotFileContents(snapshot: *mut BNSnapshot) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNGetSnapshotFileContentsHash(snapshot: *mut BNSnapshot) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNReadSnapshotData(snapshot: *mut BNSnapshot) -> *mut BNKeyValueStore;
}
extern "C" {
    pub fn BNReadSnapshotDataWithProgress(
        snapshot: *mut BNSnapshot,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: usize,
                total: usize,
            ) -> bool,
        >,
    ) -> *mut BNKeyValueStore;
}
extern "C" {
    pub fn BNGetSnapshotUndoData(snapshot: *mut BNSnapshot) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNGetSnapshotUndoEntries(
        snapshot: *mut BNSnapshot,
        count: *mut usize,
    ) -> *mut BNUndoEntry;
}
extern "C" {
    pub fn BNGetSnapshotUndoEntriesWithProgress(
        snapshot: *mut BNSnapshot,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: usize,
                total: usize,
            ) -> bool,
        >,
        count: *mut usize,
    ) -> *mut BNUndoEntry;
}
extern "C" {
    pub fn BNSnapshotHasAncestor(snapshot: *mut BNSnapshot, other: *mut BNSnapshot) -> bool;
}
extern "C" {
    pub fn BNSnapshotStoreData(
        snapshot: *mut BNSnapshot,
        data: *mut BNKeyValueStore,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
                arg3: usize,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNRebase(data: *mut BNBinaryView, address: u64) -> bool;
}
extern "C" {
    pub fn BNRebaseWithProgress(
        data: *mut BNBinaryView,
        address: u64,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: usize,
                total: usize,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNCreateSnapshotedView(
        data: *mut BNBinaryView,
        viewName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNCreateSnapshotedViewWithProgress(
        data: *mut BNBinaryView,
        viewName: *const ::std::os::raw::c_char,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: usize,
                total: usize,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNGetOriginalFilename(file: *mut BNFileMetadata) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetOriginalFilename(file: *mut BNFileMetadata, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetFilename(file: *mut BNFileMetadata) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetFilename(file: *mut BNFileMetadata, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNBeginUndoActions(
        file: *mut BNFileMetadata,
        anonymousAllowed: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCommitUndoActions(file: *mut BNFileMetadata, id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNRevertUndoActions(file: *mut BNFileMetadata, id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNCanUndo(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNUndo(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNCanRedo(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNRedo(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNGetUndoEntries(file: *mut BNFileMetadata, count: *mut usize) -> *mut BNUndoEntry;
}
extern "C" {
    pub fn BNGetRedoEntries(file: *mut BNFileMetadata, count: *mut usize) -> *mut BNUndoEntry;
}
extern "C" {
    pub fn BNGetLastUndoEntry(file: *mut BNFileMetadata) -> BNUndoEntry;
}
extern "C" {
    pub fn BNGetLastRedoEntry(file: *mut BNFileMetadata) -> BNUndoEntry;
}
extern "C" {
    pub fn BNGetLastUndoEntryTitle(file: *mut BNFileMetadata) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetLastRedoEntryTitle(file: *mut BNFileMetadata) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreeUndoEntries(entries: *mut BNUndoEntry, count: usize);
}
extern "C" {
    pub fn BNClearUndoEntries(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNNewUserReference(user: *mut BNUser) -> *mut BNUser;
}
extern "C" {
    pub fn BNFreeUser(user: *mut BNUser);
}
extern "C" {
    pub fn BNGetUsers(file: *mut BNFileMetadata, count: *mut usize) -> *mut *mut BNUser;
}
extern "C" {
    pub fn BNFreeUserList(users: *mut *mut BNUser, count: usize);
}
extern "C" {
    pub fn BNGetUserName(user: *mut BNUser) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetUserEmail(user: *mut BNUser) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetUserId(user: *mut BNUser) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNOpenProject(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNCloseProject(file: *mut BNFileMetadata);
}
extern "C" {
    pub fn BNIsProjectOpen(file: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNGetCurrentView(file: *mut BNFileMetadata) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetCurrentOffset(file: *mut BNFileMetadata) -> u64;
}
extern "C" {
    pub fn BNNavigate(
        file: *mut BNFileMetadata,
        view: *const ::std::os::raw::c_char,
        offset: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetFileViewOfType(
        file: *mut BNFileMetadata,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNGetExistingViews(
        file: *mut BNFileMetadata,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFileMetadataGetSessionId(file: *mut BNFileMetadata) -> usize;
}
extern "C" {
    pub fn BNIsSnapshotDataAppliedWithoutError(view: *mut BNFileMetadata) -> bool;
}
extern "C" {
    pub fn BNUnregisterViewOfType(
        file: *mut BNFileMetadata,
        type_: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
    );
}
extern "C" {
    pub fn BNNewViewReference(view: *mut BNBinaryView) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNFreeBinaryView(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNGetFileForView(view: *mut BNBinaryView) -> *mut BNFileMetadata;
}
extern "C" {
    pub fn BNGetViewType(view: *mut BNBinaryView) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetParentView(view: *mut BNBinaryView) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNReadViewData(
        view: *mut BNBinaryView,
        dest: *mut ::std::os::raw::c_void,
        offset: u64,
        len: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNReadViewBuffer(view: *mut BNBinaryView, offset: u64, len: usize) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNWriteViewData(
        view: *mut BNBinaryView,
        offset: u64,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNWriteViewBuffer(
        view: *mut BNBinaryView,
        offset: u64,
        data: *mut BNDataBuffer,
    ) -> usize;
}
extern "C" {
    pub fn BNInsertViewData(
        view: *mut BNBinaryView,
        offset: u64,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNInsertViewBuffer(
        view: *mut BNBinaryView,
        offset: u64,
        data: *mut BNDataBuffer,
    ) -> usize;
}
extern "C" {
    pub fn BNRemoveViewData(view: *mut BNBinaryView, offset: u64, len: u64) -> usize;
}
extern "C" {
    pub fn BNNotifyDataWritten(view: *mut BNBinaryView, offset: u64, len: usize);
}
extern "C" {
    pub fn BNNotifyDataInserted(view: *mut BNBinaryView, offset: u64, len: usize);
}
extern "C" {
    pub fn BNNotifyDataRemoved(view: *mut BNBinaryView, offset: u64, len: u64);
}
extern "C" {
    pub fn BNGetEntropy(
        view: *mut BNBinaryView,
        offset: u64,
        len: usize,
        blockSize: usize,
        result: *mut f32,
    ) -> usize;
}
extern "C" {
    pub fn BNGetModification(view: *mut BNBinaryView, offset: u64) -> BNModificationStatus;
}
extern "C" {
    pub fn BNGetModificationArray(
        view: *mut BNBinaryView,
        offset: u64,
        result: *mut BNModificationStatus,
        len: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNIsValidOffset(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetReadable(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetWritable(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetExecutable(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetBackedByFile(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetCodeSemantics(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetExternSemantics(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNIsOffsetWritableSemantics(view: *mut BNBinaryView, offset: u64) -> bool;
}
extern "C" {
    pub fn BNGetNextValidOffset(view: *mut BNBinaryView, offset: u64) -> u64;
}
extern "C" {
    pub fn BNGetStartOffset(view: *mut BNBinaryView) -> u64;
}
extern "C" {
    pub fn BNGetEndOffset(view: *mut BNBinaryView) -> u64;
}
extern "C" {
    pub fn BNGetViewLength(view: *mut BNBinaryView) -> u64;
}
extern "C" {
    pub fn BNGetEntryPoint(view: *mut BNBinaryView) -> u64;
}
extern "C" {
    pub fn BNGetDefaultArchitecture(view: *mut BNBinaryView) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNSetDefaultArchitecture(view: *mut BNBinaryView, arch: *mut BNArchitecture);
}
extern "C" {
    pub fn BNGetDefaultPlatform(view: *mut BNBinaryView) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNSetDefaultPlatform(view: *mut BNBinaryView, platform: *mut BNPlatform);
}
extern "C" {
    pub fn BNGetDefaultEndianness(view: *mut BNBinaryView) -> BNEndianness;
}
extern "C" {
    pub fn BNIsRelocatable(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNGetViewAddressSize(view: *mut BNBinaryView) -> usize;
}
extern "C" {
    pub fn BNIsViewModified(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNIsExecutableView(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNSaveToFile(view: *mut BNBinaryView, file: *mut BNFileAccessor) -> bool;
}
extern "C" {
    pub fn BNSaveToFilename(
        view: *mut BNBinaryView,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNDefineRelocation(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        info: *mut BNRelocationInfo,
        target: u64,
        reloc: u64,
    );
}
extern "C" {
    pub fn BNDefineSymbolRelocation(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        info: *mut BNRelocationInfo,
        target: *mut BNSymbol,
        reloc: u64,
    );
}
extern "C" {
    pub fn BNGetRelocationRanges(view: *mut BNBinaryView, count: *mut usize) -> *mut BNRange;
}
extern "C" {
    pub fn BNGetRelocationRangesAtAddress(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNRange;
}
extern "C" {
    pub fn BNRangeContainsRelocation(view: *mut BNBinaryView, addr: u64, size: usize) -> bool;
}
extern "C" {
    pub fn BNRegisterDataNotification(
        view: *mut BNBinaryView,
        notify: *mut BNBinaryDataNotification,
    );
}
extern "C" {
    pub fn BNUnregisterDataNotification(
        view: *mut BNBinaryView,
        notify: *mut BNBinaryDataNotification,
    );
}
extern "C" {
    pub fn BNCanAssemble(view: *mut BNBinaryView, arch: *mut BNArchitecture) -> bool;
}
extern "C" {
    pub fn BNIsNeverBranchPatchAvailable(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNIsAlwaysBranchPatchAvailable(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNIsInvertBranchPatchAvailable(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNIsSkipAndReturnZeroPatchAvailable(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNIsSkipAndReturnValuePatchAvailable(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNConvertToNop(view: *mut BNBinaryView, arch: *mut BNArchitecture, addr: u64) -> bool;
}
extern "C" {
    pub fn BNAlwaysBranch(view: *mut BNBinaryView, arch: *mut BNArchitecture, addr: u64) -> bool;
}
extern "C" {
    pub fn BNInvertBranch(view: *mut BNBinaryView, arch: *mut BNArchitecture, addr: u64) -> bool;
}
extern "C" {
    pub fn BNSkipAndReturnValue(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
        value: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetInstructionLength(
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNFindNextData(
        view: *mut BNBinaryView,
        start: u64,
        data: *mut BNDataBuffer,
        result: *mut u64,
        flags: BNFindFlag,
    ) -> bool;
}
extern "C" {
    pub fn BNFindNextText(
        view: *mut BNBinaryView,
        start: u64,
        data: *const ::std::os::raw::c_char,
        result: *mut u64,
        settings: *mut BNDisassemblySettings,
        flags: BNFindFlag,
        graph: BNFunctionGraphType,
    ) -> bool;
}
extern "C" {
    pub fn BNFindNextConstant(
        view: *mut BNBinaryView,
        start: u64,
        constant: u64,
        result: *mut u64,
        settings: *mut BNDisassemblySettings,
        graph: BNFunctionGraphType,
    ) -> bool;
}
extern "C" {
    pub fn BNFindNextDataWithProgress(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        data: *mut BNDataBuffer,
        result: *mut u64,
        flags: BNFindFlag,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: usize,
                total: usize,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNFindNextTextWithProgress(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        data: *const ::std::os::raw::c_char,
        result: *mut u64,
        settings: *mut BNDisassemblySettings,
        flags: BNFindFlag,
        graph: BNFunctionGraphType,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: usize,
                total: usize,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNFindNextConstantWithProgress(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        constant: u64,
        result: *mut u64,
        settings: *mut BNDisassemblySettings,
        graph: BNFunctionGraphType,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: usize,
                total: usize,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNFindAllDataWithProgress(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        data: *mut BNDataBuffer,
        flags: BNFindFlag,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: usize,
                total: usize,
            ) -> bool,
        >,
        matchCtxt: *mut ::std::os::raw::c_void,
        matchCallback: ::std::option::Option<
            unsafe extern "C" fn(
                matchCtxt: *mut ::std::os::raw::c_void,
                addr: u64,
                match_: *mut BNDataBuffer,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNFindAllTextWithProgress(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        data: *const ::std::os::raw::c_char,
        settings: *mut BNDisassemblySettings,
        flags: BNFindFlag,
        graph: BNFunctionGraphType,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: usize,
                total: usize,
            ) -> bool,
        >,
        matchCtxt: *mut ::std::os::raw::c_void,
        matchCallback: ::std::option::Option<
            unsafe extern "C" fn(
                matchCtxt: *mut ::std::os::raw::c_void,
                addr: u64,
                match_: *const ::std::os::raw::c_char,
                line: *mut BNLinearDisassemblyLine,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNFindAllConstantWithProgress(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        constant: u64,
        settings: *mut BNDisassemblySettings,
        graph: BNFunctionGraphType,
        ctxt: *mut ::std::os::raw::c_void,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                current: usize,
                total: usize,
            ) -> bool,
        >,
        matchCtxt: *mut ::std::os::raw::c_void,
        matchCallback: ::std::option::Option<
            unsafe extern "C" fn(
                matchCtxt: *mut ::std::os::raw::c_void,
                addr: u64,
                line: *mut BNLinearDisassemblyLine,
            ) -> bool,
        >,
    ) -> bool;
}
extern "C" {
    pub fn BNAddAutoSegment(
        view: *mut BNBinaryView,
        start: u64,
        length: u64,
        dataOffset: u64,
        dataLength: u64,
        flags: u32,
    );
}
extern "C" {
    pub fn BNRemoveAutoSegment(view: *mut BNBinaryView, start: u64, length: u64);
}
extern "C" {
    pub fn BNAddUserSegment(
        view: *mut BNBinaryView,
        start: u64,
        length: u64,
        dataOffset: u64,
        dataLength: u64,
        flags: u32,
    );
}
extern "C" {
    pub fn BNRemoveUserSegment(view: *mut BNBinaryView, start: u64, length: u64);
}
extern "C" {
    pub fn BNGetSegments(view: *mut BNBinaryView, count: *mut usize) -> *mut *mut BNSegment;
}
extern "C" {
    pub fn BNFreeSegmentList(segments: *mut *mut BNSegment, count: usize);
}
extern "C" {
    pub fn BNGetSegmentAt(view: *mut BNBinaryView, addr: u64) -> *mut BNSegment;
}
extern "C" {
    pub fn BNGetAddressForDataOffset(view: *mut BNBinaryView, offset: u64, addr: *mut u64) -> bool;
}
extern "C" {
    pub fn BNGetComponentByGuid(
        view: *mut BNBinaryView,
        guid: *const ::std::os::raw::c_char,
    ) -> *mut BNComponent;
}
extern "C" {
    pub fn BNGetRootComponent(view: *mut BNBinaryView) -> *mut BNComponent;
}
extern "C" {
    pub fn BNCreateComponent(view: *mut BNBinaryView) -> *mut BNComponent;
}
extern "C" {
    pub fn BNCreateComponentWithParent(
        view: *mut BNBinaryView,
        parentGUID: *const ::std::os::raw::c_char,
    ) -> *mut BNComponent;
}
extern "C" {
    pub fn BNCreateComponentWithName(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNComponent;
}
extern "C" {
    pub fn BNCreateComponentWithParentAndName(
        view: *mut BNBinaryView,
        parentGUID: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNComponent;
}
extern "C" {
    pub fn BNGetComponentByPath(
        view: *mut BNBinaryView,
        path: *const ::std::os::raw::c_char,
    ) -> *mut BNComponent;
}
extern "C" {
    pub fn BNRemoveComponent(view: *mut BNBinaryView, component: *mut BNComponent) -> bool;
}
extern "C" {
    pub fn BNRemoveComponentByGuid(
        view: *mut BNBinaryView,
        guid: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNAddAutoSection(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        start: u64,
        length: u64,
        semantics: BNSectionSemantics,
        type_: *const ::std::os::raw::c_char,
        align: u64,
        entrySize: u64,
        linkedSection: *const ::std::os::raw::c_char,
        infoSection: *const ::std::os::raw::c_char,
        infoData: u64,
    );
}
extern "C" {
    pub fn BNRemoveAutoSection(view: *mut BNBinaryView, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddUserSection(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        start: u64,
        length: u64,
        semantics: BNSectionSemantics,
        type_: *const ::std::os::raw::c_char,
        align: u64,
        entrySize: u64,
        linkedSection: *const ::std::os::raw::c_char,
        infoSection: *const ::std::os::raw::c_char,
        infoData: u64,
    );
}
extern "C" {
    pub fn BNRemoveUserSection(view: *mut BNBinaryView, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetSections(view: *mut BNBinaryView, count: *mut usize) -> *mut *mut BNSection;
}
extern "C" {
    pub fn BNGetSectionsAt(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut *mut BNSection;
}
extern "C" {
    pub fn BNFreeSectionList(sections: *mut *mut BNSection, count: usize);
}
extern "C" {
    pub fn BNGetSectionByName(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNSection;
}
extern "C" {
    pub fn BNGetUniqueSectionNames(
        view: *mut BNBinaryView,
        names: *mut *const ::std::os::raw::c_char,
        count: usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetNameSpaces(view: *mut BNBinaryView, count: *mut usize) -> *mut BNNameSpace;
}
extern "C" {
    pub fn BNFreeNameSpaceList(nameSpace: *mut BNNameSpace, count: usize);
}
extern "C" {
    pub fn BNGetExternalNameSpace() -> BNNameSpace;
}
extern "C" {
    pub fn BNGetInternalNameSpace() -> BNNameSpace;
}
extern "C" {
    pub fn BNFreeNameSpace(name: *mut BNNameSpace);
}
extern "C" {
    pub fn BNGetAllocatedRanges(view: *mut BNBinaryView, count: *mut usize) -> *mut BNAddressRange;
}
extern "C" {
    pub fn BNFreeAddressRanges(ranges: *mut BNAddressRange);
}
extern "C" {
    pub fn BNGetGlobalPointerValue(view: *mut BNBinaryView) -> BNRegisterValueWithConfidence;
}
extern "C" {
    pub fn BNCreateBinaryDataView(file: *mut BNFileMetadata) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNCreateBinaryDataViewFromBuffer(
        file: *mut BNFileMetadata,
        buf: *mut BNDataBuffer,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNCreateBinaryDataViewFromData(
        file: *mut BNFileMetadata,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNCreateBinaryDataViewFromFilename(
        file: *mut BNFileMetadata,
        filename: *const ::std::os::raw::c_char,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNCreateBinaryDataViewFromFile(
        file: *mut BNFileMetadata,
        accessor: *mut BNFileAccessor,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNCreateCustomBinaryView(
        name: *const ::std::os::raw::c_char,
        file: *mut BNFileMetadata,
        parent: *mut BNBinaryView,
        view: *mut BNCustomBinaryView,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNGetBinaryViewTypeByName(name: *const ::std::os::raw::c_char) -> *mut BNBinaryViewType;
}
extern "C" {
    pub fn BNGetBinaryViewTypes(count: *mut usize) -> *mut *mut BNBinaryViewType;
}
extern "C" {
    pub fn BNGetBinaryViewTypesForData(
        data: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut *mut BNBinaryViewType;
}
extern "C" {
    pub fn BNFreeBinaryViewTypeList(types: *mut *mut BNBinaryViewType);
}
extern "C" {
    pub fn BNGetBinaryViewTypeName(type_: *mut BNBinaryViewType) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetBinaryViewTypeLongName(type_: *mut BNBinaryViewType)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNIsBinaryViewTypeDeprecated(type_: *mut BNBinaryViewType) -> bool;
}
extern "C" {
    pub fn BNCreateBinaryViewOfType(
        type_: *mut BNBinaryViewType,
        data: *mut BNBinaryView,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNParseBinaryViewOfType(
        type_: *mut BNBinaryViewType,
        data: *mut BNBinaryView,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNIsBinaryViewTypeValidForData(
        type_: *mut BNBinaryViewType,
        data: *mut BNBinaryView,
    ) -> bool;
}
extern "C" {
    pub fn BNGetBinaryViewDefaultLoadSettingsForData(
        type_: *mut BNBinaryViewType,
        data: *mut BNBinaryView,
    ) -> *mut BNSettings;
}
extern "C" {
    pub fn BNGetBinaryViewLoadSettingsForData(
        type_: *mut BNBinaryViewType,
        data: *mut BNBinaryView,
    ) -> *mut BNSettings;
}
extern "C" {
    pub fn BNRegisterBinaryViewType(
        name: *const ::std::os::raw::c_char,
        longName: *const ::std::os::raw::c_char,
        type_: *mut BNCustomBinaryViewType,
    ) -> *mut BNBinaryViewType;
}
extern "C" {
    pub fn BNRegisterArchitectureForViewType(
        type_: *mut BNBinaryViewType,
        id: u32,
        endian: BNEndianness,
        arch: *mut BNArchitecture,
    );
}
extern "C" {
    pub fn BNGetArchitectureForViewType(
        type_: *mut BNBinaryViewType,
        id: u32,
        endian: BNEndianness,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNRegisterPlatformForViewType(
        type_: *mut BNBinaryViewType,
        id: u32,
        arch: *mut BNArchitecture,
        platform: *mut BNPlatform,
    );
}
extern "C" {
    pub fn BNGetPlatformForViewType(
        type_: *mut BNBinaryViewType,
        id: u32,
        arch: *mut BNArchitecture,
    ) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNRegisterDefaultPlatformForViewType(
        type_: *mut BNBinaryViewType,
        arch: *mut BNArchitecture,
        platform: *mut BNPlatform,
    );
}
extern "C" {
    pub fn BNRegisterPlatformRecognizerForViewType(
        type_: *mut BNBinaryViewType,
        id: u64,
        endian: BNEndianness,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                metadata: *mut BNMetadata,
            ) -> *mut BNPlatform,
        >,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRecognizePlatformForViewType(
        type_: *mut BNBinaryViewType,
        id: u64,
        endian: BNEndianness,
        view: *mut BNBinaryView,
        metadata: *mut BNMetadata,
    ) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNRegisterBinaryViewEvent(
        type_: BNBinaryViewEventType,
        callback: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
        >,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNCreateBinaryReader(view: *mut BNBinaryView) -> *mut BNBinaryReader;
}
extern "C" {
    pub fn BNFreeBinaryReader(stream: *mut BNBinaryReader);
}
extern "C" {
    pub fn BNGetBinaryReaderEndianness(stream: *mut BNBinaryReader) -> BNEndianness;
}
extern "C" {
    pub fn BNSetBinaryReaderEndianness(stream: *mut BNBinaryReader, endian: BNEndianness);
}
extern "C" {
    pub fn BNReadData(
        stream: *mut BNBinaryReader,
        dest: *mut ::std::os::raw::c_void,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNRead8(stream: *mut BNBinaryReader, result: *mut u8) -> bool;
}
extern "C" {
    pub fn BNRead16(stream: *mut BNBinaryReader, result: *mut u16) -> bool;
}
extern "C" {
    pub fn BNRead32(stream: *mut BNBinaryReader, result: *mut u32) -> bool;
}
extern "C" {
    pub fn BNRead64(stream: *mut BNBinaryReader, result: *mut u64) -> bool;
}
extern "C" {
    pub fn BNReadLE16(stream: *mut BNBinaryReader, result: *mut u16) -> bool;
}
extern "C" {
    pub fn BNReadLE32(stream: *mut BNBinaryReader, result: *mut u32) -> bool;
}
extern "C" {
    pub fn BNReadLE64(stream: *mut BNBinaryReader, result: *mut u64) -> bool;
}
extern "C" {
    pub fn BNReadBE16(stream: *mut BNBinaryReader, result: *mut u16) -> bool;
}
extern "C" {
    pub fn BNReadBE32(stream: *mut BNBinaryReader, result: *mut u32) -> bool;
}
extern "C" {
    pub fn BNReadBE64(stream: *mut BNBinaryReader, result: *mut u64) -> bool;
}
extern "C" {
    pub fn BNGetReaderPosition(stream: *mut BNBinaryReader) -> u64;
}
extern "C" {
    pub fn BNSeekBinaryReader(stream: *mut BNBinaryReader, offset: u64);
}
extern "C" {
    pub fn BNSeekBinaryReaderRelative(stream: *mut BNBinaryReader, offset: i64);
}
extern "C" {
    pub fn BNGetBinaryReaderVirtualBase(stream: *mut BNBinaryReader) -> u64;
}
extern "C" {
    pub fn BNSetBinaryReaderVirtualBase(stream: *mut BNBinaryReader, base: u64);
}
extern "C" {
    pub fn BNIsEndOfFile(stream: *mut BNBinaryReader) -> bool;
}
extern "C" {
    pub fn BNCreateBinaryWriter(view: *mut BNBinaryView) -> *mut BNBinaryWriter;
}
extern "C" {
    pub fn BNFreeBinaryWriter(stream: *mut BNBinaryWriter);
}
extern "C" {
    pub fn BNGetBinaryWriterEndianness(stream: *mut BNBinaryWriter) -> BNEndianness;
}
extern "C" {
    pub fn BNSetBinaryWriterEndianness(stream: *mut BNBinaryWriter, endian: BNEndianness);
}
extern "C" {
    pub fn BNWriteData(
        stream: *mut BNBinaryWriter,
        src: *const ::std::os::raw::c_void,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNWrite8(stream: *mut BNBinaryWriter, val: u8) -> bool;
}
extern "C" {
    pub fn BNWrite16(stream: *mut BNBinaryWriter, val: u16) -> bool;
}
extern "C" {
    pub fn BNWrite32(stream: *mut BNBinaryWriter, val: u32) -> bool;
}
extern "C" {
    pub fn BNWrite64(stream: *mut BNBinaryWriter, val: u64) -> bool;
}
extern "C" {
    pub fn BNWriteLE16(stream: *mut BNBinaryWriter, val: u16) -> bool;
}
extern "C" {
    pub fn BNWriteLE32(stream: *mut BNBinaryWriter, val: u32) -> bool;
}
extern "C" {
    pub fn BNWriteLE64(stream: *mut BNBinaryWriter, val: u64) -> bool;
}
extern "C" {
    pub fn BNWriteBE16(stream: *mut BNBinaryWriter, val: u16) -> bool;
}
extern "C" {
    pub fn BNWriteBE32(stream: *mut BNBinaryWriter, val: u32) -> bool;
}
extern "C" {
    pub fn BNWriteBE64(stream: *mut BNBinaryWriter, val: u64) -> bool;
}
extern "C" {
    pub fn BNGetWriterPosition(stream: *mut BNBinaryWriter) -> u64;
}
extern "C" {
    pub fn BNSeekBinaryWriter(stream: *mut BNBinaryWriter, offset: u64);
}
extern "C" {
    pub fn BNSeekBinaryWriterRelative(stream: *mut BNBinaryWriter, offset: i64);
}
extern "C" {
    pub fn BNGetTransformByName(name: *const ::std::os::raw::c_char) -> *mut BNTransform;
}
extern "C" {
    pub fn BNGetTransformTypeList(count: *mut usize) -> *mut *mut BNTransform;
}
extern "C" {
    pub fn BNFreeTransformTypeList(xforms: *mut *mut BNTransform);
}
extern "C" {
    pub fn BNRegisterTransformType(
        type_: BNTransformType,
        name: *const ::std::os::raw::c_char,
        longName: *const ::std::os::raw::c_char,
        group: *const ::std::os::raw::c_char,
        xform: *mut BNCustomTransform,
    ) -> *mut BNTransform;
}
extern "C" {
    pub fn BNGetTransformType(xform: *mut BNTransform) -> BNTransformType;
}
extern "C" {
    pub fn BNGetTransformName(xform: *mut BNTransform) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTransformLongName(xform: *mut BNTransform) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTransformGroup(xform: *mut BNTransform) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTransformParameterList(
        xform: *mut BNTransform,
        count: *mut usize,
    ) -> *mut BNTransformParameterInfo;
}
extern "C" {
    pub fn BNFreeTransformParameterList(params: *mut BNTransformParameterInfo, count: usize);
}
extern "C" {
    pub fn BNDecode(
        xform: *mut BNTransform,
        input: *mut BNDataBuffer,
        output: *mut BNDataBuffer,
        params: *mut BNTransformParameter,
        paramCount: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNEncode(
        xform: *mut BNTransform,
        input: *mut BNDataBuffer,
        output: *mut BNDataBuffer,
        params: *mut BNTransformParameter,
        paramCount: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetArchitectureByName(name: *const ::std::os::raw::c_char) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetArchitectureList(count: *mut usize) -> *mut *mut BNArchitecture;
}
extern "C" {
    pub fn BNFreeArchitectureList(archs: *mut *mut BNArchitecture);
}
extern "C" {
    pub fn BNRegisterArchitecture(
        name: *const ::std::os::raw::c_char,
        arch: *mut BNCustomArchitecture,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNRegisterArchitectureExtension(
        name: *const ::std::os::raw::c_char,
        base: *mut BNArchitecture,
        arch: *mut BNCustomArchitecture,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNAddArchitectureRedirection(
        arch: *mut BNArchitecture,
        from: *mut BNArchitecture,
        to: *mut BNArchitecture,
    );
}
extern "C" {
    pub fn BNRegisterArchitectureHook(
        base: *mut BNArchitecture,
        arch: *mut BNCustomArchitecture,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNFinalizeArchitectureHook(base: *mut BNArchitecture);
}
extern "C" {
    pub fn BNGetNativeTypeParserArchitecture() -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetArchitectureName(arch: *mut BNArchitecture) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetArchitectureEndianness(arch: *mut BNArchitecture) -> BNEndianness;
}
extern "C" {
    pub fn BNGetArchitectureAddressSize(arch: *mut BNArchitecture) -> usize;
}
extern "C" {
    pub fn BNGetArchitectureDefaultIntegerSize(arch: *mut BNArchitecture) -> usize;
}
extern "C" {
    pub fn BNGetArchitectureInstructionAlignment(arch: *mut BNArchitecture) -> usize;
}
extern "C" {
    pub fn BNGetArchitectureMaxInstructionLength(arch: *mut BNArchitecture) -> usize;
}
extern "C" {
    pub fn BNGetArchitectureOpcodeDisplayLength(arch: *mut BNArchitecture) -> usize;
}
extern "C" {
    pub fn BNGetAssociatedArchitectureByAddress(
        arch: *mut BNArchitecture,
        addr: *mut u64,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetInstructionInfo(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        maxLen: usize,
        result: *mut BNInstructionInfo,
    ) -> bool;
}
extern "C" {
    pub fn BNGetInstructionText(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: *mut usize,
        result: *mut *mut BNInstructionTextToken,
        count: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetInstructionLowLevelIL(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: *mut usize,
        il: *mut BNLowLevelILFunction,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeInstructionText(tokens: *mut BNInstructionTextToken, count: usize);
}
extern "C" {
    pub fn BNFreeInstructionTextLines(lines: *mut BNInstructionTextLine, count: usize);
}
extern "C" {
    pub fn BNGetArchitectureRegisterName(
        arch: *mut BNArchitecture,
        reg: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetArchitectureFlagName(
        arch: *mut BNArchitecture,
        flag: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetArchitectureFlagWriteTypeName(
        arch: *mut BNArchitecture,
        flags: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetArchitectureSemanticFlagClassName(
        arch: *mut BNArchitecture,
        semClass: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetArchitectureSemanticFlagGroupName(
        arch: *mut BNArchitecture,
        semGroup: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetFullWidthArchitectureRegisters(
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetAllArchitectureRegisters(arch: *mut BNArchitecture, count: *mut usize) -> *mut u32;
}
extern "C" {
    pub fn BNGetAllArchitectureFlags(arch: *mut BNArchitecture, count: *mut usize) -> *mut u32;
}
extern "C" {
    pub fn BNGetAllArchitectureFlagWriteTypes(
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetAllArchitectureSemanticFlagClasses(
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetAllArchitectureSemanticFlagGroups(
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureFlagRole(
        arch: *mut BNArchitecture,
        flag: u32,
        semClass: u32,
    ) -> BNFlagRole;
}
extern "C" {
    pub fn BNGetArchitectureFlagsRequiredForFlagCondition(
        arch: *mut BNArchitecture,
        cond: BNLowLevelILFlagCondition,
        semClass: u32,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureFlagsRequiredForSemanticFlagGroup(
        arch: *mut BNArchitecture,
        semGroup: u32,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureFlagConditionsForSemanticFlagGroup(
        arch: *mut BNArchitecture,
        semGroup: u32,
        count: *mut usize,
    ) -> *mut BNFlagConditionForSemanticClass;
}
extern "C" {
    pub fn BNFreeFlagConditionsForSemanticFlagGroup(
        conditions: *mut BNFlagConditionForSemanticClass,
    );
}
extern "C" {
    pub fn BNGetArchitectureFlagsWrittenByFlagWriteType(
        arch: *mut BNArchitecture,
        writeType: u32,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureSemanticClassForFlagWriteType(
        arch: *mut BNArchitecture,
        writeType: u32,
    ) -> u32;
}
extern "C" {
    pub fn BNGetArchitectureFlagWriteLowLevelIL(
        arch: *mut BNArchitecture,
        op: BNLowLevelILOperation,
        size: usize,
        flagWriteType: u32,
        flag: u32,
        operands: *mut BNRegisterOrConstant,
        operandCount: usize,
        il: *mut BNLowLevelILFunction,
    ) -> usize;
}
extern "C" {
    pub fn BNGetDefaultArchitectureFlagWriteLowLevelIL(
        arch: *mut BNArchitecture,
        op: BNLowLevelILOperation,
        size: usize,
        role: BNFlagRole,
        operands: *mut BNRegisterOrConstant,
        operandCount: usize,
        il: *mut BNLowLevelILFunction,
    ) -> usize;
}
extern "C" {
    pub fn BNGetArchitectureFlagConditionLowLevelIL(
        arch: *mut BNArchitecture,
        cond: BNLowLevelILFlagCondition,
        semClass: u32,
        il: *mut BNLowLevelILFunction,
    ) -> usize;
}
extern "C" {
    pub fn BNGetDefaultArchitectureFlagConditionLowLevelIL(
        arch: *mut BNArchitecture,
        cond: BNLowLevelILFlagCondition,
        semClass: u32,
        il: *mut BNLowLevelILFunction,
    ) -> usize;
}
extern "C" {
    pub fn BNGetArchitectureSemanticFlagGroupLowLevelIL(
        arch: *mut BNArchitecture,
        semGroup: u32,
        il: *mut BNLowLevelILFunction,
    ) -> usize;
}
extern "C" {
    pub fn BNGetModifiedArchitectureRegistersOnWrite(
        arch: *mut BNArchitecture,
        reg: u32,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNFreeRegisterList(regs: *mut u32);
}
extern "C" {
    pub fn BNGetArchitectureRegisterInfo(arch: *mut BNArchitecture, reg: u32) -> BNRegisterInfo;
}
extern "C" {
    pub fn BNGetArchitectureStackPointerRegister(arch: *mut BNArchitecture) -> u32;
}
extern "C" {
    pub fn BNGetArchitectureLinkRegister(arch: *mut BNArchitecture) -> u32;
}
extern "C" {
    pub fn BNGetArchitectureGlobalRegisters(
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNIsArchitectureGlobalRegister(arch: *mut BNArchitecture, reg: u32) -> bool;
}
extern "C" {
    pub fn BNGetArchitectureSystemRegisters(
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNIsArchitectureSystemRegister(arch: *mut BNArchitecture, reg: u32) -> bool;
}
extern "C" {
    pub fn BNGetArchitectureRegisterByName(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
    ) -> u32;
}
extern "C" {
    pub fn BNGetArchitectureRegisterStackName(
        arch: *mut BNArchitecture,
        regStack: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAllArchitectureRegisterStacks(
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureRegisterStackInfo(
        arch: *mut BNArchitecture,
        regStack: u32,
    ) -> BNRegisterStackInfo;
}
extern "C" {
    pub fn BNGetArchitectureRegisterStackForRegister(arch: *mut BNArchitecture, reg: u32) -> u32;
}
extern "C" {
    pub fn BNGetArchitectureIntrinsicName(
        arch: *mut BNArchitecture,
        intrinsic: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAllArchitectureIntrinsics(arch: *mut BNArchitecture, count: *mut usize)
        -> *mut u32;
}
extern "C" {
    pub fn BNGetArchitectureIntrinsicInputs(
        arch: *mut BNArchitecture,
        intrinsic: u32,
        count: *mut usize,
    ) -> *mut BNNameAndType;
}
extern "C" {
    pub fn BNFreeNameAndTypeList(nt: *mut BNNameAndType, count: usize);
}
extern "C" {
    pub fn BNGetArchitectureIntrinsicOutputs(
        arch: *mut BNArchitecture,
        intrinsic: u32,
        count: *mut usize,
    ) -> *mut BNTypeWithConfidence;
}
extern "C" {
    pub fn BNFreeOutputTypeList(types: *mut BNTypeWithConfidence, count: usize);
}
extern "C" {
    pub fn BNCanArchitectureAssemble(arch: *mut BNArchitecture) -> bool;
}
extern "C" {
    pub fn BNAssemble(
        arch: *mut BNArchitecture,
        code: *const ::std::os::raw::c_char,
        addr: u64,
        result: *mut BNDataBuffer,
        errors: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNIsArchitectureNeverBranchPatchAvailable(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNIsArchitectureAlwaysBranchPatchAvailable(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNIsArchitectureInvertBranchPatchAvailable(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNIsArchitectureSkipAndReturnZeroPatchAvailable(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNIsArchitectureSkipAndReturnValuePatchAvailable(
        arch: *mut BNArchitecture,
        data: *const u8,
        addr: u64,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNArchitectureConvertToNop(
        arch: *mut BNArchitecture,
        data: *mut u8,
        addr: u64,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNArchitectureAlwaysBranch(
        arch: *mut BNArchitecture,
        data: *mut u8,
        addr: u64,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNArchitectureInvertBranch(
        arch: *mut BNArchitecture,
        data: *mut u8,
        addr: u64,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNArchitectureSkipAndReturnValue(
        arch: *mut BNArchitecture,
        data: *mut u8,
        addr: u64,
        len: usize,
        value: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNRegisterArchitectureFunctionRecognizer(
        arch: *mut BNArchitecture,
        rec: *mut BNFunctionRecognizer,
    );
}
extern "C" {
    pub fn BNArchitectureRegisterRelocationHandler(
        arch: *mut BNArchitecture,
        viewName: *const ::std::os::raw::c_char,
        handler: *mut BNRelocationHandler,
    );
}
extern "C" {
    pub fn BNCreateRelocationHandler(
        handler: *mut BNCustomRelocationHandler,
    ) -> *mut BNRelocationHandler;
}
extern "C" {
    pub fn BNArchitectureGetRelocationHandler(
        arch: *mut BNArchitecture,
        viewName: *const ::std::os::raw::c_char,
    ) -> *mut BNRelocationHandler;
}
extern "C" {
    pub fn BNNewRelocationHandlerReference(
        handler: *mut BNRelocationHandler,
    ) -> *mut BNRelocationHandler;
}
extern "C" {
    pub fn BNFreeRelocationHandler(handler: *mut BNRelocationHandler);
}
extern "C" {
    pub fn BNRelocationHandlerGetRelocationInfo(
        handler: *mut BNRelocationHandler,
        data: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        info: *mut BNRelocationInfo,
        infoCount: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNRelocationHandlerApplyRelocation(
        handler: *mut BNRelocationHandler,
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        reloc: *mut BNRelocation,
        dest: *mut u8,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNRelocationHandlerDefaultApplyRelocation(
        handler: *mut BNRelocationHandler,
        view: *mut BNBinaryView,
        arch: *mut BNArchitecture,
        reloc: *mut BNRelocation,
        dest: *mut u8,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNRelocationHandlerGetOperandForExternalRelocation(
        handler: *mut BNRelocationHandler,
        data: *const u8,
        addr: u64,
        length: usize,
        il: *const BNLowLevelILFunction,
        relocation: *mut BNRelocation,
    ) -> usize;
}
extern "C" {
    pub fn BNAddAnalysisOption(view: *mut BNBinaryView, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddFunctionForAnalysis(
        view: *mut BNBinaryView,
        platform: *mut BNPlatform,
        addr: u64,
        autoDiscovered: bool,
        type_: *mut BNType,
    ) -> *mut BNFunction;
}
extern "C" {
    pub fn BNAddEntryPointForAnalysis(
        view: *mut BNBinaryView,
        platform: *mut BNPlatform,
        addr: u64,
    );
}
extern "C" {
    pub fn BNRemoveAnalysisFunction(
        view: *mut BNBinaryView,
        func: *mut BNFunction,
        updateRefs: bool,
    );
}
extern "C" {
    pub fn BNCreateUserFunction(
        view: *mut BNBinaryView,
        platform: *mut BNPlatform,
        addr: u64,
    ) -> *mut BNFunction;
}
extern "C" {
    pub fn BNRemoveUserFunction(view: *mut BNBinaryView, func: *mut BNFunction);
}
extern "C" {
    pub fn BNHasInitialAnalysis(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNSetAnalysisHold(view: *mut BNBinaryView, enable: bool);
}
extern "C" {
    pub fn BNUpdateAnalysisAndWait(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNUpdateAnalysis(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNAbortAnalysis(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNIsFunctionUpdateNeeded(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNRequestAdvancedFunctionAnalysisData(func: *mut BNFunction);
}
extern "C" {
    pub fn BNReleaseAdvancedFunctionAnalysisData(func: *mut BNFunction);
}
extern "C" {
    pub fn BNReleaseAdvancedFunctionAnalysisDataMultiple(func: *mut BNFunction, count: usize);
}
extern "C" {
    pub fn BNNewFunctionReference(func: *mut BNFunction) -> *mut BNFunction;
}
extern "C" {
    pub fn BNFreeFunction(func: *mut BNFunction);
}
extern "C" {
    pub fn BNGetAnalysisFunctionList(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut *mut BNFunction;
}
extern "C" {
    pub fn BNFreeFunctionList(funcs: *mut *mut BNFunction, count: usize);
}
extern "C" {
    pub fn BNHasFunctions(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNHasSymbols(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNHasDataVariables(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNGetAnalysisFunction(
        view: *mut BNBinaryView,
        platform: *mut BNPlatform,
        addr: u64,
    ) -> *mut BNFunction;
}
extern "C" {
    pub fn BNGetRecentAnalysisFunctionForAddress(
        view: *mut BNBinaryView,
        addr: u64,
    ) -> *mut BNFunction;
}
extern "C" {
    pub fn BNGetAnalysisFunctionsForAddress(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut *mut BNFunction;
}
extern "C" {
    pub fn BNGetAnalysisFunctionsContainingAddress(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut *mut BNFunction;
}
extern "C" {
    pub fn BNGetAnalysisEntryPoint(view: *mut BNBinaryView) -> *mut BNFunction;
}
extern "C" {
    pub fn BNGetGlobalCommentForAddress(
        view: *mut BNBinaryView,
        addr: u64,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetGlobalCommentedAddresses(view: *mut BNBinaryView, count: *mut usize) -> *mut u64;
}
extern "C" {
    pub fn BNSetGlobalCommentForAddress(
        view: *mut BNBinaryView,
        addr: u64,
        comment: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetFunctionData(func: *mut BNFunction) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNGetFunctionArchitecture(func: *mut BNFunction) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetFunctionPlatform(func: *mut BNFunction) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNGetFunctionStart(func: *mut BNFunction) -> u64;
}
extern "C" {
    pub fn BNGetFunctionSymbol(func: *mut BNFunction) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNWasFunctionAutomaticallyDiscovered(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNFunctionHasUserAnnotations(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNCanFunctionReturn(func: *mut BNFunction) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsFunctionPure(func: *mut BNFunction) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNSetFunctionAutoType(func: *mut BNFunction, type_: *mut BNType);
}
extern "C" {
    pub fn BNSetFunctionUserType(func: *mut BNFunction, type_: *mut BNType);
}
extern "C" {
    pub fn BNFunctionHasUserType(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNGetFunctionComment(func: *mut BNFunction) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetCommentForAddress(func: *mut BNFunction, addr: u64) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetCommentedAddresses(func: *mut BNFunction, count: *mut usize) -> *mut u64;
}
extern "C" {
    pub fn BNFreeAddressList(addrs: *mut u64);
}
extern "C" {
    pub fn BNSetFunctionComment(func: *mut BNFunction, comment: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNSetCommentForAddress(
        func: *mut BNFunction,
        addr: u64,
        comment: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddUserCodeReference(
        func: *mut BNFunction,
        fromArch: *mut BNArchitecture,
        fromAddr: u64,
        toAddr: u64,
    );
}
extern "C" {
    pub fn BNRemoveUserCodeReference(
        func: *mut BNFunction,
        fromArch: *mut BNArchitecture,
        fromAddr: u64,
        toAddr: u64,
    );
}
extern "C" {
    pub fn BNAddUserTypeReference(
        func: *mut BNFunction,
        fromArch: *mut BNArchitecture,
        fromAddr: u64,
        name: *mut BNQualifiedName,
    );
}
extern "C" {
    pub fn BNRemoveUserTypeReference(
        func: *mut BNFunction,
        fromArch: *mut BNArchitecture,
        fromAddr: u64,
        name: *mut BNQualifiedName,
    );
}
extern "C" {
    pub fn BNAddUserTypeFieldReference(
        func: *mut BNFunction,
        fromArch: *mut BNArchitecture,
        fromAddr: u64,
        name: *mut BNQualifiedName,
        offset: u64,
        size: usize,
    );
}
extern "C" {
    pub fn BNRemoveUserTypeFieldReference(
        func: *mut BNFunction,
        fromArch: *mut BNArchitecture,
        fromAddr: u64,
        name: *mut BNQualifiedName,
        offset: u64,
        size: usize,
    );
}
extern "C" {
    pub fn BNNewBasicBlockReference(block: *mut BNBasicBlock) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNFreeBasicBlock(block: *mut BNBasicBlock);
}
extern "C" {
    pub fn BNGetFunctionBasicBlockList(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNFreeBasicBlockList(blocks: *mut *mut BNBasicBlock, count: usize);
}
extern "C" {
    pub fn BNGetFunctionBasicBlockAtAddress(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetRecentBasicBlockForAddress(view: *mut BNBinaryView, addr: u64)
        -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlocksForAddress(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlocksStartingAtAddress(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetFunctionHighestAddress(func: *mut BNFunction) -> u64;
}
extern "C" {
    pub fn BNGetFunctionLowestAddress(func: *mut BNFunction) -> u64;
}
extern "C" {
    pub fn BNGetFunctionAddressRanges(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNAddressRange;
}
extern "C" {
    pub fn BNGetFunctionLowLevelIL(func: *mut BNFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionLowLevelILIfAvailable(func: *mut BNFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetLowLevelILForInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILInstructionsForAddress(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetLowLevelILExitsForInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNFreeILInstructionList(list: *mut usize);
}
extern "C" {
    pub fn BNGetFunctionMediumLevelIL(func: *mut BNFunction) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionMediumLevelILIfAvailable(
        func: *mut BNFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionMappedMediumLevelIL(func: *mut BNFunction) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionMappedMediumLevelILIfAvailable(
        func: *mut BNFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionHighLevelIL(func: *mut BNFunction) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionHighLevelILIfAvailable(func: *mut BNFunction)
        -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionLanguageRepresentation(
        func: *mut BNFunction,
    ) -> *mut BNLanguageRepresentationFunction;
}
extern "C" {
    pub fn BNGetFunctionLanguageRepresentationIfAvailable(
        func: *mut BNFunction,
    ) -> *mut BNLanguageRepresentationFunction;
}
extern "C" {
    pub fn BNGetConstantData(
        func: *mut BNFunction,
        state: BNRegisterValueType,
        value: u64,
        size: usize,
    ) -> *mut BNDataBuffer;
}
extern "C" {
    pub fn BNGetRegisterValueAtInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        reg: u32,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetRegisterValueAfterInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        reg: u32,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetStackContentsAtInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        offset: i64,
        size: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetStackContentsAfterInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        offset: i64,
        size: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetParameterValueAtInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        functionType: *mut BNType,
        i: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetParameterValueAtLowLevelILInstruction(
        func: *mut BNFunction,
        instr: usize,
        functionType: *mut BNType,
        i: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNFreePossibleValueSet(value: *mut BNPossibleValueSet);
}
extern "C" {
    pub fn BNGetRegistersReadByInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetRegistersWrittenByInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetStackVariablesReferencedByInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNStackVariableReference;
}
extern "C" {
    pub fn BNGetStackVariablesReferencedByInstructionIfAvailable(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNStackVariableReference;
}
extern "C" {
    pub fn BNFreeStackVariableReferenceList(refs: *mut BNStackVariableReference, count: usize);
}
extern "C" {
    pub fn BNGetConstantsReferencedByInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNConstantReference;
}
extern "C" {
    pub fn BNGetConstantsReferencedByInstructionIfAvailable(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNConstantReference;
}
extern "C" {
    pub fn BNFreeConstantReferenceList(refs: *mut BNConstantReference);
}
extern "C" {
    pub fn BNGetFunctionLiftedIL(func: *mut BNFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetFunctionLiftedILIfAvailable(func: *mut BNFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetLiftedILForInstruction(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNGetLiftedILInstructionsForAddress(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetLiftedILFlagUsesForDefinition(
        func: *mut BNFunction,
        i: usize,
        flag: u32,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetLiftedILFlagDefinitionsForUse(
        func: *mut BNFunction,
        i: usize,
        flag: u32,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetFlagsReadByLiftedILInstruction(
        func: *mut BNFunction,
        i: usize,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetFlagsWrittenByLiftedILInstruction(
        func: *mut BNFunction,
        i: usize,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetFunctionType(func: *mut BNFunction) -> *mut BNType;
}
extern "C" {
    pub fn BNGetFunctionReturnType(func: *mut BNFunction) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionReturnRegisters(func: *mut BNFunction) -> BNRegisterSetWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionCallingConvention(
        func: *mut BNFunction,
    ) -> BNCallingConventionWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionParameterVariables(
        func: *mut BNFunction,
    ) -> BNParameterVariablesWithConfidence;
}
extern "C" {
    pub fn BNFreeParameterVariables(vars: *mut BNParameterVariablesWithConfidence);
}
extern "C" {
    pub fn BNFunctionHasVariableArguments(func: *mut BNFunction) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionStackAdjustment(func: *mut BNFunction) -> BNOffsetWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionRegisterStackAdjustments(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNRegisterStackAdjustment;
}
extern "C" {
    pub fn BNFreeRegisterStackAdjustments(adjustments: *mut BNRegisterStackAdjustment);
}
extern "C" {
    pub fn BNGetFunctionClobberedRegisters(func: *mut BNFunction) -> BNRegisterSetWithConfidence;
}
extern "C" {
    pub fn BNFreeRegisterSet(regs: *mut BNRegisterSetWithConfidence);
}
extern "C" {
    pub fn BNSetAutoFunctionReturnType(func: *mut BNFunction, type_: *mut BNTypeWithConfidence);
}
extern "C" {
    pub fn BNSetAutoFunctionReturnRegisters(
        func: *mut BNFunction,
        regs: *mut BNRegisterSetWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionCallingConvention(
        func: *mut BNFunction,
        convention: *mut BNCallingConventionWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionParameterVariables(
        func: *mut BNFunction,
        vars: *mut BNParameterVariablesWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionHasVariableArguments(
        func: *mut BNFunction,
        varArgs: *mut BNBoolWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionCanReturn(func: *mut BNFunction, returns: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNSetAutoFunctionPure(func: *mut BNFunction, pure_: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNSetAutoFunctionStackAdjustment(
        func: *mut BNFunction,
        stackAdjust: *mut BNOffsetWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionRegisterStackAdjustments(
        func: *mut BNFunction,
        adjustments: *mut BNRegisterStackAdjustment,
        count: usize,
    );
}
extern "C" {
    pub fn BNSetAutoFunctionClobberedRegisters(
        func: *mut BNFunction,
        regs: *mut BNRegisterSetWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionReturnType(func: *mut BNFunction, type_: *mut BNTypeWithConfidence);
}
extern "C" {
    pub fn BNSetUserFunctionReturnRegisters(
        func: *mut BNFunction,
        regs: *mut BNRegisterSetWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionCallingConvention(
        func: *mut BNFunction,
        convention: *mut BNCallingConventionWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionParameterVariables(
        func: *mut BNFunction,
        vars: *mut BNParameterVariablesWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionHasVariableArguments(
        func: *mut BNFunction,
        varArgs: *mut BNBoolWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionCanReturn(func: *mut BNFunction, returns: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNSetUserFunctionPure(func: *mut BNFunction, pure_: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNSetUserFunctionStackAdjustment(
        func: *mut BNFunction,
        stackAdjust: *mut BNOffsetWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionRegisterStackAdjustments(
        func: *mut BNFunction,
        adjustments: *mut BNRegisterStackAdjustment,
        count: usize,
    );
}
extern "C" {
    pub fn BNSetUserFunctionClobberedRegisters(
        func: *mut BNFunction,
        regs: *mut BNRegisterSetWithConfidence,
    );
}
extern "C" {
    pub fn BNApplyImportedTypes(func: *mut BNFunction, sym: *mut BNSymbol, type_: *mut BNType);
}
extern "C" {
    pub fn BNApplyAutoDiscoveredFunctionType(func: *mut BNFunction, type_: *mut BNType);
}
extern "C" {
    pub fn BNFunctionHasExplicitlyDefinedType(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNGetFunctionTypeTokens(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
        count: *mut usize,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNGetFunctionGlobalPointerValue(func: *mut BNFunction) -> BNRegisterValueWithConfidence;
}
extern "C" {
    pub fn BNGetFunctionRegisterValueAtExit(
        func: *mut BNFunction,
        reg: u32,
    ) -> BNRegisterValueWithConfidence;
}
extern "C" {
    pub fn BNIsFunctionInlinedDuringAnalysis(func: *mut BNFunction) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNSetAutoFunctionInlinedDuringAnalysis(
        func: *mut BNFunction,
        inlined: BNBoolWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserFunctionInlinedDuringAnalysis(
        func: *mut BNFunction,
        inlined: BNBoolWithConfidence,
    );
}
extern "C" {
    pub fn BNGetInstructionContainingAddress(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        start: *mut u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetBasicBlockFunction(block: *mut BNBasicBlock) -> *mut BNFunction;
}
extern "C" {
    pub fn BNGetBasicBlockArchitecture(block: *mut BNBasicBlock) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetBasicBlockSource(block: *mut BNBasicBlock) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockStart(block: *mut BNBasicBlock) -> u64;
}
extern "C" {
    pub fn BNGetBasicBlockEnd(block: *mut BNBasicBlock) -> u64;
}
extern "C" {
    pub fn BNGetBasicBlockLength(block: *mut BNBasicBlock) -> u64;
}
extern "C" {
    pub fn BNGetBasicBlockOutgoingEdges(
        block: *mut BNBasicBlock,
        count: *mut usize,
    ) -> *mut BNBasicBlockEdge;
}
extern "C" {
    pub fn BNGetBasicBlockIncomingEdges(
        block: *mut BNBasicBlock,
        count: *mut usize,
    ) -> *mut BNBasicBlockEdge;
}
extern "C" {
    pub fn BNFreeBasicBlockEdgeList(edges: *mut BNBasicBlockEdge, count: usize);
}
extern "C" {
    pub fn BNBasicBlockHasUndeterminedOutgoingEdges(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNBasicBlockCanExit(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNBasicBlockSetCanExit(block: *mut BNBasicBlock, value: bool);
}
extern "C" {
    pub fn BNBasicBlockHasInvalidInstructions(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNGetBasicBlockIndex(block: *mut BNBasicBlock) -> usize;
}
extern "C" {
    pub fn BNGetBasicBlockDominators(
        block: *mut BNBasicBlock,
        count: *mut usize,
        post: bool,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockStrictDominators(
        block: *mut BNBasicBlock,
        count: *mut usize,
        post: bool,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockImmediateDominator(
        block: *mut BNBasicBlock,
        post: bool,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockDominatorTreeChildren(
        block: *mut BNBasicBlock,
        count: *mut usize,
        post: bool,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockDominanceFrontier(
        block: *mut BNBasicBlock,
        count: *mut usize,
        post: bool,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockIteratedDominanceFrontier(
        blocks: *mut *mut BNBasicBlock,
        incomingCount: usize,
        outputCount: *mut usize,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNIsILBasicBlock(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNIsLowLevelILBasicBlock(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNIsMediumLevelILBasicBlock(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNIsHighLevelILBasicBlock(block: *mut BNBasicBlock) -> bool;
}
extern "C" {
    pub fn BNGetBasicBlockFunctionGraphType(block: *mut BNBasicBlock) -> BNFunctionGraphType;
}
extern "C" {
    pub fn BNGetBasicBlockLowLevelILFunction(block: *mut BNBasicBlock)
        -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetBasicBlockMediumLevelILFunction(
        block: *mut BNBasicBlock,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetBasicBlockHighLevelILFunction(
        block: *mut BNBasicBlock,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetBasicBlockInstructionContainingAddress(
        block: *mut BNBasicBlock,
        addr: u64,
        start: *mut u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetBasicBlockSourceBlock(block: *mut BNBasicBlock) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetBasicBlockDisassemblyText(
        block: *mut BNBasicBlock,
        settings: *mut BNDisassemblySettings,
        count: *mut usize,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNFreeDisassemblyTextLines(lines: *mut BNDisassemblyTextLine, count: usize);
}
extern "C" {
    pub fn BNGetDisplayStringForInteger(
        binaryView: *mut BNBinaryView,
        type_: BNIntegerDisplayType,
        value: u64,
        inputWidth: usize,
        isSigned: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCreateDisassemblyTextRenderer(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblyTextRenderer;
}
extern "C" {
    pub fn BNCreateLowLevelILDisassemblyTextRenderer(
        func: *mut BNLowLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblyTextRenderer;
}
extern "C" {
    pub fn BNCreateMediumLevelILDisassemblyTextRenderer(
        func: *mut BNMediumLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblyTextRenderer;
}
extern "C" {
    pub fn BNCreateHighLevelILDisassemblyTextRenderer(
        func: *mut BNHighLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblyTextRenderer;
}
extern "C" {
    pub fn BNNewDisassemblyTextRendererReference(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNDisassemblyTextRenderer;
}
extern "C" {
    pub fn BNFreeDisassemblyTextRenderer(renderer: *mut BNDisassemblyTextRenderer);
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererFunction(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNFunction;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererLowLevelILFunction(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererMediumLevelILFunction(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererHighLevelILFunction(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererBasicBlock(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererArchitecture(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererSettings(
        renderer: *mut BNDisassemblyTextRenderer,
    ) -> *mut BNDisassemblySettings;
}
extern "C" {
    pub fn BNSetDisassemblyTextRendererBasicBlock(
        renderer: *mut BNDisassemblyTextRenderer,
        block: *mut BNBasicBlock,
    );
}
extern "C" {
    pub fn BNSetDisassemblyTextRendererArchitecture(
        renderer: *mut BNDisassemblyTextRenderer,
        arch: *mut BNArchitecture,
    );
}
extern "C" {
    pub fn BNSetDisassemblyTextRendererSettings(
        renderer: *mut BNDisassemblyTextRenderer,
        settings: *mut BNDisassemblySettings,
    );
}
extern "C" {
    pub fn BNIsILDisassemblyTextRenderer(renderer: *mut BNDisassemblyTextRenderer) -> bool;
}
extern "C" {
    pub fn BNDisassemblyTextRendererHasDataFlow(renderer: *mut BNDisassemblyTextRenderer) -> bool;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererInstructionAnnotations(
        renderer: *mut BNDisassemblyTextRenderer,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererInstructionText(
        renderer: *mut BNDisassemblyTextRenderer,
        addr: u64,
        len: *mut usize,
        result: *mut *mut BNDisassemblyTextLine,
        count: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererLines(
        renderer: *mut BNDisassemblyTextRenderer,
        addr: u64,
        len: *mut usize,
        result: *mut *mut BNDisassemblyTextLine,
        count: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNPostProcessDisassemblyTextRendererLines(
        renderer: *mut BNDisassemblyTextRenderer,
        addr: u64,
        len: usize,
        inLines: *mut BNDisassemblyTextLine,
        inCount: usize,
        outCount: *mut usize,
        indentSpaces: *const ::std::os::raw::c_char,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNResetDisassemblyTextRendererDeduplicatedComments(
        renderer: *mut BNDisassemblyTextRenderer,
    );
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererSymbolTokens(
        renderer: *mut BNDisassemblyTextRenderer,
        addr: u64,
        size: usize,
        operand: usize,
        result: *mut *mut BNInstructionTextToken,
        count: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererStackVariableReferenceTokens(
        renderer: *mut BNDisassemblyTextRenderer,
        ref_: *mut BNStackVariableReference,
        count: *mut usize,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNIsIntegerToken(type_: BNInstructionTextTokenType) -> bool;
}
extern "C" {
    pub fn BNGetDisassemblyTextRendererIntegerTokens(
        renderer: *mut BNDisassemblyTextRenderer,
        token: *mut BNInstructionTextToken,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNDisassemblyTextRendererWrapComment(
        renderer: *mut BNDisassemblyTextRenderer,
        inLine: *const BNDisassemblyTextLine,
        outLineCount: *mut usize,
        comment: *const ::std::os::raw::c_char,
        hasAutoAnnotations: bool,
        leadingSpaces: *const ::std::os::raw::c_char,
        indentSpaces: *const ::std::os::raw::c_char,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNMarkFunctionAsRecentlyUsed(func: *mut BNFunction);
}
extern "C" {
    pub fn BNMarkBasicBlockAsRecentlyUsed(block: *mut BNBasicBlock);
}
extern "C" {
    pub fn BNGetCodeReferences(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNReferenceSource;
}
extern "C" {
    pub fn BNGetCodeReferencesInRange(
        view: *mut BNBinaryView,
        addr: u64,
        len: u64,
        count: *mut usize,
    ) -> *mut BNReferenceSource;
}
extern "C" {
    pub fn BNFreeCodeReferences(refs: *mut BNReferenceSource, count: usize);
}
extern "C" {
    pub fn BNFreeTypeFieldReferences(refs: *mut BNTypeFieldReference, count: usize);
}
extern "C" {
    pub fn BNFreeILReferences(refs: *mut BNILReferenceSource, count: usize);
}
extern "C" {
    pub fn BNGetCodeReferencesFrom(
        view: *mut BNBinaryView,
        src: *mut BNReferenceSource,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetCodeReferencesFromInRange(
        view: *mut BNBinaryView,
        src: *mut BNReferenceSource,
        len: u64,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetDataReferences(view: *mut BNBinaryView, addr: u64, count: *mut usize) -> *mut u64;
}
extern "C" {
    pub fn BNGetDataReferencesInRange(
        view: *mut BNBinaryView,
        addr: u64,
        len: u64,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetDataReferencesFrom(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetDataReferencesFromInRange(
        view: *mut BNBinaryView,
        addr: u64,
        len: u64,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNAddUserDataReference(view: *mut BNBinaryView, fromAddr: u64, toAddr: u64);
}
extern "C" {
    pub fn BNRemoveUserDataReference(view: *mut BNBinaryView, fromAddr: u64, toAddr: u64);
}
extern "C" {
    pub fn BNFreeDataReferences(refs: *mut u64);
}
extern "C" {
    pub fn BNFreeTypeReferences(refs: *mut BNTypeReferenceSource, count: usize);
}
extern "C" {
    pub fn BNFreeTypeFieldReferenceSizeInfo(refs: *mut BNTypeFieldReferenceSizeInfo, count: usize);
}
extern "C" {
    pub fn BNFreeTypeFieldReferenceTypeInfo(refs: *mut BNTypeFieldReferenceTypeInfo, count: usize);
}
extern "C" {
    pub fn BNFreeTypeFieldReferenceSizes(refs: *mut usize, count: usize);
}
extern "C" {
    pub fn BNFreeTypeFieldReferenceTypes(refs: *mut BNTypeWithConfidence, count: usize);
}
extern "C" {
    pub fn BNGetCodeReferencesForType(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        count: *mut usize,
    ) -> *mut BNReferenceSource;
}
extern "C" {
    pub fn BNGetDataReferencesForType(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetTypeReferencesForType(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        count: *mut usize,
    ) -> *mut BNTypeReferenceSource;
}
extern "C" {
    pub fn BNGetCodeReferencesForTypeField(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        offset: u64,
        count: *mut usize,
    ) -> *mut BNTypeFieldReference;
}
extern "C" {
    pub fn BNGetDataReferencesForTypeField(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        offset: u64,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetDataReferencesFromForTypeField(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        offset: u64,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetTypeReferencesForTypeField(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        offset: u64,
        count: *mut usize,
    ) -> *mut BNTypeReferenceSource;
}
extern "C" {
    pub fn BNGetCodeReferencesForTypeFrom(
        view: *mut BNBinaryView,
        addr: *mut BNReferenceSource,
        count: *mut usize,
    ) -> *mut BNTypeReferenceSource;
}
extern "C" {
    pub fn BNGetCodeReferencesForTypeFromInRange(
        view: *mut BNBinaryView,
        addr: *mut BNReferenceSource,
        len: u64,
        count: *mut usize,
    ) -> *mut BNTypeReferenceSource;
}
extern "C" {
    pub fn BNGetCodeReferencesForTypeFieldsFrom(
        view: *mut BNBinaryView,
        addr: *mut BNReferenceSource,
        count: *mut usize,
    ) -> *mut BNTypeReferenceSource;
}
extern "C" {
    pub fn BNGetCodeReferencesForTypeFieldsFromInRange(
        view: *mut BNBinaryView,
        addr: *mut BNReferenceSource,
        len: u64,
        count: *mut usize,
    ) -> *mut BNTypeReferenceSource;
}
extern "C" {
    pub fn BNGetAllFieldsReferenced(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetAllSizesReferenced(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        count: *mut usize,
    ) -> *mut BNTypeFieldReferenceSizeInfo;
}
extern "C" {
    pub fn BNGetAllTypesReferenced(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        count: *mut usize,
    ) -> *mut BNTypeFieldReferenceTypeInfo;
}
extern "C" {
    pub fn BNGetSizesReferenced(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        offset: u64,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetTypesReferenced(
        view: *mut BNBinaryView,
        type_: *mut BNQualifiedName,
        offset: u64,
        count: *mut usize,
    ) -> *mut BNTypeWithConfidence;
}
extern "C" {
    pub fn BNRegisterGlobalFunctionRecognizer(rec: *mut BNFunctionRecognizer);
}
extern "C" {
    pub fn BNGetStringAtAddress(
        view: *mut BNBinaryView,
        addr: u64,
        strRef: *mut BNStringReference,
    ) -> bool;
}
extern "C" {
    pub fn BNGetStrings(view: *mut BNBinaryView, count: *mut usize) -> *mut BNStringReference;
}
extern "C" {
    pub fn BNGetStringsInRange(
        view: *mut BNBinaryView,
        start: u64,
        len: u64,
        count: *mut usize,
    ) -> *mut BNStringReference;
}
extern "C" {
    pub fn BNFreeStringReferenceList(strings: *mut BNStringReference);
}
extern "C" {
    pub fn BNGetStackLayout(func: *mut BNFunction, count: *mut usize)
        -> *mut BNVariableNameAndType;
}
extern "C" {
    pub fn BNFreeVariableNameAndTypeList(vars: *mut BNVariableNameAndType, count: usize);
}
extern "C" {
    pub fn BNCreateAutoStackVariable(
        func: *mut BNFunction,
        offset: i64,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNCreateUserStackVariable(
        func: *mut BNFunction,
        offset: i64,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNDeleteAutoStackVariable(func: *mut BNFunction, offset: i64);
}
extern "C" {
    pub fn BNDeleteUserStackVariable(func: *mut BNFunction, offset: i64);
}
extern "C" {
    pub fn BNGetStackVariableAtFrameOffset(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        offset: i64,
        var: *mut BNVariableNameAndType,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeVariableNameAndType(var: *mut BNVariableNameAndType);
}
extern "C" {
    pub fn BNGetFunctionVariables(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNVariableNameAndType;
}
extern "C" {
    pub fn BNCreateAutoVariable(
        func: *mut BNFunction,
        var: *const BNVariable,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
        ignoreDisjointUses: bool,
    );
}
extern "C" {
    pub fn BNCreateUserVariable(
        func: *mut BNFunction,
        var: *const BNVariable,
        type_: *mut BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
        ignoreDisjointUses: bool,
    );
}
extern "C" {
    pub fn BNDeleteUserVariable(func: *mut BNFunction, var: *const BNVariable);
}
extern "C" {
    pub fn BNIsVariableUserDefined(func: *mut BNFunction, var: *const BNVariable) -> bool;
}
extern "C" {
    pub fn BNGetVariableType(func: *mut BNFunction, var: *const BNVariable)
        -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetVariableName(
        func: *mut BNFunction,
        var: *const BNVariable,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetVariableNameOrDefault(
        func: *mut BNFunction,
        var: *const BNVariable,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetLastSeenVariableNameOrDefault(
        func: *mut BNFunction,
        var: *const BNVariable,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNToVariableIdentifier(var: *const BNVariable) -> u64;
}
extern "C" {
    pub fn BNFromVariableIdentifier(id: u64) -> BNVariable;
}
extern "C" {
    pub fn BNGetFunctionVariableDeadStoreElimination(
        func: *mut BNFunction,
        var: *const BNVariable,
    ) -> BNDeadStoreElimination;
}
extern "C" {
    pub fn BNSetFunctionVariableDeadStoreElimination(
        func: *mut BNFunction,
        var: *const BNVariable,
        mode: BNDeadStoreElimination,
    );
}
extern "C" {
    pub fn BNGetMergedVariables(func: *mut BNFunction, count: *mut usize) -> *mut BNMergedVariable;
}
extern "C" {
    pub fn BNFreeMergedVariableList(vars: *mut BNMergedVariable, count: usize);
}
extern "C" {
    pub fn BNMergeVariables(
        func: *mut BNFunction,
        target: *const BNVariable,
        sources: *const BNVariable,
        sourceCount: usize,
    );
}
extern "C" {
    pub fn BNUnmergeVariables(
        func: *mut BNFunction,
        target: *const BNVariable,
        sources: *const BNVariable,
        sourceCount: usize,
    );
}
extern "C" {
    pub fn BNGetSplitVariables(func: *mut BNFunction, count: *mut usize) -> *mut BNVariable;
}
extern "C" {
    pub fn BNSplitVariable(func: *mut BNFunction, var: *const BNVariable);
}
extern "C" {
    pub fn BNUnsplitVariable(func: *mut BNFunction, var: *const BNVariable);
}
extern "C" {
    pub fn BNGetFunctionCallSites(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNReferenceSource;
}
extern "C" {
    pub fn BNGetCallees(
        view: *mut BNBinaryView,
        callSite: *mut BNReferenceSource,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNGetCallers(
        view: *mut BNBinaryView,
        callee: u64,
        count: *mut usize,
    ) -> *mut BNReferenceSource;
}
extern "C" {
    pub fn BNSetAutoIndirectBranches(
        func: *mut BNFunction,
        sourceArch: *mut BNArchitecture,
        source: u64,
        branches: *mut BNArchitectureAndAddress,
        count: usize,
    );
}
extern "C" {
    pub fn BNSetUserIndirectBranches(
        func: *mut BNFunction,
        sourceArch: *mut BNArchitecture,
        source: u64,
        branches: *mut BNArchitectureAndAddress,
        count: usize,
    );
}
extern "C" {
    pub fn BNGetIndirectBranches(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNIndirectBranchInfo;
}
extern "C" {
    pub fn BNGetIndirectBranchesAt(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNIndirectBranchInfo;
}
extern "C" {
    pub fn BNFreeIndirectBranchList(branches: *mut BNIndirectBranchInfo);
}
extern "C" {
    pub fn BNGetUnresolvedIndirectBranches(func: *mut BNFunction, count: *mut usize) -> *mut u64;
}
extern "C" {
    pub fn BNHasUnresolvedIndirectBranches(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNSetAutoCallTypeAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        type_: *mut BNTypeWithConfidence,
    );
}
extern "C" {
    pub fn BNSetUserCallTypeAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        type_: *mut BNTypeWithConfidence,
    );
}
extern "C" {
    pub fn BNSetAutoCallStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        adjust: i64,
        confidence: u8,
    );
}
extern "C" {
    pub fn BNSetUserCallStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        adjust: i64,
        confidence: u8,
    );
}
extern "C" {
    pub fn BNSetAutoCallRegisterStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        adjust: *mut BNRegisterStackAdjustment,
        count: usize,
    );
}
extern "C" {
    pub fn BNSetUserCallRegisterStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        adjust: *mut BNRegisterStackAdjustment,
        count: usize,
    );
}
extern "C" {
    pub fn BNSetAutoCallRegisterStackAdjustmentForRegisterStack(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        regStack: u32,
        adjust: i32,
        confidence: u8,
    );
}
extern "C" {
    pub fn BNSetUserCallRegisterStackAdjustmentForRegisterStack(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        regStack: u32,
        adjust: i32,
        confidence: u8,
    );
}
extern "C" {
    pub fn BNGetCallTypeAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetCallStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> BNOffsetWithConfidence;
}
extern "C" {
    pub fn BNGetCallRegisterStackAdjustment(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNRegisterStackAdjustment;
}
extern "C" {
    pub fn BNGetCallRegisterStackAdjustmentForRegisterStack(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        regStack: u32,
    ) -> BNRegisterStackAdjustment;
}
extern "C" {
    pub fn BNIsCallInstruction(func: *mut BNFunction, arch: *mut BNArchitecture, addr: u64)
        -> bool;
}
extern "C" {
    pub fn BNGetFunctionBlockAnnotations(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNInstructionTextLine;
}
extern "C" {
    pub fn BNGetIntegerConstantDisplayType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        instrAddr: u64,
        value: u64,
        operand: usize,
    ) -> BNIntegerDisplayType;
}
extern "C" {
    pub fn BNSetIntegerConstantDisplayType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        instrAddr: u64,
        value: u64,
        operand: usize,
        type_: BNIntegerDisplayType,
    );
}
extern "C" {
    pub fn BNGetIntegerConstantDisplayTypeEnumerationType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        instrAddr: u64,
        value: u64,
        operand: usize,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNSetIntegerConstantDisplayTypeEnumerationType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        instrAddr: u64,
        value: u64,
        operand: usize,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNIsFunctionTooLarge(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNIsFunctionAnalysisSkipped(func: *mut BNFunction) -> bool;
}
extern "C" {
    pub fn BNGetAnalysisSkipReason(func: *mut BNFunction) -> BNAnalysisSkipReason;
}
extern "C" {
    pub fn BNGetFunctionAnalysisSkipOverride(
        func: *mut BNFunction,
    ) -> BNFunctionAnalysisSkipOverride;
}
extern "C" {
    pub fn BNSetFunctionAnalysisSkipOverride(
        func: *mut BNFunction,
        skip: BNFunctionAnalysisSkipOverride,
    );
}
extern "C" {
    pub fn BNGetGotoLabelName(func: *mut BNFunction, labelId: u64) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetUserGotoLabelName(
        func: *mut BNFunction,
        labelId: u64,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetParametersForAnalysis(view: *mut BNBinaryView) -> BNAnalysisParameters;
}
extern "C" {
    pub fn BNSetParametersForAnalysis(view: *mut BNBinaryView, params: BNAnalysisParameters);
}
extern "C" {
    pub fn BNGetMaxFunctionSizeForAnalysis(view: *mut BNBinaryView) -> u64;
}
extern "C" {
    pub fn BNSetMaxFunctionSizeForAnalysis(view: *mut BNBinaryView, size: u64);
}
extern "C" {
    pub fn BNGetNewAutoFunctionAnalysisSuppressed(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNSetNewAutoFunctionAnalysisSuppressed(view: *mut BNBinaryView, suppress: bool);
}
extern "C" {
    pub fn BNAddAnalysisCompletionEvent(
        view: *mut BNBinaryView,
        ctxt: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    ) -> *mut BNAnalysisCompletionEvent;
}
extern "C" {
    pub fn BNNewAnalysisCompletionEventReference(
        event: *mut BNAnalysisCompletionEvent,
    ) -> *mut BNAnalysisCompletionEvent;
}
extern "C" {
    pub fn BNFreeAnalysisCompletionEvent(event: *mut BNAnalysisCompletionEvent);
}
extern "C" {
    pub fn BNCancelAnalysisCompletionEvent(event: *mut BNAnalysisCompletionEvent);
}
extern "C" {
    pub fn BNGetAnalysisInfo(view: *mut BNBinaryView) -> *mut BNAnalysisInfo;
}
extern "C" {
    pub fn BNFreeAnalysisInfo(info: *mut BNAnalysisInfo);
}
extern "C" {
    pub fn BNGetAnalysisProgress(view: *mut BNBinaryView) -> BNAnalysisProgress;
}
extern "C" {
    pub fn BNGetBackgroundAnalysisTask(view: *mut BNBinaryView) -> *mut BNBackgroundTask;
}
extern "C" {
    pub fn BNGetNextFunctionStartAfterAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetNextBasicBlockStartAfterAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetNextDataAfterAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetNextDataVariableStartAfterAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetPreviousFunctionStartBeforeAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetPreviousBasicBlockStartBeforeAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetPreviousBasicBlockEndBeforeAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetPreviousDataBeforeAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNGetPreviousDataVariableStartBeforeAddress(view: *mut BNBinaryView, addr: u64) -> u64;
}
extern "C" {
    pub fn BNCreateLinearViewDisassembly(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewLiftedIL(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewLowLevelIL(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewLowLevelILSSAForm(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewMediumLevelIL(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewMediumLevelILSSAForm(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewMappedMediumLevelIL(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewMappedMediumLevelILSSAForm(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewHighLevelIL(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewHighLevelILSSAForm(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewLanguageRepresentation(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewDataOnly(
        view: *mut BNBinaryView,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionDisassembly(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionLiftedIL(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionLowLevelIL(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionLowLevelILSSAForm(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionMediumLevelIL(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionMediumLevelILSSAForm(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionMappedMediumLevelIL(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionMappedMediumLevelILSSAForm(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionHighLevelIL(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionHighLevelILSSAForm(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewSingleFunctionLanguageRepresentation(
        func: *mut BNFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNNewLinearViewObjectReference(obj: *mut BNLinearViewObject) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNFreeLinearViewObject(obj: *mut BNLinearViewObject);
}
extern "C" {
    pub fn BNGetFirstLinearViewObjectChild(obj: *mut BNLinearViewObject)
        -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetLastLinearViewObjectChild(obj: *mut BNLinearViewObject) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetPreviousLinearViewObjectChild(
        parent: *mut BNLinearViewObject,
        child: *mut BNLinearViewObject,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetNextLinearViewObjectChild(
        parent: *mut BNLinearViewObject,
        child: *mut BNLinearViewObject,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetLinearViewObjectChildForAddress(
        parent: *mut BNLinearViewObject,
        addr: u64,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetLinearViewObjectChildForIdentifier(
        parent: *mut BNLinearViewObject,
        id: *mut BNLinearViewObjectIdentifier,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetLinearViewObjectLines(
        obj: *mut BNLinearViewObject,
        prev: *mut BNLinearViewObject,
        next: *mut BNLinearViewObject,
        count: *mut usize,
    ) -> *mut BNLinearDisassemblyLine;
}
extern "C" {
    pub fn BNFreeLinearDisassemblyLines(lines: *mut BNLinearDisassemblyLine, count: usize);
}
extern "C" {
    pub fn BNGetLinearViewObjectStart(obj: *mut BNLinearViewObject) -> u64;
}
extern "C" {
    pub fn BNGetLinearViewObjectEnd(obj: *mut BNLinearViewObject) -> u64;
}
extern "C" {
    pub fn BNGetLinearViewObjectIdentifier(
        obj: *mut BNLinearViewObject,
    ) -> BNLinearViewObjectIdentifier;
}
extern "C" {
    pub fn BNFreeLinearViewObjectIdentifier(id: *mut BNLinearViewObjectIdentifier);
}
extern "C" {
    pub fn BNCompareLinearViewObjectChildren(
        obj: *mut BNLinearViewObject,
        a: *mut BNLinearViewObject,
        b: *mut BNLinearViewObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetLinearViewObjectOrderingIndexTotal(obj: *mut BNLinearViewObject) -> u64;
}
extern "C" {
    pub fn BNGetLinearViewObjectOrderingIndexForChild(
        parent: *mut BNLinearViewObject,
        child: *mut BNLinearViewObject,
    ) -> u64;
}
extern "C" {
    pub fn BNGetLinearViewObjectChildForOrderingIndex(
        parent: *mut BNLinearViewObject,
        idx: u64,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNCreateLinearViewCursor(root: *mut BNLinearViewObject) -> *mut BNLinearViewCursor;
}
extern "C" {
    pub fn BNDuplicateLinearViewCursor(cursor: *mut BNLinearViewCursor) -> *mut BNLinearViewCursor;
}
extern "C" {
    pub fn BNNewLinearViewCursorReference(
        cursor: *mut BNLinearViewCursor,
    ) -> *mut BNLinearViewCursor;
}
extern "C" {
    pub fn BNFreeLinearViewCursor(cursor: *mut BNLinearViewCursor);
}
extern "C" {
    pub fn BNIsLinearViewCursorBeforeBegin(cursor: *mut BNLinearViewCursor) -> bool;
}
extern "C" {
    pub fn BNIsLinearViewCursorAfterEnd(cursor: *mut BNLinearViewCursor) -> bool;
}
extern "C" {
    pub fn BNGetLinearViewCursorCurrentObject(
        cursor: *mut BNLinearViewCursor,
    ) -> *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNGetLinearViewCursorPath(
        cursor: *mut BNLinearViewCursor,
        count: *mut usize,
    ) -> *mut BNLinearViewObjectIdentifier;
}
extern "C" {
    pub fn BNFreeLinearViewCursorPath(objs: *mut BNLinearViewObjectIdentifier, count: usize);
}
extern "C" {
    pub fn BNGetLinearViewCursorPathObjects(
        cursor: *mut BNLinearViewCursor,
        count: *mut usize,
    ) -> *mut *mut BNLinearViewObject;
}
extern "C" {
    pub fn BNFreeLinearViewCursorPathObjects(objs: *mut *mut BNLinearViewObject, count: usize);
}
extern "C" {
    pub fn BNGetLinearViewCursorOrderingIndex(cursor: *mut BNLinearViewCursor) -> BNAddressRange;
}
extern "C" {
    pub fn BNGetLinearViewCursorOrderingIndexTotal(cursor: *mut BNLinearViewCursor) -> u64;
}
extern "C" {
    pub fn BNSeekLinearViewCursorToBegin(cursor: *mut BNLinearViewCursor);
}
extern "C" {
    pub fn BNSeekLinearViewCursorToEnd(cursor: *mut BNLinearViewCursor);
}
extern "C" {
    pub fn BNSeekLinearViewCursorToAddress(cursor: *mut BNLinearViewCursor, addr: u64);
}
extern "C" {
    pub fn BNSeekLinearViewCursorToPath(
        cursor: *mut BNLinearViewCursor,
        ids: *mut BNLinearViewObjectIdentifier,
        count: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNSeekLinearViewCursorToPathAndAddress(
        cursor: *mut BNLinearViewCursor,
        ids: *mut BNLinearViewObjectIdentifier,
        count: usize,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNSeekLinearViewCursorToCursorPath(
        cursor: *mut BNLinearViewCursor,
        path: *mut BNLinearViewCursor,
    ) -> bool;
}
extern "C" {
    pub fn BNSeekLinearViewCursorToCursorPathAndAddress(
        cursor: *mut BNLinearViewCursor,
        path: *mut BNLinearViewCursor,
        addr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNSeekLinearViewCursorToOrderingIndex(cursor: *mut BNLinearViewCursor, idx: u64);
}
extern "C" {
    pub fn BNLinearViewCursorNext(cursor: *mut BNLinearViewCursor) -> bool;
}
extern "C" {
    pub fn BNLinearViewCursorPrevious(cursor: *mut BNLinearViewCursor) -> bool;
}
extern "C" {
    pub fn BNGetLinearViewCursorLines(
        cursor: *mut BNLinearViewCursor,
        count: *mut usize,
    ) -> *mut BNLinearDisassemblyLine;
}
extern "C" {
    pub fn BNCompareLinearViewCursors(
        a: *mut BNLinearViewCursor,
        b: *mut BNLinearViewCursor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNDefineDataVariable(
        view: *mut BNBinaryView,
        addr: u64,
        type_: *mut BNTypeWithConfidence,
    );
}
extern "C" {
    pub fn BNDefineUserDataVariable(
        view: *mut BNBinaryView,
        addr: u64,
        type_: *mut BNTypeWithConfidence,
    );
}
extern "C" {
    pub fn BNUndefineDataVariable(view: *mut BNBinaryView, addr: u64);
}
extern "C" {
    pub fn BNUndefineUserDataVariable(view: *mut BNBinaryView, addr: u64);
}
extern "C" {
    pub fn BNGetDataVariables(view: *mut BNBinaryView, count: *mut usize) -> *mut BNDataVariable;
}
extern "C" {
    pub fn BNFreeDataVariable(var: *mut BNDataVariable);
}
extern "C" {
    pub fn BNFreeDataVariables(vars: *mut BNDataVariable, count: usize);
}
extern "C" {
    pub fn BNFreeDataVariableAndName(var: *mut BNDataVariableAndName);
}
extern "C" {
    pub fn BNFreeDataVariablesAndName(vars: *mut BNDataVariableAndName, count: usize);
}
extern "C" {
    pub fn BNFreeDataVariableAndNameAndDebugParserList(
        vars: *mut BNDataVariableAndNameAndDebugParser,
        count: usize,
    );
}
extern "C" {
    pub fn BNGetDataVariableAtAddress(
        view: *mut BNBinaryView,
        addr: u64,
        var: *mut BNDataVariable,
    ) -> bool;
}
extern "C" {
    pub fn BNParseTypeString(
        view: *mut BNBinaryView,
        text: *const ::std::os::raw::c_char,
        result: *mut BNQualifiedNameAndType,
        errors: *mut *mut ::std::os::raw::c_char,
        typesAllowRedefinition: *mut BNQualifiedNameList,
    ) -> bool;
}
extern "C" {
    pub fn BNParseTypesString(
        view: *mut BNBinaryView,
        text: *const ::std::os::raw::c_char,
        options: *const *const ::std::os::raw::c_char,
        optionCount: usize,
        includeDirs: *const *const ::std::os::raw::c_char,
        includeDirCount: usize,
        result: *mut BNTypeParserResult,
        errors: *mut *mut ::std::os::raw::c_char,
        typesAllowRedefinition: *mut BNQualifiedNameList,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeQualifiedNameAndType(obj: *mut BNQualifiedNameAndType);
}
extern "C" {
    pub fn BNFreeQualifiedNameAndTypeArray(obj: *mut BNQualifiedNameAndType, count: usize);
}
extern "C" {
    pub fn BNFreeQualifiedNameTypeAndId(obj: *mut BNQualifiedNameTypeAndId);
}
extern "C" {
    pub fn BNEscapeTypeName(
        name: *const ::std::os::raw::c_char,
        escaping: BNTokenEscapingType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNUnescapeTypeName(
        name: *const ::std::os::raw::c_char,
        escaping: BNTokenEscapingType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAnalysisTypeList(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNGetAnalysisDependencySortedTypeList(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNFreeTypeList(types: *mut BNQualifiedNameAndType, count: usize);
}
extern "C" {
    pub fn BNFreeTypeIdList(types: *mut BNQualifiedNameTypeAndId, count: usize);
}
extern "C" {
    pub fn BNGetAnalysisTypeNames(
        view: *mut BNBinaryView,
        count: *mut usize,
        matching: *const ::std::os::raw::c_char,
    ) -> *mut BNQualifiedName;
}
extern "C" {
    pub fn BNFreeTypeNameList(names: *mut BNQualifiedName, count: usize);
}
extern "C" {
    pub fn BNGetAnalysisTypeByName(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetAnalysisTypeByRef(
        view: *mut BNBinaryView,
        ref_: *mut BNNamedTypeReference,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetAnalysisTypeById(
        view: *mut BNBinaryView,
        id: *const ::std::os::raw::c_char,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetAnalysisTypeId(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAnalysisTypeNameById(
        view: *mut BNBinaryView,
        id: *const ::std::os::raw::c_char,
    ) -> BNQualifiedName;
}
extern "C" {
    pub fn BNIsAnalysisTypeAutoDefined(view: *mut BNBinaryView, name: *mut BNQualifiedName)
        -> bool;
}
extern "C" {
    pub fn BNDefineAnalysisType(
        view: *mut BNBinaryView,
        id: *const ::std::os::raw::c_char,
        defaultName: *mut BNQualifiedName,
        type_: *mut BNType,
    ) -> BNQualifiedName;
}
extern "C" {
    pub fn BNDefineUserAnalysisType(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNDefineAnalysisTypes(
        view: *mut BNBinaryView,
        types: *mut BNQualifiedNameTypeAndId,
        count: usize,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
                arg3: usize,
            ) -> bool,
        >,
        progressContext: *mut ::std::os::raw::c_void,
        resultIds: *mut *mut *mut ::std::os::raw::c_char,
        resultNames: *mut *mut BNQualifiedName,
    ) -> usize;
}
extern "C" {
    pub fn BNDefineUserAnalysisTypes(
        view: *mut BNBinaryView,
        types: *mut BNQualifiedNameAndType,
        count: usize,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
                arg3: usize,
            ) -> bool,
        >,
        progressContext: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNUndefineAnalysisType(view: *mut BNBinaryView, id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNUndefineUserAnalysisType(view: *mut BNBinaryView, name: *mut BNQualifiedName);
}
extern "C" {
    pub fn BNRenameAnalysisType(
        view: *mut BNBinaryView,
        oldName: *mut BNQualifiedName,
        newName: *mut BNQualifiedName,
    );
}
extern "C" {
    pub fn BNGenerateAutoTypeId(
        source: *const ::std::os::raw::c_char,
        name: *mut BNQualifiedName,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGenerateAutoPlatformTypeId(
        platform: *mut BNPlatform,
        name: *mut BNQualifiedName,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGenerateAutoDemangledTypeId(name: *mut BNQualifiedName)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAutoPlatformTypeIdSource(platform: *mut BNPlatform) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAutoDemangledTypeIdSource() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGenerateAutoDebugTypeId(name: *mut BNQualifiedName) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetAutoDebugTypeIdSource() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRegisterPlatformTypes(view: *mut BNBinaryView, platform: *mut BNPlatform);
}
extern "C" {
    pub fn BNLookupImportedTypePlatform(
        view: *mut BNBinaryView,
        typeName: *const BNQualifiedName,
        platform: *mut *mut BNPlatform,
        resultName: *mut BNQualifiedName,
    ) -> bool;
}
extern "C" {
    pub fn BNReanalyzeAllFunctions(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNReanalyzeFunction(func: *mut BNFunction, type_: BNFunctionUpdateType);
}
extern "C" {
    pub fn BNMarkUpdatesRequired(func: *mut BNFunction, type_: BNFunctionUpdateType);
}
extern "C" {
    pub fn BNMarkCallerUpdatesRequired(func: *mut BNFunction, type_: BNFunctionUpdateType);
}
extern "C" {
    pub fn BNGetWorkflowForBinaryView(view: *mut BNBinaryView) -> *mut BNWorkflow;
}
extern "C" {
    pub fn BNGetWorkflowForFunction(func: *mut BNFunction) -> *mut BNWorkflow;
}
extern "C" {
    pub fn BNPostWorkflowRequestForFunction(
        func: *mut BNFunction,
        request: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetProvenanceString(func: *mut BNFunction) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetInstructionHighlight(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> BNHighlightColor;
}
extern "C" {
    pub fn BNSetAutoInstructionHighlight(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        color: BNHighlightColor,
    );
}
extern "C" {
    pub fn BNSetUserInstructionHighlight(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        color: BNHighlightColor,
    );
}
extern "C" {
    pub fn BNGetBasicBlockHighlight(block: *mut BNBasicBlock) -> BNHighlightColor;
}
extern "C" {
    pub fn BNSetAutoBasicBlockHighlight(block: *mut BNBasicBlock, color: BNHighlightColor);
}
extern "C" {
    pub fn BNSetUserBasicBlockHighlight(block: *mut BNBasicBlock, color: BNHighlightColor);
}
extern "C" {
    pub fn BNCreateTagType(view: *mut BNBinaryView) -> *mut BNTagType;
}
extern "C" {
    pub fn BNNewTagTypeReference(tagType: *mut BNTagType) -> *mut BNTagType;
}
extern "C" {
    pub fn BNFreeTagType(tagType: *mut BNTagType);
}
extern "C" {
    pub fn BNFreeTagTypeList(tagTypes: *mut *mut BNTagType, count: usize);
}
extern "C" {
    pub fn BNTagTypeGetView(tagType: *mut BNTagType) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNTagTypeGetId(tagType: *mut BNTagType) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTagTypeGetName(tagType: *mut BNTagType) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTagTypeSetName(tagType: *mut BNTagType, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNTagTypeGetIcon(tagType: *mut BNTagType) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTagTypeSetIcon(tagType: *mut BNTagType, icon: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNTagTypeGetVisible(tagType: *mut BNTagType) -> bool;
}
extern "C" {
    pub fn BNTagTypeSetVisible(tagType: *mut BNTagType, visible: bool);
}
extern "C" {
    pub fn BNTagTypeGetType(tagType: *mut BNTagType) -> BNTagTypeType;
}
extern "C" {
    pub fn BNTagTypeSetType(tagType: *mut BNTagType, type_: BNTagTypeType);
}
extern "C" {
    pub fn BNCreateTag(type_: *mut BNTagType, data: *const ::std::os::raw::c_char) -> *mut BNTag;
}
extern "C" {
    pub fn BNNewTagReference(tag: *mut BNTag) -> *mut BNTag;
}
extern "C" {
    pub fn BNFreeTag(tag: *mut BNTag);
}
extern "C" {
    pub fn BNFreeTagList(tags: *mut *mut BNTag, count: usize);
}
extern "C" {
    pub fn BNTagGetId(tag: *mut BNTag) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTagGetType(tag: *mut BNTag) -> *mut BNTagType;
}
extern "C" {
    pub fn BNTagGetData(tag: *mut BNTag) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTagSetData(tag: *mut BNTag, data: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddTagType(view: *mut BNBinaryView, tagType: *mut BNTagType);
}
extern "C" {
    pub fn BNRemoveTagType(view: *mut BNBinaryView, tagType: *mut BNTagType);
}
extern "C" {
    pub fn BNGetTagType(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNTagType;
}
extern "C" {
    pub fn BNGetTagTypeWithType(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        type_: BNTagTypeType,
    ) -> *mut BNTagType;
}
extern "C" {
    pub fn BNGetTagTypeById(
        view: *mut BNBinaryView,
        id: *const ::std::os::raw::c_char,
    ) -> *mut BNTagType;
}
extern "C" {
    pub fn BNGetTagTypeByIdWithType(
        view: *mut BNBinaryView,
        id: *const ::std::os::raw::c_char,
        type_: BNTagTypeType,
    ) -> *mut BNTagType;
}
extern "C" {
    pub fn BNGetTagTypes(view: *mut BNBinaryView, count: *mut usize) -> *mut *mut BNTagType;
}
extern "C" {
    pub fn BNAddTag(view: *mut BNBinaryView, tag: *mut BNTag, user: bool);
}
extern "C" {
    pub fn BNGetTag(view: *mut BNBinaryView, tagId: *const ::std::os::raw::c_char) -> *mut BNTag;
}
extern "C" {
    pub fn BNRemoveTag(view: *mut BNBinaryView, tag: *mut BNTag, user: bool);
}
extern "C" {
    pub fn BNGetAllTagReferences(view: *mut BNBinaryView, count: *mut usize)
        -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAllAddressTagReferences(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAllFunctionTagReferences(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAllTagReferencesOfType(
        view: *mut BNBinaryView,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetTagReferencesOfType(
        view: *mut BNBinaryView,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetDataTagReferences(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAutoDataTagReferences(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetUserDataTagReferences(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNRemoveTagReference(view: *mut BNBinaryView, ref_: BNTagReference);
}
extern "C" {
    pub fn BNFreeTagReferences(refs: *mut BNTagReference, count: usize);
}
extern "C" {
    pub fn BNGetDataTags(view: *mut BNBinaryView, addr: u64, count: *mut usize) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetAutoDataTags(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetUserDataTags(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetDataTagsOfType(
        view: *mut BNBinaryView,
        addr: u64,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetAutoDataTagsOfType(
        view: *mut BNBinaryView,
        addr: u64,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetUserDataTagsOfType(
        view: *mut BNBinaryView,
        addr: u64,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetDataTagsInRange(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAutoDataTagsInRange(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetUserDataTagsInRange(
        view: *mut BNBinaryView,
        start: u64,
        end: u64,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNAddAutoDataTag(view: *mut BNBinaryView, addr: u64, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveAutoDataTag(view: *mut BNBinaryView, addr: u64, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveAutoDataTagsOfType(view: *mut BNBinaryView, addr: u64, tagType: *mut BNTagType);
}
extern "C" {
    pub fn BNAddUserDataTag(view: *mut BNBinaryView, addr: u64, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveUserDataTag(view: *mut BNBinaryView, addr: u64, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveUserDataTagsOfType(view: *mut BNBinaryView, addr: u64, tagType: *mut BNTagType);
}
extern "C" {
    pub fn BNGetTagReferencesOfTypeCount(view: *mut BNBinaryView, tagType: *mut BNTagType)
        -> usize;
}
extern "C" {
    pub fn BNGetAllTagReferencesOfTypeCount(
        view: *mut BNBinaryView,
        tagType: *mut BNTagType,
    ) -> usize;
}
extern "C" {
    pub fn BNGetAllTagReferenceTypeCounts(
        view: *mut BNBinaryView,
        tagTypes: *mut *mut *mut BNTagType,
        counts: *mut *mut usize,
        count: *mut usize,
    );
}
extern "C" {
    pub fn BNFreeTagReferenceTypeCounts(tagTypes: *mut *mut BNTagType, counts: *mut usize);
}
extern "C" {
    pub fn BNGetFunctionAllTagReferences(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetFunctionTagReferencesOfType(
        func: *mut BNFunction,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAddressTagReferences(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAutoAddressTagReferences(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetUserAddressTagReferences(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAddressTags(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetAutoAddressTags(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetUserAddressTags(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetAddressTagsOfType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetAutoAddressTagsOfType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetUserAddressTagsOfType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetAddressTagsInRange(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        start: u64,
        end: u64,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAutoAddressTagsInRange(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        start: u64,
        end: u64,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetUserAddressTagsInRange(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        start: u64,
        end: u64,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNAddAutoAddressTag(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tag: *mut BNTag,
    );
}
extern "C" {
    pub fn BNRemoveAutoAddressTag(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tag: *mut BNTag,
    );
}
extern "C" {
    pub fn BNRemoveAutoAddressTagsOfType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tagType: *mut BNTagType,
    );
}
extern "C" {
    pub fn BNAddUserAddressTag(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tag: *mut BNTag,
    );
}
extern "C" {
    pub fn BNRemoveUserAddressTag(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tag: *mut BNTag,
    );
}
extern "C" {
    pub fn BNRemoveUserAddressTagsOfType(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        addr: u64,
        tagType: *mut BNTagType,
    );
}
extern "C" {
    pub fn BNGetFunctionTagReferences(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetAutoFunctionTagReferences(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetUserFunctionTagReferences(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNTagReference;
}
extern "C" {
    pub fn BNGetFunctionTags(func: *mut BNFunction, count: *mut usize) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetAutoFunctionTags(func: *mut BNFunction, count: *mut usize) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetUserFunctionTags(func: *mut BNFunction, count: *mut usize) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetFunctionTagsOfType(
        func: *mut BNFunction,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetAutoFunctionTagsOfType(
        func: *mut BNFunction,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNGetUserFunctionTagsOfType(
        func: *mut BNFunction,
        tagType: *mut BNTagType,
        count: *mut usize,
    ) -> *mut *mut BNTag;
}
extern "C" {
    pub fn BNAddAutoFunctionTag(func: *mut BNFunction, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveAutoFunctionTag(func: *mut BNFunction, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveAutoFunctionTagsOfType(func: *mut BNFunction, tagType: *mut BNTagType);
}
extern "C" {
    pub fn BNAddUserFunctionTag(func: *mut BNFunction, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveUserFunctionTag(func: *mut BNFunction, tag: *mut BNTag);
}
extern "C" {
    pub fn BNRemoveUserFunctionTagsOfType(func: *mut BNFunction, tagType: *mut BNTagType);
}
extern "C" {
    pub fn BNGetFunctionAnalysisPerformanceInfo(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNPerformanceInfo;
}
extern "C" {
    pub fn BNFreeAnalysisPerformanceInfo(info: *mut BNPerformanceInfo, count: usize);
}
extern "C" {
    pub fn BNGetUnresolvedStackAdjustmentGraph(func: *mut BNFunction) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNSetUserVariableValue(
        func: *mut BNFunction,
        var: *const BNVariable,
        defSite: *const BNArchitectureAndAddress,
        value: *const BNPossibleValueSet,
    );
}
extern "C" {
    pub fn BNClearUserVariableValue(
        func: *mut BNFunction,
        var: *const BNVariable,
        defSite: *const BNArchitectureAndAddress,
    );
}
extern "C" {
    pub fn BNGetAllUserVariableValues(
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNUserVariableValue;
}
extern "C" {
    pub fn BNFreeUserVariableValues(result: *mut BNUserVariableValue);
}
extern "C" {
    pub fn BNParsePossibleValueSet(
        view: *mut BNBinaryView,
        valueText: *const ::std::os::raw::c_char,
        state: BNRegisterValueType,
        result: *mut BNPossibleValueSet,
        here: u64,
        errors: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNRequestFunctionDebugReport(func: *mut BNFunction, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetMediumLevelILVariableReferences(
        func: *mut BNFunction,
        var: *mut BNVariable,
        count: *mut usize,
    ) -> *mut BNILReferenceSource;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableReferencesFrom(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        address: u64,
        count: *mut usize,
    ) -> *mut BNVariableReferenceSource;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableReferencesInRange(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        address: u64,
        len: u64,
        count: *mut usize,
    ) -> *mut BNVariableReferenceSource;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableReferencesIfAvailable(
        func: *mut BNFunction,
        var: *mut BNVariable,
        count: *mut usize,
    ) -> *mut BNILReferenceSource;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableReferencesFromIfAvailable(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        address: u64,
        count: *mut usize,
    ) -> *mut BNVariableReferenceSource;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableReferencesInRangeIfAvailable(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        address: u64,
        len: u64,
        count: *mut usize,
    ) -> *mut BNVariableReferenceSource;
}
extern "C" {
    pub fn BNGetHighLevelILVariableReferences(
        func: *mut BNFunction,
        var: *mut BNVariable,
        count: *mut usize,
    ) -> *mut BNILReferenceSource;
}
extern "C" {
    pub fn BNGetHighLevelILVariableReferencesFrom(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        address: u64,
        count: *mut usize,
    ) -> *mut BNVariableReferenceSource;
}
extern "C" {
    pub fn BNGetHighLevelILVariableReferencesInRange(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        address: u64,
        len: u64,
        count: *mut usize,
    ) -> *mut BNVariableReferenceSource;
}
extern "C" {
    pub fn BNGetHighLevelILVariableReferencesIfAvailable(
        func: *mut BNFunction,
        var: *mut BNVariable,
        count: *mut usize,
    ) -> *mut BNILReferenceSource;
}
extern "C" {
    pub fn BNGetHighLevelILVariableReferencesFromIfAvailable(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        address: u64,
        count: *mut usize,
    ) -> *mut BNVariableReferenceSource;
}
extern "C" {
    pub fn BNGetHighLevelILVariableReferencesInRangeIfAvailable(
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        address: u64,
        len: u64,
        count: *mut usize,
    ) -> *mut BNVariableReferenceSource;
}
extern "C" {
    pub fn BNFreeVariableList(vars: *mut BNVariable);
}
extern "C" {
    pub fn BNFreeVariableReferenceSourceList(vars: *mut BNVariableReferenceSource, count: usize);
}
extern "C" {
    pub fn BNCreateAnalysisContext() -> *mut BNAnalysisContext;
}
extern "C" {
    pub fn BNNewAnalysisContextReference(
        analysisContext: *mut BNAnalysisContext,
    ) -> *mut BNAnalysisContext;
}
extern "C" {
    pub fn BNFreeAnalysisContext(analysisContext: *mut BNAnalysisContext);
}
extern "C" {
    pub fn BNAnalysisContextGetFunction(analysisContext: *mut BNAnalysisContext)
        -> *mut BNFunction;
}
extern "C" {
    pub fn BNAnalysisContextGetLowLevelILFunction(
        analysisContext: *mut BNAnalysisContext,
    ) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNAnalysisContextGetMediumLevelILFunction(
        analysisContext: *mut BNAnalysisContext,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNAnalysisContextGetHighLevelILFunction(
        analysisContext: *mut BNAnalysisContext,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNSetBasicBlockList(
        analysisContext: *mut BNAnalysisContext,
        basicBlocks: *mut *mut BNBasicBlock,
        count: usize,
    );
}
extern "C" {
    pub fn BNSetLiftedILFunction(
        analysisContext: *mut BNAnalysisContext,
        liftedIL: *mut BNLowLevelILFunction,
    );
}
extern "C" {
    pub fn BNSetLowLevelILFunction(
        analysisContext: *mut BNAnalysisContext,
        lowLevelIL: *mut BNLowLevelILFunction,
    );
}
extern "C" {
    pub fn BNSetMediumLevelILFunction(
        analysisContext: *mut BNAnalysisContext,
        mediumLevelIL: *mut BNMediumLevelILFunction,
    );
}
extern "C" {
    pub fn BNSetHighLevelILFunction(
        analysisContext: *mut BNAnalysisContext,
        highLevelIL: *mut BNHighLevelILFunction,
    );
}
extern "C" {
    pub fn BNAnalysisContextInform(
        analysisContext: *mut BNAnalysisContext,
        request: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNCreateActivity(
        configuration: *const ::std::os::raw::c_char,
        ctxt: *mut ::std::os::raw::c_void,
        action: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut BNAnalysisContext),
        >,
    ) -> *mut BNActivity;
}
extern "C" {
    pub fn BNNewActivityReference(activity: *mut BNActivity) -> *mut BNActivity;
}
extern "C" {
    pub fn BNFreeActivity(activity: *mut BNActivity);
}
extern "C" {
    pub fn BNActivityGetName(activity: *mut BNActivity) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCreateWorkflow(name: *const ::std::os::raw::c_char) -> *mut BNWorkflow;
}
extern "C" {
    pub fn BNNewWorkflowReference(workflow: *mut BNWorkflow) -> *mut BNWorkflow;
}
extern "C" {
    pub fn BNFreeWorkflow(workflow: *mut BNWorkflow);
}
extern "C" {
    pub fn BNGetWorkflowList(count: *mut usize) -> *mut *mut BNWorkflow;
}
extern "C" {
    pub fn BNFreeWorkflowList(workflows: *mut *mut BNWorkflow, count: usize);
}
extern "C" {
    pub fn BNWorkflowInstance(name: *const ::std::os::raw::c_char) -> *mut BNWorkflow;
}
extern "C" {
    pub fn BNRegisterWorkflow(
        workflow: *mut BNWorkflow,
        configuration: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNWorkflowClone(
        workflow: *mut BNWorkflow,
        name: *const ::std::os::raw::c_char,
        activity: *const ::std::os::raw::c_char,
    ) -> *mut BNWorkflow;
}
extern "C" {
    pub fn BNWorkflowRegisterActivity(
        workflow: *mut BNWorkflow,
        activity: *mut BNActivity,
        subactivities: *mut *const ::std::os::raw::c_char,
        size: usize,
    ) -> *mut BNActivity;
}
extern "C" {
    pub fn BNWorkflowContains(
        workflow: *mut BNWorkflow,
        activity: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNWorkflowGetConfiguration(
        workflow: *mut BNWorkflow,
        activity: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetWorkflowName(workflow: *mut BNWorkflow) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNWorkflowIsRegistered(workflow: *mut BNWorkflow) -> bool;
}
extern "C" {
    pub fn BNWorkflowSize(workflow: *mut BNWorkflow) -> usize;
}
extern "C" {
    pub fn BNWorkflowGetActivity(
        workflow: *mut BNWorkflow,
        activity: *const ::std::os::raw::c_char,
    ) -> *mut BNActivity;
}
extern "C" {
    pub fn BNWorkflowGetActivityRoots(
        workflow: *mut BNWorkflow,
        activity: *const ::std::os::raw::c_char,
        inoutSize: *mut usize,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNWorkflowGetSubactivities(
        workflow: *mut BNWorkflow,
        activity: *const ::std::os::raw::c_char,
        immediate: bool,
        inoutSize: *mut usize,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNWorkflowAssignSubactivities(
        workflow: *mut BNWorkflow,
        activity: *const ::std::os::raw::c_char,
        activities: *mut *const ::std::os::raw::c_char,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNWorkflowClear(workflow: *mut BNWorkflow) -> bool;
}
extern "C" {
    pub fn BNWorkflowInsert(
        workflow: *mut BNWorkflow,
        activity: *const ::std::os::raw::c_char,
        activities: *mut *const ::std::os::raw::c_char,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNWorkflowRemove(
        workflow: *mut BNWorkflow,
        activity: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNWorkflowReplace(
        workflow: *mut BNWorkflow,
        activity: *const ::std::os::raw::c_char,
        newActivity: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNWorkflowGetGraph(
        workflow: *mut BNWorkflow,
        activity: *const ::std::os::raw::c_char,
        sequential: bool,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNWorkflowShowReport(workflow: *mut BNWorkflow, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNCreateDisassemblySettings() -> *mut BNDisassemblySettings;
}
extern "C" {
    pub fn BNNewDisassemblySettingsReference(
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblySettings;
}
extern "C" {
    pub fn BNDuplicateDisassemblySettings(
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblySettings;
}
extern "C" {
    pub fn BNFreeDisassemblySettings(settings: *mut BNDisassemblySettings);
}
extern "C" {
    pub fn BNIsDisassemblySettingsOptionSet(
        settings: *mut BNDisassemblySettings,
        option: BNDisassemblyOption,
    ) -> bool;
}
extern "C" {
    pub fn BNSetDisassemblySettingsOption(
        settings: *mut BNDisassemblySettings,
        option: BNDisassemblyOption,
        state: bool,
    );
}
extern "C" {
    pub fn BNGetDisassemblyWidth(settings: *mut BNDisassemblySettings) -> usize;
}
extern "C" {
    pub fn BNSetDisassemblyWidth(settings: *mut BNDisassemblySettings, width: usize);
}
extern "C" {
    pub fn BNGetDisassemblyMaximumSymbolWidth(settings: *mut BNDisassemblySettings) -> usize;
}
extern "C" {
    pub fn BNSetDisassemblyMaximumSymbolWidth(settings: *mut BNDisassemblySettings, width: usize);
}
extern "C" {
    pub fn BNGetDisassemblyGutterWidth(settings: *mut BNDisassemblySettings) -> usize;
}
extern "C" {
    pub fn BNSetDisassemblyGutterWidth(settings: *mut BNDisassemblySettings, width: usize);
}
extern "C" {
    pub fn BNCreateFlowGraph() -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNCreateFunctionGraph(
        func: *mut BNFunction,
        type_: BNFunctionGraphType,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNCreateLowLevelILFunctionGraph(
        func: *mut BNLowLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNCreateMediumLevelILFunctionGraph(
        func: *mut BNMediumLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNCreateHighLevelILFunctionGraph(
        func: *mut BNHighLevelILFunction,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNCreateCustomFlowGraph(callbacks: *mut BNCustomFlowGraph) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNNewFlowGraphReference(graph: *mut BNFlowGraph) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNFreeFlowGraph(graph: *mut BNFlowGraph);
}
extern "C" {
    pub fn BNGetFunctionForFlowGraph(graph: *mut BNFlowGraph) -> *mut BNFunction;
}
extern "C" {
    pub fn BNSetFunctionForFlowGraph(graph: *mut BNFlowGraph, func: *mut BNFunction);
}
extern "C" {
    pub fn BNGetViewForFlowGraph(graph: *mut BNFlowGraph) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNSetViewForFlowGraph(graph: *mut BNFlowGraph, view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNGetHorizontalFlowGraphNodeMargin(graph: *mut BNFlowGraph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetVerticalFlowGraphNodeMargin(graph: *mut BNFlowGraph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNSetFlowGraphNodeMargins(
        graph: *mut BNFlowGraph,
        horiz: ::std::os::raw::c_int,
        vert: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BNStartFlowGraphLayout(
        graph: *mut BNFlowGraph,
        ctxt: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    ) -> *mut BNFlowGraphLayoutRequest;
}
extern "C" {
    pub fn BNIsFlowGraphLayoutComplete(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNNewFlowGraphLayoutRequestReference(
        layout: *mut BNFlowGraphLayoutRequest,
    ) -> *mut BNFlowGraphLayoutRequest;
}
extern "C" {
    pub fn BNFreeFlowGraphLayoutRequest(layout: *mut BNFlowGraphLayoutRequest);
}
extern "C" {
    pub fn BNIsFlowGraphLayoutRequestComplete(layout: *mut BNFlowGraphLayoutRequest) -> bool;
}
extern "C" {
    pub fn BNGetGraphForFlowGraphLayoutRequest(
        layout: *mut BNFlowGraphLayoutRequest,
    ) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNAbortFlowGraphLayoutRequest(graph: *mut BNFlowGraphLayoutRequest);
}
extern "C" {
    pub fn BNIsILFlowGraph(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNIsLowLevelILFlowGraph(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNIsMediumLevelILFlowGraph(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNIsHighLevelILFlowGraph(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNGetFlowGraphLowLevelILFunction(graph: *mut BNFlowGraph) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetFlowGraphMediumLevelILFunction(
        graph: *mut BNFlowGraph,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetFlowGraphHighLevelILFunction(graph: *mut BNFlowGraph)
        -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNSetFlowGraphLowLevelILFunction(
        graph: *mut BNFlowGraph,
        func: *mut BNLowLevelILFunction,
    );
}
extern "C" {
    pub fn BNSetFlowGraphMediumLevelILFunction(
        graph: *mut BNFlowGraph,
        func: *mut BNMediumLevelILFunction,
    );
}
extern "C" {
    pub fn BNSetFlowGraphHighLevelILFunction(
        graph: *mut BNFlowGraph,
        func: *mut BNHighLevelILFunction,
    );
}
extern "C" {
    pub fn BNGetFlowGraphNodes(
        graph: *mut BNFlowGraph,
        count: *mut usize,
    ) -> *mut *mut BNFlowGraphNode;
}
extern "C" {
    pub fn BNGetFlowGraphNode(graph: *mut BNFlowGraph, i: usize) -> *mut BNFlowGraphNode;
}
extern "C" {
    pub fn BNGetFlowGraphNodesInRegion(
        graph: *mut BNFlowGraph,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        count: *mut usize,
    ) -> *mut *mut BNFlowGraphNode;
}
extern "C" {
    pub fn BNFreeFlowGraphNodeList(nodes: *mut *mut BNFlowGraphNode, count: usize);
}
extern "C" {
    pub fn BNFlowGraphHasNodes(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNAddFlowGraphNode(graph: *mut BNFlowGraph, node: *mut BNFlowGraphNode) -> usize;
}
extern "C" {
    pub fn BNGetFlowGraphWidth(graph: *mut BNFlowGraph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetFlowGraphHeight(graph: *mut BNFlowGraph) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNCreateFlowGraphNode(graph: *mut BNFlowGraph) -> *mut BNFlowGraphNode;
}
extern "C" {
    pub fn BNNewFlowGraphNodeReference(node: *mut BNFlowGraphNode) -> *mut BNFlowGraphNode;
}
extern "C" {
    pub fn BNFreeFlowGraphNode(node: *mut BNFlowGraphNode);
}
extern "C" {
    pub fn BNGetFlowGraphNodeOwner(node: *mut BNFlowGraphNode) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNGetFlowGraphBasicBlock(node: *mut BNFlowGraphNode) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNSetFlowGraphBasicBlock(node: *mut BNFlowGraphNode, block: *mut BNBasicBlock);
}
extern "C" {
    pub fn BNGetFlowGraphNodeX(node: *mut BNFlowGraphNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetFlowGraphNodeY(node: *mut BNFlowGraphNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetFlowGraphNodeWidth(node: *mut BNFlowGraphNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetFlowGraphNodeHeight(node: *mut BNFlowGraphNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNGetFlowGraphNodeLines(
        node: *mut BNFlowGraphNode,
        count: *mut usize,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNSetFlowGraphNodeLines(
        node: *mut BNFlowGraphNode,
        lines: *mut BNDisassemblyTextLine,
        count: usize,
    );
}
extern "C" {
    pub fn BNGetFlowGraphNodeOutgoingEdges(
        node: *mut BNFlowGraphNode,
        count: *mut usize,
    ) -> *mut BNFlowGraphEdge;
}
extern "C" {
    pub fn BNGetFlowGraphNodeIncomingEdges(
        node: *mut BNFlowGraphNode,
        count: *mut usize,
    ) -> *mut BNFlowGraphEdge;
}
extern "C" {
    pub fn BNFreeFlowGraphNodeEdgeList(edges: *mut BNFlowGraphEdge, count: usize);
}
extern "C" {
    pub fn BNAddFlowGraphNodeOutgoingEdge(
        node: *mut BNFlowGraphNode,
        type_: BNBranchType,
        target: *mut BNFlowGraphNode,
        edgeStyle: BNEdgeStyle,
    );
}
extern "C" {
    pub fn BNGetFlowGraphNodeHighlight(node: *mut BNFlowGraphNode) -> BNHighlightColor;
}
extern "C" {
    pub fn BNSetFlowGraphNodeHighlight(node: *mut BNFlowGraphNode, color: BNHighlightColor);
}
extern "C" {
    pub fn BNFinishPrepareForLayout(graph: *mut BNFlowGraph);
}
extern "C" {
    pub fn BNFlowGraphUpdateQueryMode(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNFlowGraphHasUpdates(graph: *mut BNFlowGraph) -> bool;
}
extern "C" {
    pub fn BNUpdateFlowGraph(graph: *mut BNFlowGraph) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNSetFlowGraphOption(graph: *mut BNFlowGraph, option: BNFlowGraphOption, value: bool);
}
extern "C" {
    pub fn BNIsFlowGraphOptionSet(graph: *mut BNFlowGraph, option: BNFlowGraphOption) -> bool;
}
extern "C" {
    pub fn BNIsNodeValidForFlowGraph(graph: *mut BNFlowGraph, node: *mut BNFlowGraphNode) -> bool;
}
extern "C" {
    pub fn BNCreateSymbol(
        type_: BNSymbolType,
        shortName: *const ::std::os::raw::c_char,
        fullName: *const ::std::os::raw::c_char,
        rawName: *const ::std::os::raw::c_char,
        addr: u64,
        binding: BNSymbolBinding,
        nameSpace: *const BNNameSpace,
        ordinal: u64,
    ) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNNewSymbolReference(sym: *mut BNSymbol) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNFreeSymbol(sym: *mut BNSymbol);
}
extern "C" {
    pub fn BNGetSymbolType(sym: *mut BNSymbol) -> BNSymbolType;
}
extern "C" {
    pub fn BNGetSymbolBinding(sym: *mut BNSymbol) -> BNSymbolBinding;
}
extern "C" {
    pub fn BNGetSymbolNameSpace(sym: *mut BNSymbol) -> BNNameSpace;
}
extern "C" {
    pub fn BNGetSymbolShortName(sym: *mut BNSymbol) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetSymbolFullName(sym: *mut BNSymbol) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetSymbolRawName(sym: *mut BNSymbol) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetSymbolRawBytes(
        sym: *mut BNSymbol,
        count: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BNFreeSymbolRawBytes(bytes: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn BNGetSymbolAddress(sym: *mut BNSymbol) -> u64;
}
extern "C" {
    pub fn BNGetSymbolOrdinal(sym: *mut BNSymbol) -> u64;
}
extern "C" {
    pub fn BNIsSymbolAutoDefined(sym: *mut BNSymbol) -> bool;
}
extern "C" {
    pub fn BNGetSymbolByAddress(
        view: *mut BNBinaryView,
        addr: u64,
        nameSpace: *const BNNameSpace,
    ) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolByRawName(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        nameSpace: *const BNNameSpace,
    ) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolsByName(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        count: *mut usize,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolsByRawName(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        count: *mut usize,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbols(
        view: *mut BNBinaryView,
        count: *mut usize,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolsInRange(
        view: *mut BNBinaryView,
        start: u64,
        len: u64,
        count: *mut usize,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolsOfType(
        view: *mut BNBinaryView,
        type_: BNSymbolType,
        count: *mut usize,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNGetSymbolsOfTypeInRange(
        view: *mut BNBinaryView,
        type_: BNSymbolType,
        start: u64,
        len: u64,
        count: *mut usize,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNFreeSymbolList(syms: *mut *mut BNSymbol, count: usize);
}
extern "C" {
    pub fn BNGetVisibleSymbols(
        view: *mut BNBinaryView,
        count: *mut usize,
        nameSpace: *const BNNameSpace,
    ) -> *mut *mut BNSymbol;
}
extern "C" {
    pub fn BNDefineAutoSymbol(view: *mut BNBinaryView, sym: *mut BNSymbol);
}
extern "C" {
    pub fn BNUndefineAutoSymbol(view: *mut BNBinaryView, sym: *mut BNSymbol);
}
extern "C" {
    pub fn BNDefineUserSymbol(view: *mut BNBinaryView, sym: *mut BNSymbol);
}
extern "C" {
    pub fn BNUndefineUserSymbol(view: *mut BNBinaryView, sym: *mut BNSymbol);
}
extern "C" {
    pub fn BNDefineImportedFunction(
        view: *mut BNBinaryView,
        importAddressSym: *mut BNSymbol,
        func: *mut BNFunction,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNDefineAutoSymbolAndVariableOrFunction(
        view: *mut BNBinaryView,
        platform: *mut BNPlatform,
        sym: *mut BNSymbol,
        type_: *mut BNType,
    ) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNBeginBulkModifySymbols(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNEndBulkModifySymbols(view: *mut BNBinaryView);
}
extern "C" {
    pub fn BNGetDebugInfo(view: *mut BNBinaryView) -> *mut BNDebugInfo;
}
extern "C" {
    pub fn BNApplyDebugInfo(view: *mut BNBinaryView, newDebugInfo: *mut BNDebugInfo);
}
extern "C" {
    pub fn BNSetDebugInfo(view: *mut BNBinaryView, newDebugInfo: *mut BNDebugInfo);
}
extern "C" {
    pub fn BNIsApplyingDebugInfo(view: *mut BNBinaryView) -> bool;
}
extern "C" {
    pub fn BNImportedFunctionFromImportAddressSymbol(
        sym: *mut BNSymbol,
        addr: u64,
    ) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNCreateLowLevelILFunction(
        arch: *mut BNArchitecture,
        func: *mut BNFunction,
    ) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNNewLowLevelILFunctionReference(
        func: *mut BNLowLevelILFunction,
    ) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNFreeLowLevelILFunction(func: *mut BNLowLevelILFunction);
}
extern "C" {
    pub fn BNGetLowLevelILOwnerFunction(func: *mut BNLowLevelILFunction) -> *mut BNFunction;
}
extern "C" {
    pub fn BNLowLevelILGetCurrentAddress(func: *mut BNLowLevelILFunction) -> u64;
}
extern "C" {
    pub fn BNLowLevelILSetCurrentAddress(
        func: *mut BNLowLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    );
}
extern "C" {
    pub fn BNLowLevelILSetCurrentSourceBlock(
        func: *mut BNLowLevelILFunction,
        source: *mut BNBasicBlock,
    );
}
extern "C" {
    pub fn BNLowLevelILGetInstructionStart(
        func: *mut BNLowLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNLowLevelILClearIndirectBranches(func: *mut BNLowLevelILFunction);
}
extern "C" {
    pub fn BNLowLevelILSetIndirectBranches(
        func: *mut BNLowLevelILFunction,
        branches: *mut BNArchitectureAndAddress,
        count: usize,
    );
}
extern "C" {
    pub fn BNLowLevelILAddExpr(
        func: *mut BNLowLevelILFunction,
        operation: BNLowLevelILOperation,
        size: usize,
        flags: u32,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNLowLevelILAddExprWithLocation(
        func: *mut BNLowLevelILFunction,
        addr: u64,
        sourceOperand: u32,
        operation: BNLowLevelILOperation,
        size: usize,
        flags: u32,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNLowLevelILSetExprSourceOperand(
        func: *mut BNLowLevelILFunction,
        expr: usize,
        operand: u32,
    );
}
extern "C" {
    pub fn BNLowLevelILAddInstruction(func: *mut BNLowLevelILFunction, expr: usize) -> usize;
}
extern "C" {
    pub fn BNLowLevelILGoto(
        func: *mut BNLowLevelILFunction,
        label: *mut BNLowLevelILLabel,
    ) -> usize;
}
extern "C" {
    pub fn BNLowLevelILGotoWithLocation(
        func: *mut BNLowLevelILFunction,
        label: *mut BNLowLevelILLabel,
        addr: u64,
        sourceOperand: u32,
    ) -> usize;
}
extern "C" {
    pub fn BNLowLevelILIf(
        func: *mut BNLowLevelILFunction,
        op: u64,
        t: *mut BNLowLevelILLabel,
        f: *mut BNLowLevelILLabel,
    ) -> usize;
}
extern "C" {
    pub fn BNLowLevelILIfWithLocation(
        func: *mut BNLowLevelILFunction,
        op: u64,
        t: *mut BNLowLevelILLabel,
        f: *mut BNLowLevelILLabel,
        addr: u64,
        sourceOperand: u32,
    ) -> usize;
}
extern "C" {
    pub fn BNLowLevelILInitLabel(label: *mut BNLowLevelILLabel);
}
extern "C" {
    pub fn BNLowLevelILMarkLabel(func: *mut BNLowLevelILFunction, label: *mut BNLowLevelILLabel);
}
extern "C" {
    pub fn BNFinalizeLowLevelILFunction(func: *mut BNLowLevelILFunction);
}
extern "C" {
    pub fn BNGenerateLowLevelILSSAForm(func: *mut BNLowLevelILFunction);
}
extern "C" {
    pub fn BNPrepareToCopyLowLevelILFunction(
        func: *mut BNLowLevelILFunction,
        src: *mut BNLowLevelILFunction,
    );
}
extern "C" {
    pub fn BNPrepareToCopyLowLevelILBasicBlock(
        func: *mut BNLowLevelILFunction,
        block: *mut BNBasicBlock,
    );
}
extern "C" {
    pub fn BNGetLabelForLowLevelILSourceInstruction(
        func: *mut BNLowLevelILFunction,
        instr: usize,
    ) -> *mut BNLowLevelILLabel;
}
extern "C" {
    pub fn BNLowLevelILAddLabelMap(
        func: *mut BNLowLevelILFunction,
        values: *mut u64,
        labels: *mut *mut BNLowLevelILLabel,
        count: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNLowLevelILAddOperandList(
        func: *mut BNLowLevelILFunction,
        operands: *mut u64,
        count: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNLowLevelILGetOperandList(
        func: *mut BNLowLevelILFunction,
        expr: usize,
        operand: usize,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNLowLevelILFreeOperandList(operands: *mut u64);
}
extern "C" {
    pub fn BNGetLowLevelILByIndex(
        func: *mut BNLowLevelILFunction,
        i: usize,
    ) -> BNLowLevelILInstruction;
}
extern "C" {
    pub fn BNGetLowLevelILIndexForInstruction(func: *mut BNLowLevelILFunction, i: usize) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILInstructionForExpr(func: *mut BNLowLevelILFunction, expr: usize)
        -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILInstructionCount(func: *mut BNLowLevelILFunction) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILExprCount(func: *mut BNLowLevelILFunction) -> usize;
}
extern "C" {
    pub fn BNUpdateLowLevelILOperand(
        func: *mut BNLowLevelILFunction,
        instr: usize,
        operandIndex: usize,
        value: u64,
    );
}
extern "C" {
    pub fn BNReplaceLowLevelILExpr(func: *mut BNLowLevelILFunction, expr: usize, newExpr: usize);
}
extern "C" {
    pub fn BNSetLowLevelILExprAttributes(
        func: *mut BNLowLevelILFunction,
        expr: usize,
        attributes: u32,
    );
}
extern "C" {
    pub fn BNAddLowLevelILLabelForAddress(
        func: *mut BNLowLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    );
}
extern "C" {
    pub fn BNGetLowLevelILLabelForAddress(
        func: *mut BNLowLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> *mut BNLowLevelILLabel;
}
extern "C" {
    pub fn BNGetLowLevelILExprText(
        func: *mut BNLowLevelILFunction,
        arch: *mut BNArchitecture,
        i: usize,
        settings: *mut BNDisassemblySettings,
        tokens: *mut *mut BNInstructionTextToken,
        count: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetLowLevelILInstructionText(
        il: *mut BNLowLevelILFunction,
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        i: usize,
        settings: *mut BNDisassemblySettings,
        tokens: *mut *mut BNInstructionTextToken,
        count: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetLowLevelILTemporaryRegisterCount(func: *mut BNLowLevelILFunction) -> u32;
}
extern "C" {
    pub fn BNGetLowLevelILTemporaryFlagCount(func: *mut BNLowLevelILFunction) -> u32;
}
extern "C" {
    pub fn BNGetLowLevelILBasicBlockList(
        func: *mut BNLowLevelILFunction,
        count: *mut usize,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetLowLevelILBasicBlockForInstruction(
        func: *mut BNLowLevelILFunction,
        i: usize,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetLowLevelILSSAForm(func: *mut BNLowLevelILFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetLowLevelILNonSSAForm(func: *mut BNLowLevelILFunction) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetLowLevelILSSAInstructionIndex(
        func: *mut BNLowLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILNonSSAInstructionIndex(
        func: *mut BNLowLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILSSAExprIndex(func: *mut BNLowLevelILFunction, expr: usize) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILNonSSAExprIndex(func: *mut BNLowLevelILFunction, expr: usize) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILSSARegisterDefinition(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        version: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILSSAFlagDefinition(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        version: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILSSAMemoryDefinition(
        func: *mut BNLowLevelILFunction,
        version: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILSSARegisterUses(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        version: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetLowLevelILSSAFlagUses(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        version: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetLowLevelILSSAMemoryUses(
        func: *mut BNLowLevelILFunction,
        version: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetLowLevelILSSARegisterValue(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        version: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILSSAFlagValue(
        func: *mut BNLowLevelILFunction,
        flag: u32,
        version: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILExprValue(
        func: *mut BNLowLevelILFunction,
        expr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleExprValues(
        func: *mut BNLowLevelILFunction,
        expr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILRegisterValueAtInstruction(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILRegisterValueAfterInstruction(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleRegisterValuesAtInstruction(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleRegisterValuesAfterInstruction(
        func: *mut BNLowLevelILFunction,
        reg: u32,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILFlagValueAtInstruction(
        func: *mut BNLowLevelILFunction,
        flag: u32,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILFlagValueAfterInstruction(
        func: *mut BNLowLevelILFunction,
        flag: u32,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleFlagValuesAtInstruction(
        func: *mut BNLowLevelILFunction,
        flag: u32,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleFlagValuesAfterInstruction(
        func: *mut BNLowLevelILFunction,
        flag: u32,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILStackContentsAtInstruction(
        func: *mut BNLowLevelILFunction,
        offset: i64,
        len: usize,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILStackContentsAfterInstruction(
        func: *mut BNLowLevelILFunction,
        offset: i64,
        len: usize,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleStackContentsAtInstruction(
        func: *mut BNLowLevelILFunction,
        offset: i64,
        len: usize,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelILPossibleStackContentsAfterInstruction(
        func: *mut BNLowLevelILFunction,
        offset: i64,
        len: usize,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetLowLevelRegisters(func: *mut BNLowLevelILFunction, count: *mut usize) -> *mut u32;
}
extern "C" {
    pub fn BNGetLowLevelRegisterStacks(
        func: *mut BNLowLevelILFunction,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetLowLevelFlags(func: *mut BNLowLevelILFunction, count: *mut usize) -> *mut u32;
}
extern "C" {
    pub fn BNGetLowLevelSSARegistersWithoutVersions(
        func: *mut BNLowLevelILFunction,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetLowLevelSSARegisterStacksWithoutVersions(
        func: *mut BNLowLevelILFunction,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetLowLevelSSAFlagsWithoutVersions(
        func: *mut BNLowLevelILFunction,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetLowLevelRegisterSSAVersions(
        func: *mut BNLowLevelILFunction,
        var: u32,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetLowLevelRegisterStackSSAVersions(
        func: *mut BNLowLevelILFunction,
        var: u32,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetLowLevelFlagSSAVersions(
        func: *mut BNLowLevelILFunction,
        var: u32,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetLowLevelMemoryVersions(
        func: *mut BNLowLevelILFunction,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNFreeLLILVariablesList(vars: *mut u32);
}
extern "C" {
    pub fn BNFreeLLILVariableVersionList(versions: *mut usize);
}
extern "C" {
    pub fn BNGetMediumLevelILForLowLevelIL(
        func: *mut BNLowLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetMappedMediumLevelIL(
        func: *mut BNLowLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetMediumLevelILInstructionIndex(
        func: *mut BNLowLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILExprIndex(func: *mut BNLowLevelILFunction, expr: usize) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILExprIndexes(
        func: *mut BNLowLevelILFunction,
        expr: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetMappedMediumLevelILInstructionIndex(
        func: *mut BNLowLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMappedMediumLevelILExprIndex(func: *mut BNLowLevelILFunction, expr: usize)
        -> usize;
}
extern "C" {
    pub fn BNCreateMediumLevelILFunction(
        arch: *mut BNArchitecture,
        func: *mut BNFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNNewMediumLevelILFunctionReference(
        func: *mut BNMediumLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNFreeMediumLevelILFunction(func: *mut BNMediumLevelILFunction);
}
extern "C" {
    pub fn BNGetMediumLevelILOwnerFunction(func: *mut BNMediumLevelILFunction) -> *mut BNFunction;
}
extern "C" {
    pub fn BNMediumLevelILGetCurrentAddress(func: *mut BNMediumLevelILFunction) -> u64;
}
extern "C" {
    pub fn BNMediumLevelILSetCurrentAddress(
        func: *mut BNMediumLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    );
}
extern "C" {
    pub fn BNMediumLevelILGetInstructionStart(
        func: *mut BNMediumLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNMediumLevelILAddExpr(
        func: *mut BNMediumLevelILFunction,
        operation: BNMediumLevelILOperation,
        size: usize,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
        e: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNMediumLevelILAddExprWithLocation(
        func: *mut BNMediumLevelILFunction,
        operation: BNMediumLevelILOperation,
        addr: u64,
        sourceOperand: u32,
        size: usize,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
        e: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNMediumLevelILAddInstruction(func: *mut BNMediumLevelILFunction, expr: usize) -> usize;
}
extern "C" {
    pub fn BNMediumLevelILGoto(
        func: *mut BNMediumLevelILFunction,
        label: *mut BNMediumLevelILLabel,
    ) -> usize;
}
extern "C" {
    pub fn BNMediumLevelILGotoWithLocation(
        func: *mut BNMediumLevelILFunction,
        label: *mut BNMediumLevelILLabel,
        addr: u64,
        sourceOperand: u32,
    ) -> usize;
}
extern "C" {
    pub fn BNMediumLevelILIf(
        func: *mut BNMediumLevelILFunction,
        op: u64,
        t: *mut BNMediumLevelILLabel,
        f: *mut BNMediumLevelILLabel,
    ) -> usize;
}
extern "C" {
    pub fn BNMediumLevelILIfWithLocation(
        func: *mut BNMediumLevelILFunction,
        op: u64,
        t: *mut BNMediumLevelILLabel,
        f: *mut BNMediumLevelILLabel,
        addr: u64,
        sourceOperand: u32,
    ) -> usize;
}
extern "C" {
    pub fn BNMediumLevelILInitLabel(label: *mut BNMediumLevelILLabel);
}
extern "C" {
    pub fn BNMediumLevelILMarkLabel(
        func: *mut BNMediumLevelILFunction,
        label: *mut BNMediumLevelILLabel,
    );
}
extern "C" {
    pub fn BNFinalizeMediumLevelILFunction(func: *mut BNMediumLevelILFunction);
}
extern "C" {
    pub fn BNGenerateMediumLevelILSSAForm(
        func: *mut BNMediumLevelILFunction,
        analyzeConditionals: bool,
        handleAliases: bool,
        knownNotAliases: *mut BNVariable,
        knownNotAliasCount: usize,
        knownAliases: *mut BNVariable,
        knownAliasCount: usize,
    );
}
extern "C" {
    pub fn BNPrepareToCopyMediumLevelILFunction(
        func: *mut BNMediumLevelILFunction,
        src: *mut BNMediumLevelILFunction,
    );
}
extern "C" {
    pub fn BNPrepareToCopyMediumLevelILBasicBlock(
        func: *mut BNMediumLevelILFunction,
        block: *mut BNBasicBlock,
    );
}
extern "C" {
    pub fn BNGetLabelForMediumLevelILSourceInstruction(
        func: *mut BNMediumLevelILFunction,
        instr: usize,
    ) -> *mut BNMediumLevelILLabel;
}
extern "C" {
    pub fn BNMediumLevelILAddLabelMap(
        func: *mut BNMediumLevelILFunction,
        values: *mut u64,
        labels: *mut *mut BNMediumLevelILLabel,
        count: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNMediumLevelILAddOperandList(
        func: *mut BNMediumLevelILFunction,
        operands: *mut u64,
        count: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNMediumLevelILGetOperandList(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
        operand: usize,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNMediumLevelILFreeOperandList(operands: *mut u64);
}
extern "C" {
    pub fn BNGetMediumLevelILByIndex(
        func: *mut BNMediumLevelILFunction,
        i: usize,
    ) -> BNMediumLevelILInstruction;
}
extern "C" {
    pub fn BNGetMediumLevelILIndexForInstruction(
        func: *mut BNMediumLevelILFunction,
        i: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILInstructionForExpr(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILInstructionCount(func: *mut BNMediumLevelILFunction) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILExprCount(func: *mut BNMediumLevelILFunction) -> usize;
}
extern "C" {
    pub fn BNUpdateMediumLevelILOperand(
        func: *mut BNMediumLevelILFunction,
        instr: usize,
        operandIndex: usize,
        value: u64,
    );
}
extern "C" {
    pub fn BNMarkMediumLevelILInstructionForRemoval(
        func: *mut BNMediumLevelILFunction,
        instr: usize,
    );
}
extern "C" {
    pub fn BNReplaceMediumLevelILInstruction(
        func: *mut BNMediumLevelILFunction,
        instr: usize,
        expr: usize,
    );
}
extern "C" {
    pub fn BNReplaceMediumLevelILExpr(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
        newExpr: usize,
    );
}
extern "C" {
    pub fn BNSetMediumLevelILExprAttributes(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
        attributes: u32,
    );
}
extern "C" {
    pub fn BNGetMediumLevelILExprText(
        func: *mut BNMediumLevelILFunction,
        arch: *mut BNArchitecture,
        i: usize,
        tokens: *mut *mut BNInstructionTextToken,
        count: *mut usize,
        settings: *mut BNDisassemblySettings,
    ) -> bool;
}
extern "C" {
    pub fn BNGetMediumLevelILInstructionText(
        il: *mut BNMediumLevelILFunction,
        func: *mut BNFunction,
        arch: *mut BNArchitecture,
        i: usize,
        tokens: *mut *mut BNInstructionTextToken,
        count: *mut usize,
        settings: *mut BNDisassemblySettings,
    ) -> bool;
}
extern "C" {
    pub fn BNGetMediumLevelILBasicBlockList(
        func: *mut BNMediumLevelILFunction,
        count: *mut usize,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetMediumLevelILBasicBlockForInstruction(
        func: *mut BNMediumLevelILFunction,
        i: usize,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAForm(
        func: *mut BNMediumLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetMediumLevelILNonSSAForm(
        func: *mut BNMediumLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAInstructionIndex(
        func: *mut BNMediumLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILNonSSAInstructionIndex(
        func: *mut BNMediumLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAExprIndex(func: *mut BNMediumLevelILFunction, expr: usize)
        -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILNonSSAExprIndex(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAVarDefinition(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        version: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAMemoryDefinition(
        func: *mut BNMediumLevelILFunction,
        version: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAVarUses(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        version: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAMemoryUses(
        func: *mut BNMediumLevelILFunction,
        version: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNIsMediumLevelILSSAVarLive(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        version: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetMediumLevelILVariables(
        func: *mut BNMediumLevelILFunction,
        count: *mut usize,
    ) -> *mut BNVariable;
}
extern "C" {
    pub fn BNGetMediumLevelILAliasedVariables(
        func: *mut BNMediumLevelILFunction,
        count: *mut usize,
    ) -> *mut BNVariable;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableSSAVersions(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableDefinitions(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableUses(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetMediumLevelILLiveInstructionsForVariable(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        includeLastUse: bool,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetDefaultIndexForMediumLevelILVariableDefinition(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        instrIndex: usize,
    ) -> u32;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAVarValue(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        version: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILExprValue(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleSSAVarValues(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        version: usize,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleExprValues(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAVarVersionAtILInstruction(
        func: *mut BNMediumLevelILFunction,
        var: *const BNVariable,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILSSAMemoryVersionAtILInstruction(
        func: *mut BNMediumLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableForRegisterAtInstruction(
        func: *mut BNMediumLevelILFunction,
        reg: u32,
        instr: usize,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableForFlagAtInstruction(
        func: *mut BNMediumLevelILFunction,
        flag: u32,
        instr: usize,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetMediumLevelILVariableForStackLocationAtInstruction(
        func: *mut BNMediumLevelILFunction,
        offset: i64,
        instr: usize,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetMediumLevelILRegisterValueAtInstruction(
        func: *mut BNMediumLevelILFunction,
        reg: u32,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILRegisterValueAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        reg: u32,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleRegisterValuesAtInstruction(
        func: *mut BNMediumLevelILFunction,
        reg: u32,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleRegisterValuesAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        reg: u32,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILFlagValueAtInstruction(
        func: *mut BNMediumLevelILFunction,
        flag: u32,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILFlagValueAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        flag: u32,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleFlagValuesAtInstruction(
        func: *mut BNMediumLevelILFunction,
        flag: u32,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleFlagValuesAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        flag: u32,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILStackContentsAtInstruction(
        func: *mut BNMediumLevelILFunction,
        offset: i64,
        len: usize,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILStackContentsAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        offset: i64,
        len: usize,
        instr: usize,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleStackContentsAtInstruction(
        func: *mut BNMediumLevelILFunction,
        offset: i64,
        len: usize,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILPossibleStackContentsAfterInstruction(
        func: *mut BNMediumLevelILFunction,
        offset: i64,
        len: usize,
        instr: usize,
        options: *mut BNDataFlowQueryOption,
        optionCount: usize,
    ) -> BNPossibleValueSet;
}
extern "C" {
    pub fn BNGetMediumLevelILBranchDependence(
        func: *mut BNMediumLevelILFunction,
        curInstr: usize,
        branchInstr: usize,
    ) -> BNILBranchDependence;
}
extern "C" {
    pub fn BNGetAllMediumLevelILBranchDependence(
        func: *mut BNMediumLevelILFunction,
        instr: usize,
        count: *mut usize,
    ) -> *mut BNILBranchInstructionAndDependence;
}
extern "C" {
    pub fn BNFreeILBranchDependenceList(branches: *mut BNILBranchInstructionAndDependence);
}
extern "C" {
    pub fn BNGetLowLevelILForMediumLevelIL(
        func: *mut BNMediumLevelILFunction,
    ) -> *mut BNLowLevelILFunction;
}
extern "C" {
    pub fn BNGetLowLevelILInstructionIndex(
        func: *mut BNMediumLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILExprIndex(func: *mut BNMediumLevelILFunction, expr: usize) -> usize;
}
extern "C" {
    pub fn BNGetLowLevelILExprIndexes(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetHighLevelILForMediumLevelIL(
        func: *mut BNMediumLevelILFunction,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetHighLevelILInstructionIndex(
        func: *mut BNMediumLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILExprIndex(func: *mut BNMediumLevelILFunction, expr: usize) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILExprIndexes(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetMediumLevelILExprType(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
    ) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNSetMediumLevelILExprType(
        func: *mut BNMediumLevelILFunction,
        expr: usize,
        type_: *mut BNTypeWithConfidence,
    );
}
extern "C" {
    pub fn BNCreateHighLevelILFunction(
        arch: *mut BNArchitecture,
        func: *mut BNFunction,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNNewHighLevelILFunctionReference(
        func: *mut BNHighLevelILFunction,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNFreeHighLevelILFunction(func: *mut BNHighLevelILFunction);
}
extern "C" {
    pub fn BNGetHighLevelILOwnerFunction(func: *mut BNHighLevelILFunction) -> *mut BNFunction;
}
extern "C" {
    pub fn BNHighLevelILGetCurrentAddress(func: *mut BNHighLevelILFunction) -> u64;
}
extern "C" {
    pub fn BNHighLevelILSetCurrentAddress(
        func: *mut BNHighLevelILFunction,
        arch: *mut BNArchitecture,
        addr: u64,
    );
}
extern "C" {
    pub fn BNHighLevelILAddExpr(
        func: *mut BNHighLevelILFunction,
        operation: BNHighLevelILOperation,
        size: usize,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
        e: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNHighLevelILAddExprWithLocation(
        func: *mut BNHighLevelILFunction,
        operation: BNHighLevelILOperation,
        addr: u64,
        sourceOperand: u32,
        size: usize,
        a: u64,
        b: u64,
        c: u64,
        d: u64,
        e: u64,
    ) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILRootExpr(func: *mut BNHighLevelILFunction) -> usize;
}
extern "C" {
    pub fn BNSetHighLevelILRootExpr(func: *mut BNHighLevelILFunction, expr: usize);
}
extern "C" {
    pub fn BNFinalizeHighLevelILFunction(func: *mut BNHighLevelILFunction);
}
extern "C" {
    pub fn BNGenerateHighLevelILSSAForm(
        func: *mut BNHighLevelILFunction,
        aliases: *mut BNVariable,
        aliasCount: usize,
    );
}
extern "C" {
    pub fn BNHighLevelILAddOperandList(
        func: *mut BNHighLevelILFunction,
        operands: *mut u64,
        count: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNHighLevelILGetOperandList(
        func: *mut BNHighLevelILFunction,
        expr: usize,
        operand: usize,
        count: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn BNHighLevelILFreeOperandList(operands: *mut u64);
}
extern "C" {
    pub fn BNGetHighLevelILByIndex(
        func: *mut BNHighLevelILFunction,
        i: usize,
        asFullAst: bool,
    ) -> BNHighLevelILInstruction;
}
extern "C" {
    pub fn BNGetHighLevelILIndexForInstruction(func: *mut BNHighLevelILFunction, i: usize)
        -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILInstructionForExpr(
        func: *mut BNHighLevelILFunction,
        expr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILInstructionCount(func: *mut BNHighLevelILFunction) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILExprCount(func: *mut BNHighLevelILFunction) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILForHighLevelILFunction(
        func: *mut BNHighLevelILFunction,
    ) -> *mut BNMediumLevelILFunction;
}
extern "C" {
    pub fn BNGetMediumLevelILExprIndexFromHighLevelIL(
        func: *mut BNHighLevelILFunction,
        expr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetMediumLevelILExprIndexesFromHighLevelIL(
        func: *mut BNHighLevelILFunction,
        expr: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNUpdateHighLevelILOperand(
        func: *mut BNHighLevelILFunction,
        instr: usize,
        operandIndex: usize,
        value: u64,
    );
}
extern "C" {
    pub fn BNReplaceHighLevelILExpr(func: *mut BNHighLevelILFunction, expr: usize, newExpr: usize);
}
extern "C" {
    pub fn BNSetHighLevelILExprAttributes(
        func: *mut BNHighLevelILFunction,
        expr: usize,
        attributes: u32,
    );
}
extern "C" {
    pub fn BNGetHighLevelILExprText(
        func: *mut BNHighLevelILFunction,
        expr: usize,
        asFullAst: bool,
        count: *mut usize,
        settings: *mut BNDisassemblySettings,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNGetHighLevelILExprType(
        func: *mut BNHighLevelILFunction,
        expr: usize,
    ) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNSetHighLevelILExprType(
        func: *mut BNHighLevelILFunction,
        expr: usize,
        type_: *mut BNTypeWithConfidence,
    );
}
extern "C" {
    pub fn BNGetHighLevelILBasicBlockList(
        func: *mut BNHighLevelILFunction,
        count: *mut usize,
    ) -> *mut *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetHighLevelILBasicBlockForInstruction(
        func: *mut BNHighLevelILFunction,
        i: usize,
    ) -> *mut BNBasicBlock;
}
extern "C" {
    pub fn BNGetHighLevelILSSAForm(func: *mut BNHighLevelILFunction) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetHighLevelILNonSSAForm(
        func: *mut BNHighLevelILFunction,
    ) -> *mut BNHighLevelILFunction;
}
extern "C" {
    pub fn BNGetHighLevelILSSAInstructionIndex(
        func: *mut BNHighLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILNonSSAInstructionIndex(
        func: *mut BNHighLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILSSAExprIndex(func: *mut BNHighLevelILFunction, expr: usize) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILNonSSAExprIndex(func: *mut BNHighLevelILFunction, expr: usize) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILSSAVarDefinition(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        version: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILSSAMemoryDefinition(
        func: *mut BNHighLevelILFunction,
        version: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILSSAVarUses(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        version: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetHighLevelILSSAMemoryUses(
        func: *mut BNHighLevelILFunction,
        version: usize,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNIsHighLevelILSSAVarLive(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        version: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNIsHighLevelILSSAVarLiveAt(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        version: usize,
        instr: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNIsHighLevelILVarLiveAt(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        instr: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetHighLevelILVariables(
        func: *mut BNHighLevelILFunction,
        count: *mut usize,
    ) -> *mut BNVariable;
}
extern "C" {
    pub fn BNGetHighLevelILAliasedVariables(
        func: *mut BNHighLevelILFunction,
        count: *mut usize,
    ) -> *mut BNVariable;
}
extern "C" {
    pub fn BNGetHighLevelILVariableSSAVersions(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetHighLevelILVariableDefinitions(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetHighLevelILVariableUses(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNGetHighLevelILSSAVarVersionAtILInstruction(
        func: *mut BNHighLevelILFunction,
        var: *const BNVariable,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILSSAMemoryVersionAtILInstruction(
        func: *mut BNHighLevelILFunction,
        instr: usize,
    ) -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILExprIndexForLabel(func: *mut BNHighLevelILFunction, label: u64)
        -> usize;
}
extern "C" {
    pub fn BNGetHighLevelILUsesForLabel(
        func: *mut BNHighLevelILFunction,
        label: u64,
        count: *mut usize,
    ) -> *mut usize;
}
extern "C" {
    pub fn BNHighLevelILExprLessThan(
        leftFunc: *mut BNHighLevelILFunction,
        leftExpr: usize,
        rightFunc: *mut BNHighLevelILFunction,
        rightExpr: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNHighLevelILExprEqual(
        leftFunc: *mut BNHighLevelILFunction,
        leftExpr: usize,
        rightFunc: *mut BNHighLevelILFunction,
        rightExpr: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNNewTypeLibrary(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNNewTypeLibraryReference(lib: *mut BNTypeLibrary) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNDuplicateTypeLibrary(lib: *mut BNTypeLibrary) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNLoadTypeLibraryFromFile(path: *const ::std::os::raw::c_char) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNTypeLibraryDecompressToFile(
        file: *const ::std::os::raw::c_char,
        output: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeTypeLibrary(lib: *mut BNTypeLibrary);
}
extern "C" {
    pub fn BNLookupTypeLibraryByName(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNLookupTypeLibraryByGuid(
        arch: *mut BNArchitecture,
        guid: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNGetArchitectureTypeLibraries(
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNFreeTypeLibraryList(lib: *mut *mut BNTypeLibrary, count: usize);
}
extern "C" {
    pub fn BNFinalizeTypeLibrary(lib: *mut BNTypeLibrary) -> bool;
}
extern "C" {
    pub fn BNGetTypeLibraryArchitecture(lib: *mut BNTypeLibrary) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNSetTypeLibraryName(lib: *mut BNTypeLibrary, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetTypeLibraryName(lib: *mut BNTypeLibrary) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNAddTypeLibraryAlternateName(
        lib: *mut BNTypeLibrary,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetTypeLibraryAlternateNames(
        lib: *mut BNTypeLibrary,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetTypeLibraryDependencyName(
        lib: *mut BNTypeLibrary,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetTypeLibraryDependencyName(lib: *mut BNTypeLibrary) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetTypeLibraryGuid(lib: *mut BNTypeLibrary, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetTypeLibraryGuid(lib: *mut BNTypeLibrary) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNClearTypeLibraryPlatforms(lib: *mut BNTypeLibrary);
}
extern "C" {
    pub fn BNAddTypeLibraryPlatform(lib: *mut BNTypeLibrary, platform: *mut BNPlatform);
}
extern "C" {
    pub fn BNGetTypeLibraryPlatforms(
        lib: *mut BNTypeLibrary,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTypeLibraryStoreMetadata(
        lib: *mut BNTypeLibrary,
        key: *const ::std::os::raw::c_char,
        value: *mut BNMetadata,
    );
}
extern "C" {
    pub fn BNTypeLibraryQueryMetadata(
        lib: *mut BNTypeLibrary,
        key: *const ::std::os::raw::c_char,
    ) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNTypeLibraryRemoveMetadata(lib: *mut BNTypeLibrary, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddTypeLibraryNamedObject(
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNAddTypeLibraryNamedType(
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNAddTypeLibraryNamedTypeSource(
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
        source: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetTypeLibraryNamedObject(
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetTypeLibraryNamedType(
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetTypeLibraryNamedObjects(
        lib: *mut BNTypeLibrary,
        count: *mut usize,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNGetTypeLibraryNamedTypes(
        lib: *mut BNTypeLibrary,
        count: *mut usize,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNWriteTypeLibraryToFile(lib: *mut BNTypeLibrary, path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNAddBinaryViewTypeLibrary(view: *mut BNBinaryView, lib: *mut BNTypeLibrary);
}
extern "C" {
    pub fn BNGetBinaryViewTypeLibrary(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNGetBinaryViewTypeLibraries(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNBinaryViewImportTypeLibraryType(
        view: *mut BNBinaryView,
        lib: *mut *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNBinaryViewImportTypeLibraryObject(
        view: *mut BNBinaryView,
        lib: *mut *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNBinaryViewExportTypeToTypeLibrary(
        view: *mut BNBinaryView,
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNBinaryViewExportObjectToTypeLibrary(
        view: *mut BNBinaryView,
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    );
}
extern "C" {
    pub fn BNBinaryViewSetManualDependencies(
        view: *mut BNBinaryView,
        viewTypeNames: *mut BNQualifiedName,
        libTypeNames: *mut BNQualifiedName,
        libNames: *mut *mut ::std::os::raw::c_char,
        count: usize,
    );
}
extern "C" {
    pub fn BNBinaryViewRecordImportedObjectLibrary(
        view: *mut BNBinaryView,
        tgtPlatform: *mut BNPlatform,
        tgtAddr: u64,
        lib: *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
    );
}
extern "C" {
    pub fn BNBinaryViewLookupImportedObjectLibrary(
        view: *mut BNBinaryView,
        tgtPlatform: *mut BNPlatform,
        tgtAddr: u64,
        lib: *mut *mut BNTypeLibrary,
        name: *mut BNQualifiedName,
    ) -> bool;
}
extern "C" {
    pub fn BNBinaryViewLookupImportedTypeLibrary(
        view: *mut BNBinaryView,
        typeName: *const BNQualifiedName,
        lib: *mut *mut BNTypeLibrary,
        resultName: *mut BNQualifiedName,
    ) -> bool;
}
extern "C" {
    pub fn BNCreateLanguageRepresentationFunction(
        arch: *mut BNArchitecture,
        func: *mut BNFunction,
    ) -> *mut BNLanguageRepresentationFunction;
}
extern "C" {
    pub fn BNNewLanguageRepresentationFunctionReference(
        func: *mut BNLanguageRepresentationFunction,
    ) -> *mut BNLanguageRepresentationFunction;
}
extern "C" {
    pub fn BNFreeLanguageRepresentationFunction(func: *mut BNLanguageRepresentationFunction);
}
extern "C" {
    pub fn BNGetLanguageRepresentationOwnerFunction(
        func: *mut BNLanguageRepresentationFunction,
    ) -> *mut BNFunction;
}
extern "C" {
    pub fn BNTypesEqual(a: *mut BNType, b: *mut BNType) -> bool;
}
extern "C" {
    pub fn BNTypesNotEqual(a: *mut BNType, b: *mut BNType) -> bool;
}
extern "C" {
    pub fn BNCreateVoidType() -> *mut BNType;
}
extern "C" {
    pub fn BNCreateBoolType() -> *mut BNType;
}
extern "C" {
    pub fn BNCreateIntegerType(
        width: usize,
        sign: *mut BNBoolWithConfidence,
        altName: *const ::std::os::raw::c_char,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateFloatType(width: usize, altName: *const ::std::os::raw::c_char) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateWideCharType(
        width: usize,
        altName: *const ::std::os::raw::c_char,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateStructureType(s: *mut BNStructure) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateEnumerationType(
        arch: *mut BNArchitecture,
        e: *mut BNEnumeration,
        width: usize,
        isSigned: *mut BNBoolWithConfidence,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateEnumerationTypeOfWidth(
        e: *mut BNEnumeration,
        width: usize,
        isSigned: *mut BNBoolWithConfidence,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreatePointerType(
        arch: *mut BNArchitecture,
        type_: *const BNTypeWithConfidence,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
        refType: BNReferenceType,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreatePointerTypeOfWidth(
        width: usize,
        type_: *const BNTypeWithConfidence,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
        refType: BNReferenceType,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateArrayType(type_: *const BNTypeWithConfidence, elem: u64) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateFunctionType(
        returnValue: *mut BNTypeWithConfidence,
        callingConvention: *mut BNCallingConventionWithConfidence,
        params: *mut BNFunctionParameter,
        paramCount: usize,
        varArg: *mut BNBoolWithConfidence,
        canReturn: *mut BNBoolWithConfidence,
        stackAdjust: *mut BNOffsetWithConfidence,
        regStackAdjustRegs: *mut u32,
        regStackAdjustValues: *mut BNOffsetWithConfidence,
        regStackAdjustCount: usize,
        returnRegs: *mut BNRegisterSetWithConfidence,
        ft: BNNameType,
        pure_: *mut BNBoolWithConfidence,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNNewTypeReference(type_: *mut BNType) -> *mut BNType;
}
extern "C" {
    pub fn BNDuplicateType(type_: *mut BNType) -> *mut BNType;
}
extern "C" {
    pub fn BNGetTypeAndName(
        type_: *mut BNType,
        name: *mut BNQualifiedName,
        escaping: BNTokenEscapingType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreeType(type_: *mut BNType);
}
extern "C" {
    pub fn BNCreateTypeBuilderFromType(type_: *mut BNType) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateVoidTypeBuilder() -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateBoolTypeBuilder() -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateIntegerTypeBuilder(
        width: usize,
        sign: *mut BNBoolWithConfidence,
        altName: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateFloatTypeBuilder(
        width: usize,
        altName: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateWideCharTypeBuilder(
        width: usize,
        altName: *const ::std::os::raw::c_char,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateStructureTypeBuilder(s: *mut BNStructure) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateStructureTypeBuilderWithBuilder(
        s: *mut BNStructureBuilder,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateEnumerationTypeBuilder(
        arch: *mut BNArchitecture,
        e: *mut BNEnumeration,
        width: usize,
        isSigned: *mut BNBoolWithConfidence,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateEnumerationTypeBuilderWithBuilder(
        arch: *mut BNArchitecture,
        e: *mut BNEnumerationBuilder,
        width: usize,
        isSigned: *mut BNBoolWithConfidence,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreatePointerTypeBuilder(
        arch: *mut BNArchitecture,
        type_: *const BNTypeWithConfidence,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
        refType: BNReferenceType,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreatePointerTypeBuilderOfWidth(
        width: usize,
        type_: *const BNTypeWithConfidence,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
        refType: BNReferenceType,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateArrayTypeBuilder(
        type_: *const BNTypeWithConfidence,
        elem: u64,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateFunctionTypeBuilder(
        returnValue: *mut BNTypeWithConfidence,
        callingConvention: *mut BNCallingConventionWithConfidence,
        params: *mut BNFunctionParameter,
        paramCount: usize,
        varArg: *mut BNBoolWithConfidence,
        canReturn: *mut BNBoolWithConfidence,
        stackAdjust: *mut BNOffsetWithConfidence,
        regStackAdjustRegs: *mut u32,
        regStackAdjustValues: *mut BNOffsetWithConfidence,
        regStackAdjustCount: usize,
        returnRegs: *mut BNRegisterSetWithConfidence,
        ft: BNNameType,
        pure_: *mut BNBoolWithConfidence,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNFinalizeTypeBuilder(type_: *mut BNTypeBuilder) -> *mut BNType;
}
extern "C" {
    pub fn BNDuplicateTypeBuilder(type_: *mut BNTypeBuilder) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNGetTypeBuilderTypeAndName(
        type_: *mut BNTypeBuilder,
        name: *mut BNQualifiedName,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreeTypeBuilder(type_: *mut BNTypeBuilder);
}
extern "C" {
    pub fn BNTypeGetTypeName(nt: *mut BNType) -> BNQualifiedName;
}
extern "C" {
    pub fn BNGetTypeClass(type_: *mut BNType) -> BNTypeClass;
}
extern "C" {
    pub fn BNGetTypeWidth(type_: *mut BNType) -> u64;
}
extern "C" {
    pub fn BNGetTypeAlignment(type_: *mut BNType) -> usize;
}
extern "C" {
    pub fn BNGetIntegerTypeDisplayType(type_: *mut BNType) -> BNIntegerDisplayType;
}
extern "C" {
    pub fn BNSetIntegerTypeDisplayType(
        type_: *mut BNTypeBuilder,
        displayType: BNIntegerDisplayType,
    );
}
extern "C" {
    pub fn BNIsTypeSigned(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeConst(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeVolatile(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeFloatingPoint(type_: *mut BNType) -> bool;
}
extern "C" {
    pub fn BNGetChildType(type_: *mut BNType) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetTypeCallingConvention(type_: *mut BNType) -> BNCallingConventionWithConfidence;
}
extern "C" {
    pub fn BNGetTypeParameters(type_: *mut BNType, count: *mut usize) -> *mut BNFunctionParameter;
}
extern "C" {
    pub fn BNFreeTypeParameterList(types: *mut BNFunctionParameter, count: usize);
}
extern "C" {
    pub fn BNTypeHasVariableArguments(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNFunctionTypeCanReturn(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypePure(type_: *mut BNType) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNGetTypeStructure(type_: *mut BNType) -> *mut BNStructure;
}
extern "C" {
    pub fn BNGetTypeEnumeration(type_: *mut BNType) -> *mut BNEnumeration;
}
extern "C" {
    pub fn BNGetTypeNamedTypeReference(type_: *mut BNType) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNGetTypeElementCount(type_: *mut BNType) -> u64;
}
extern "C" {
    pub fn BNGetTypeOffset(type_: *mut BNType) -> u64;
}
extern "C" {
    pub fn BNGetTypeStackAdjustment(type_: *mut BNType) -> BNOffsetWithConfidence;
}
extern "C" {
    pub fn BNTypeGetStructureName(type_: *mut BNType) -> BNQualifiedName;
}
extern "C" {
    pub fn BNGetRegisteredTypeName(type_: *mut BNType) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNTypeGetReferenceType(type_: *mut BNType) -> BNReferenceType;
}
extern "C" {
    pub fn BNGetTypeAlternateName(type_: *mut BNType) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTypeGetSystemCallNumber(type_: *mut BNType) -> u32;
}
extern "C" {
    pub fn BNTypeIsSystemCall(type_: *mut BNType) -> bool;
}
extern "C" {
    pub fn BNGetTypeString(
        type_: *mut BNType,
        platform: *mut BNPlatform,
        escaping: BNTokenEscapingType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeStringBeforeName(
        type_: *mut BNType,
        platform: *mut BNPlatform,
        escaping: BNTokenEscapingType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeStringAfterName(
        type_: *mut BNType,
        platform: *mut BNPlatform,
        escaping: BNTokenEscapingType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeTokens(
        type_: *mut BNType,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        escaping: BNTokenEscapingType,
        count: *mut usize,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNGetTypeTokensBeforeName(
        type_: *mut BNType,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        escaping: BNTokenEscapingType,
        count: *mut usize,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNGetTypeTokensAfterName(
        type_: *mut BNType,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        escaping: BNTokenEscapingType,
        count: *mut usize,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNTypeWithReplacedStructure(
        type_: *mut BNType,
        from: *mut BNStructure,
        to: *mut BNStructure,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNTypeWithReplacedEnumeration(
        type_: *mut BNType,
        from: *mut BNEnumeration,
        to: *mut BNEnumeration,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNTypeWithReplacedNamedTypeReference(
        type_: *mut BNType,
        from: *mut BNNamedTypeReference,
        to: *mut BNNamedTypeReference,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNAddTypeMemberTokens(
        type_: *mut BNType,
        data: *mut BNBinaryView,
        tokens: *mut *mut BNInstructionTextToken,
        tokenCount: *mut usize,
        offset: i64,
        nameList: *mut *mut *mut ::std::os::raw::c_char,
        nameCount: *mut usize,
        size: usize,
        indirect: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNGetTypeLines(
        type_: *mut BNType,
        data: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        lineWidth: ::std::os::raw::c_int,
        collapsed: bool,
        escaping: BNTokenEscapingType,
        count: *mut usize,
    ) -> *mut BNTypeDefinitionLine;
}
extern "C" {
    pub fn BNFreeTypeDefinitionLineList(list: *mut BNTypeDefinitionLine, count: usize);
}
extern "C" {
    pub fn BNTypeBuilderGetTypeName(nt: *mut BNTypeBuilder) -> BNQualifiedName;
}
extern "C" {
    pub fn BNTypeBuilderSetTypeName(type_: *mut BNTypeBuilder, name: *mut BNQualifiedName);
}
extern "C" {
    pub fn BNTypeBuilderSetAlternateName(
        type_: *mut BNTypeBuilder,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetTypeBuilderClass(type_: *mut BNTypeBuilder) -> BNTypeClass;
}
extern "C" {
    pub fn BNTypeBuilderSetSystemCallNumber(type_: *mut BNTypeBuilder, v: bool, n: u32);
}
extern "C" {
    pub fn BNGetTypeBuilderWidth(type_: *mut BNTypeBuilder) -> u64;
}
extern "C" {
    pub fn BNGetTypeBuilderAlignment(type_: *mut BNTypeBuilder) -> usize;
}
extern "C" {
    pub fn BNIsTypeBuilderSigned(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeBuilderConst(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeBuilderVolatile(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeBuilderFloatingPoint(type_: *mut BNTypeBuilder) -> bool;
}
extern "C" {
    pub fn BNGetTypeBuilderChildType(type_: *mut BNTypeBuilder) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNGetTypeBuilderCallingConvention(
        type_: *mut BNTypeBuilder,
    ) -> BNCallingConventionWithConfidence;
}
extern "C" {
    pub fn BNGetTypeBuilderParameters(
        type_: *mut BNTypeBuilder,
        count: *mut usize,
    ) -> *mut BNFunctionParameter;
}
extern "C" {
    pub fn BNTypeBuilderHasVariableArguments(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNFunctionTypeBuilderCanReturn(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNIsTypeBuilderPure(type_: *mut BNTypeBuilder) -> BNBoolWithConfidence;
}
extern "C" {
    pub fn BNGetTypeBuilderStructure(type_: *mut BNTypeBuilder) -> *mut BNStructure;
}
extern "C" {
    pub fn BNGetTypeBuilderEnumeration(type_: *mut BNTypeBuilder) -> *mut BNEnumeration;
}
extern "C" {
    pub fn BNGetTypeBuilderNamedTypeReference(
        type_: *mut BNTypeBuilder,
    ) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNSetTypeBuilderNamedTypeReference(
        type_: *mut BNTypeBuilder,
        ntr: *mut BNNamedTypeReference,
    );
}
extern "C" {
    pub fn BNGetTypeBuilderElementCount(type_: *mut BNTypeBuilder) -> u64;
}
extern "C" {
    pub fn BNGetTypeBuilderOffset(type_: *mut BNTypeBuilder) -> u64;
}
extern "C" {
    pub fn BNSetTypeBuilderOffset(type_: *mut BNTypeBuilder, offset: u64);
}
extern "C" {
    pub fn BNSetFunctionTypeBuilderCanReturn(
        type_: *mut BNTypeBuilder,
        canReturn: *mut BNBoolWithConfidence,
    );
}
extern "C" {
    pub fn BNSetTypeBuilderPure(type_: *mut BNTypeBuilder, pure_: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNSetFunctionTypeBuilderParameters(
        type_: *mut BNTypeBuilder,
        params: *mut BNFunctionParameter,
        paramCount: usize,
    );
}
extern "C" {
    pub fn BNTypeBuilderSetConst(type_: *mut BNTypeBuilder, cnst: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNTypeBuilderSetVolatile(type_: *mut BNTypeBuilder, vltl: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNTypeBuilderSetSigned(type_: *mut BNTypeBuilder, sign: *mut BNBoolWithConfidence);
}
extern "C" {
    pub fn BNTypeBuilderSetChildType(type_: *mut BNTypeBuilder, child: *mut BNTypeWithConfidence);
}
extern "C" {
    pub fn BNGetTypeBuilderStackAdjustment(type_: *mut BNTypeBuilder) -> BNOffsetWithConfidence;
}
extern "C" {
    pub fn BNTypeBuilderGetStructureName(type_: *mut BNTypeBuilder) -> BNQualifiedName;
}
extern "C" {
    pub fn BNTypeBuilderGetReferenceType(type_: *mut BNTypeBuilder) -> BNReferenceType;
}
extern "C" {
    pub fn BNGetTypeBuilderAlternateName(type_: *mut BNTypeBuilder) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNTypeBuilderIsSystemCall(type_: *mut BNTypeBuilder) -> bool;
}
extern "C" {
    pub fn BNTypeBuilderGetSystemCallNumber(type_: *mut BNTypeBuilder) -> u32;
}
extern "C" {
    pub fn BNTypeBuilderSetStackAdjustment(
        type_: *mut BNTypeBuilder,
        adjust: *mut BNOffsetWithConfidence,
    );
}
extern "C" {
    pub fn BNGetTypeBuilderString(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeBuilderStringBeforeName(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeBuilderStringAfterName(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeBuilderTokens(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        count: *mut usize,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNGetTypeBuilderTokensBeforeName(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        count: *mut usize,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNGetTypeBuilderTokensAfterName(
        type_: *mut BNTypeBuilder,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        count: *mut usize,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNCreateNamedTypeReference(
        nt: *mut BNNamedTypeReference,
        width: usize,
        align: usize,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceFromTypeAndId(
        id: *const ::std::os::raw::c_char,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceFromType(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceBuilder(
        nt: *mut BNNamedTypeReference,
        width: usize,
        align: usize,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceBuilderWithBuilder(
        nt: *mut BNNamedTypeReferenceBuilder,
        width: usize,
        align: usize,
        cnst: *mut BNBoolWithConfidence,
        vltl: *mut BNBoolWithConfidence,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceBuilderFromTypeAndId(
        id: *const ::std::os::raw::c_char,
        name: *mut BNQualifiedName,
        type_: *mut BNType,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateNamedTypeReferenceBuilderFromType(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
    ) -> *mut BNTypeBuilder;
}
extern "C" {
    pub fn BNCreateNamedType(
        cls: BNNamedTypeReferenceClass,
        id: *const ::std::os::raw::c_char,
        name: *mut BNQualifiedName,
    ) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNGetTypeReferenceClass(nt: *mut BNNamedTypeReference) -> BNNamedTypeReferenceClass;
}
extern "C" {
    pub fn BNGetTypeReferenceId(nt: *mut BNNamedTypeReference) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeReferenceName(nt: *mut BNNamedTypeReference) -> BNQualifiedName;
}
extern "C" {
    pub fn BNFreeQualifiedName(name: *mut BNQualifiedName);
}
extern "C" {
    pub fn BNFreeNamedTypeReference(nt: *mut BNNamedTypeReference);
}
extern "C" {
    pub fn BNNewNamedTypeReference(nt: *mut BNNamedTypeReference) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNCreateNamedTypeBuilder(
        cls: BNNamedTypeReferenceClass,
        id: *const ::std::os::raw::c_char,
        name: *mut BNQualifiedName,
    ) -> *mut BNNamedTypeReferenceBuilder;
}
extern "C" {
    pub fn BNFreeNamedTypeReferenceBuilder(s: *mut BNNamedTypeReferenceBuilder);
}
extern "C" {
    pub fn BNSetNamedTypeReferenceBuilderTypeClass(
        s: *mut BNNamedTypeReferenceBuilder,
        type_: BNNamedTypeReferenceClass,
    );
}
extern "C" {
    pub fn BNSetNamedTypeReferenceBuilderTypeId(
        s: *mut BNNamedTypeReferenceBuilder,
        id: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNSetNamedTypeReferenceBuilderName(
        s: *mut BNNamedTypeReferenceBuilder,
        name: *mut BNQualifiedName,
    );
}
extern "C" {
    pub fn BNFinalizeNamedTypeReferenceBuilder(
        s: *mut BNNamedTypeReferenceBuilder,
    ) -> *mut BNNamedTypeReference;
}
extern "C" {
    pub fn BNGetTypeReferenceBuilderClass(
        nt: *mut BNNamedTypeReferenceBuilder,
    ) -> BNNamedTypeReferenceClass;
}
extern "C" {
    pub fn BNGetTypeReferenceBuilderId(
        nt: *mut BNNamedTypeReferenceBuilder,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeReferenceBuilderName(nt: *mut BNNamedTypeReferenceBuilder) -> BNQualifiedName;
}
extern "C" {
    pub fn BNCreateStructureBuilder() -> *mut BNStructureBuilder;
}
extern "C" {
    pub fn BNCreateStructureBuilderWithOptions(
        type_: BNStructureVariant,
        packed: bool,
    ) -> *mut BNStructureBuilder;
}
extern "C" {
    pub fn BNCreateStructureBuilderFromStructure(s: *mut BNStructure) -> *mut BNStructureBuilder;
}
extern "C" {
    pub fn BNDuplicateStructureBuilder(s: *mut BNStructureBuilder) -> *mut BNStructureBuilder;
}
extern "C" {
    pub fn BNFinalizeStructureBuilder(s: *mut BNStructureBuilder) -> *mut BNStructure;
}
extern "C" {
    pub fn BNNewStructureReference(s: *mut BNStructure) -> *mut BNStructure;
}
extern "C" {
    pub fn BNFreeStructure(s: *mut BNStructure);
}
extern "C" {
    pub fn BNFreeStructureBuilder(s: *mut BNStructureBuilder);
}
extern "C" {
    pub fn BNGetStructureMemberByName(
        s: *mut BNStructure,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNGetStructureMemberAtOffset(
        s: *mut BNStructure,
        offset: i64,
        idx: *mut usize,
    ) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNFreeStructureMember(s: *mut BNStructureMember);
}
extern "C" {
    pub fn BNGetStructureMembers(s: *mut BNStructure, count: *mut usize) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNFreeStructureMemberList(members: *mut BNStructureMember, count: usize);
}
extern "C" {
    pub fn BNGetStructureMembersIncludingInherited(
        s: *mut BNStructure,
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut BNInheritedStructureMember;
}
extern "C" {
    pub fn BNFreeInheritedStructureMemberList(
        members: *mut BNInheritedStructureMember,
        count: usize,
    );
}
extern "C" {
    pub fn BNGetMemberIncludingInheritedAtOffset(
        s: *mut BNStructure,
        view: *mut BNBinaryView,
        offset: i64,
    ) -> *mut BNInheritedStructureMember;
}
extern "C" {
    pub fn BNFreeInheritedStructureMember(members: *mut BNInheritedStructureMember);
}
extern "C" {
    pub fn BNGetStructureWidth(s: *mut BNStructure) -> u64;
}
extern "C" {
    pub fn BNGetStructurePointerOffset(s: *mut BNStructure) -> i64;
}
extern "C" {
    pub fn BNGetStructureAlignment(s: *mut BNStructure) -> usize;
}
extern "C" {
    pub fn BNIsStructurePacked(s: *mut BNStructure) -> bool;
}
extern "C" {
    pub fn BNIsStructureUnion(s: *mut BNStructure) -> bool;
}
extern "C" {
    pub fn BNStructurePropagatesDataVariableReferences(s: *mut BNStructure) -> bool;
}
extern "C" {
    pub fn BNGetStructureType(s: *mut BNStructure) -> BNStructureVariant;
}
extern "C" {
    pub fn BNGetBaseStructuresForStructure(
        s: *mut BNStructure,
        count: *mut usize,
    ) -> *mut BNBaseStructure;
}
extern "C" {
    pub fn BNFreeBaseStructureList(bases: *mut BNBaseStructure, count: usize);
}
extern "C" {
    pub fn BNStructureWithReplacedStructure(
        s: *mut BNStructure,
        from: *mut BNStructure,
        to: *mut BNStructure,
    ) -> *mut BNStructure;
}
extern "C" {
    pub fn BNStructureWithReplacedEnumeration(
        s: *mut BNStructure,
        from: *mut BNEnumeration,
        to: *mut BNEnumeration,
    ) -> *mut BNStructure;
}
extern "C" {
    pub fn BNStructureWithReplacedNamedTypeReference(
        s: *mut BNStructure,
        from: *mut BNNamedTypeReference,
        to: *mut BNNamedTypeReference,
    ) -> *mut BNStructure;
}
extern "C" {
    pub fn BNGetStructureBuilderMemberByName(
        s: *mut BNStructureBuilder,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNGetStructureBuilderMemberAtOffset(
        s: *mut BNStructureBuilder,
        offset: i64,
        idx: *mut usize,
    ) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNGetStructureBuilderMembers(
        s: *mut BNStructureBuilder,
        count: *mut usize,
    ) -> *mut BNStructureMember;
}
extern "C" {
    pub fn BNGetStructureBuilderWidth(s: *mut BNStructureBuilder) -> u64;
}
extern "C" {
    pub fn BNSetStructureBuilderWidth(s: *mut BNStructureBuilder, width: u64);
}
extern "C" {
    pub fn BNGetStructureBuilderPointerOffset(s: *mut BNStructureBuilder) -> i64;
}
extern "C" {
    pub fn BNSetStructureBuilderPointerOffset(s: *mut BNStructureBuilder, offset: i64);
}
extern "C" {
    pub fn BNGetStructureBuilderAlignment(s: *mut BNStructureBuilder) -> usize;
}
extern "C" {
    pub fn BNSetStructureBuilderAlignment(s: *mut BNStructureBuilder, align: usize);
}
extern "C" {
    pub fn BNIsStructureBuilderPacked(s: *mut BNStructureBuilder) -> bool;
}
extern "C" {
    pub fn BNSetStructureBuilderPacked(s: *mut BNStructureBuilder, packed: bool);
}
extern "C" {
    pub fn BNIsStructureBuilderUnion(s: *mut BNStructureBuilder) -> bool;
}
extern "C" {
    pub fn BNSetStructureBuilderType(s: *mut BNStructureBuilder, type_: BNStructureVariant);
}
extern "C" {
    pub fn BNStructureBuilderPropagatesDataVariableReferences(s: *mut BNStructureBuilder) -> bool;
}
extern "C" {
    pub fn BNSetStructureBuilderPropagatesDataVariableReferences(
        s: *mut BNStructureBuilder,
        value: bool,
    );
}
extern "C" {
    pub fn BNGetStructureBuilderType(s: *mut BNStructureBuilder) -> BNStructureVariant;
}
extern "C" {
    pub fn BNGetBaseStructuresForStructureBuilder(
        s: *mut BNStructureBuilder,
        count: *mut usize,
    ) -> *mut BNBaseStructure;
}
extern "C" {
    pub fn BNSetBaseStructuresForStructureBuilder(
        s: *mut BNStructureBuilder,
        bases: *mut BNBaseStructure,
        count: usize,
    );
}
extern "C" {
    pub fn BNAddStructureBuilderMember(
        s: *mut BNStructureBuilder,
        type_: *const BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
        access: BNMemberAccess,
        scope: BNMemberScope,
    );
}
extern "C" {
    pub fn BNAddStructureBuilderMemberAtOffset(
        s: *mut BNStructureBuilder,
        type_: *const BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
        offset: u64,
        overwriteExisting: bool,
        access: BNMemberAccess,
        scope: BNMemberScope,
    );
}
extern "C" {
    pub fn BNRemoveStructureBuilderMember(s: *mut BNStructureBuilder, idx: usize);
}
extern "C" {
    pub fn BNReplaceStructureBuilderMember(
        s: *mut BNStructureBuilder,
        idx: usize,
        type_: *const BNTypeWithConfidence,
        name: *const ::std::os::raw::c_char,
        overwriteExisting: bool,
    );
}
extern "C" {
    pub fn BNCreateEnumerationBuilder() -> *mut BNEnumerationBuilder;
}
extern "C" {
    pub fn BNCreateEnumerationBuilderFromEnumeration(
        e: *mut BNEnumeration,
    ) -> *mut BNEnumerationBuilder;
}
extern "C" {
    pub fn BNDuplicateEnumerationBuilder(e: *mut BNEnumerationBuilder)
        -> *mut BNEnumerationBuilder;
}
extern "C" {
    pub fn BNFinalizeEnumerationBuilder(e: *mut BNEnumerationBuilder) -> *mut BNEnumeration;
}
extern "C" {
    pub fn BNNewEnumerationReference(e: *mut BNEnumeration) -> *mut BNEnumeration;
}
extern "C" {
    pub fn BNFreeEnumeration(e: *mut BNEnumeration);
}
extern "C" {
    pub fn BNFreeEnumerationBuilder(e: *mut BNEnumerationBuilder);
}
extern "C" {
    pub fn BNGetEnumerationMembers(
        e: *mut BNEnumeration,
        count: *mut usize,
    ) -> *mut BNEnumerationMember;
}
extern "C" {
    pub fn BNGetEnumerationTokensForValue(
        e: *mut BNEnumeration,
        value: u64,
        width: u64,
        count: *mut usize,
        type_: *mut BNType,
    ) -> *mut BNInstructionTextToken;
}
extern "C" {
    pub fn BNFreeEnumerationMemberList(members: *mut BNEnumerationMember, count: usize);
}
extern "C" {
    pub fn BNGetEnumerationBuilderMembers(
        e: *mut BNEnumerationBuilder,
        count: *mut usize,
    ) -> *mut BNEnumerationMember;
}
extern "C" {
    pub fn BNAddEnumerationBuilderMember(
        e: *mut BNEnumerationBuilder,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddEnumerationBuilderMemberWithValue(
        e: *mut BNEnumerationBuilder,
        name: *const ::std::os::raw::c_char,
        value: u64,
    );
}
extern "C" {
    pub fn BNRemoveEnumerationBuilderMember(e: *mut BNEnumerationBuilder, idx: usize);
}
extern "C" {
    pub fn BNReplaceEnumerationBuilderMember(
        e: *mut BNEnumerationBuilder,
        idx: usize,
        name: *const ::std::os::raw::c_char,
        value: u64,
    );
}
extern "C" {
    pub fn BNCreateStructureFromOffsetAccess(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
        newMember: *mut bool,
    ) -> *mut BNStructure;
}
extern "C" {
    pub fn BNCreateStructureMemberFromAccess(
        view: *mut BNBinaryView,
        name: *mut BNQualifiedName,
        offset: u64,
    ) -> BNTypeWithConfidence;
}
extern "C" {
    pub fn BNAddExpressionParserMagicValue(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        value: u64,
    );
}
extern "C" {
    pub fn BNRemoveExpressionParserMagicValue(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddExpressionParserMagicValues(
        view: *mut BNBinaryView,
        names: *mut *const ::std::os::raw::c_char,
        values: *mut u64,
        count: usize,
    );
}
extern "C" {
    pub fn BNRemoveExpressionParserMagicValues(
        view: *mut BNBinaryView,
        names: *mut *const ::std::os::raw::c_char,
        count: usize,
    );
}
extern "C" {
    pub fn BNGetExpressionParserMagicValue(
        view: *mut BNBinaryView,
        name: *const ::std::os::raw::c_char,
        value: *mut u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetFunctionParentComponents(
        view: *mut BNBinaryView,
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut *mut BNComponent;
}
extern "C" {
    pub fn BNGetDataVariableParentComponents(
        view: *mut BNBinaryView,
        dataVariable: u64,
        count: *mut usize,
    ) -> *mut *mut BNComponent;
}
extern "C" {
    pub fn BNCheckForStringAnnotationType(
        view: *mut BNBinaryView,
        addr: u64,
        value: *mut *mut ::std::os::raw::c_char,
        strType: *mut BNStringType,
        allowShortStrings: bool,
        allowLargeStrings: bool,
        childWidth: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNLoadFilename(
        filename: *const ::std::os::raw::c_char,
        updateAnalysis: bool,
        progress: ::std::option::Option<unsafe extern "C" fn(arg1: usize, arg2: usize) -> bool>,
        options: *const BNMetadata,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNLoadBinaryView(
        view: *mut BNBinaryView,
        updateAnalysis: bool,
        progress: ::std::option::Option<unsafe extern "C" fn(arg1: usize, arg2: usize) -> bool>,
        options: *const BNMetadata,
        isDatabase: bool,
    ) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNPreprocessSource(
        source: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        output: *mut *mut ::std::os::raw::c_char,
        errors: *mut *mut ::std::os::raw::c_char,
        includeDirs: *mut *const ::std::os::raw::c_char,
        includeDirCount: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNParseTypesFromSource(
        platform: *mut BNPlatform,
        source: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        result: *mut BNTypeParserResult,
        errors: *mut *mut ::std::os::raw::c_char,
        includeDirs: *mut *const ::std::os::raw::c_char,
        includeDirCount: usize,
        autoTypeSource: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNParseTypesFromSourceFile(
        platform: *mut BNPlatform,
        fileName: *const ::std::os::raw::c_char,
        result: *mut BNTypeParserResult,
        errors: *mut *mut ::std::os::raw::c_char,
        includeDirs: *mut *const ::std::os::raw::c_char,
        includeDirCount: usize,
        autoTypeSource: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNRegisterTypeParser(
        name: *const ::std::os::raw::c_char,
        callbacks: *mut BNTypeParserCallbacks,
    ) -> *mut BNTypeParser;
}
extern "C" {
    pub fn BNGetTypeParserList(count: *mut usize) -> *mut *mut BNTypeParser;
}
extern "C" {
    pub fn BNFreeTypeParserList(parsers: *mut *mut BNTypeParser);
}
extern "C" {
    pub fn BNGetTypeParserByName(name: *const ::std::os::raw::c_char) -> *mut BNTypeParser;
}
extern "C" {
    pub fn BNGetDefaultTypeParser() -> *mut BNTypeParser;
}
extern "C" {
    pub fn BNGetTypeParserName(parser: *mut BNTypeParser) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypeParserOptionText(
        parser: *mut BNTypeParser,
        option: BNTypeParserOption,
        value: *const ::std::os::raw::c_char,
        result: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNTypeParserPreprocessSource(
        parser: *mut BNTypeParser,
        source: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        platform: *mut BNPlatform,
        existingTypes: *const BNQualifiedNameTypeAndId,
        existingTypeCount: usize,
        options: *const *const ::std::os::raw::c_char,
        optionCount: usize,
        includeDirs: *const *const ::std::os::raw::c_char,
        includeDirCount: usize,
        output: *mut *mut ::std::os::raw::c_char,
        errors: *mut *mut BNTypeParserError,
        errorCount: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNTypeParserParseTypesFromSource(
        parser: *mut BNTypeParser,
        source: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        platform: *mut BNPlatform,
        existingTypes: *const BNQualifiedNameTypeAndId,
        existingTypeCount: usize,
        options: *const *const ::std::os::raw::c_char,
        optionCount: usize,
        includeDirs: *const *const ::std::os::raw::c_char,
        includeDirCount: usize,
        autoTypeSource: *const ::std::os::raw::c_char,
        result: *mut BNTypeParserResult,
        errors: *mut *mut BNTypeParserError,
        errorCount: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNTypeParserParseTypeString(
        parser: *mut BNTypeParser,
        source: *const ::std::os::raw::c_char,
        platform: *mut BNPlatform,
        existingTypes: *const BNQualifiedNameTypeAndId,
        existingTypeCount: usize,
        result: *mut BNQualifiedNameAndType,
        errors: *mut *mut BNTypeParserError,
        errorCount: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNParseTypeParserOptionsText(
        optionsText: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFormatTypeParserParseErrors(
        errors: *mut BNTypeParserError,
        count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRegisterTypePrinter(
        name: *const ::std::os::raw::c_char,
        callbacks: *mut BNTypePrinterCallbacks,
    ) -> *mut BNTypePrinter;
}
extern "C" {
    pub fn BNGetTypePrinterList(count: *mut usize) -> *mut *mut BNTypePrinter;
}
extern "C" {
    pub fn BNFreeTypePrinterList(printers: *mut *mut BNTypePrinter);
}
extern "C" {
    pub fn BNGetTypePrinterByName(name: *const ::std::os::raw::c_char) -> *mut BNTypePrinter;
}
extern "C" {
    pub fn BNGetTypePrinterName(printer: *mut BNTypePrinter) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetTypePrinterTypeTokens(
        printer: *mut BNTypePrinter,
        type_: *mut BNType,
        platform: *mut BNPlatform,
        name: *mut BNQualifiedName,
        baseConfidence: u8,
        escaping: BNTokenEscapingType,
        result: *mut *mut BNInstructionTextToken,
        resultCount: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetTypePrinterTypeTokensBeforeName(
        printer: *mut BNTypePrinter,
        type_: *mut BNType,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        parentType: *mut BNType,
        escaping: BNTokenEscapingType,
        result: *mut *mut BNInstructionTextToken,
        resultCount: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetTypePrinterTypeTokensAfterName(
        printer: *mut BNTypePrinter,
        type_: *mut BNType,
        platform: *mut BNPlatform,
        baseConfidence: u8,
        parentType: *mut BNType,
        escaping: BNTokenEscapingType,
        result: *mut *mut BNInstructionTextToken,
        resultCount: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetTypePrinterTypeString(
        printer: *mut BNTypePrinter,
        type_: *mut BNType,
        platform: *mut BNPlatform,
        name: *mut BNQualifiedName,
        escaping: BNTokenEscapingType,
        result: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetTypePrinterTypeStringBeforeName(
        printer: *mut BNTypePrinter,
        type_: *mut BNType,
        platform: *mut BNPlatform,
        escaping: BNTokenEscapingType,
        result: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetTypePrinterTypeStringAfterName(
        printer: *mut BNTypePrinter,
        type_: *mut BNType,
        platform: *mut BNPlatform,
        escaping: BNTokenEscapingType,
        result: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetTypePrinterTypeLines(
        printer: *mut BNTypePrinter,
        type_: *mut BNType,
        data: *mut BNBinaryView,
        name: *mut BNQualifiedName,
        lineWidth: ::std::os::raw::c_int,
        collapsed: bool,
        escaping: BNTokenEscapingType,
        result: *mut *mut BNTypeDefinitionLine,
        resultCount: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn BNTypePrinterPrintAllTypes(
        printer: *mut BNTypePrinter,
        names: *mut BNQualifiedName,
        types: *mut *mut BNType,
        typeCount: usize,
        data: *mut BNBinaryView,
        lineWidth: ::std::os::raw::c_int,
        escaping: BNTokenEscapingType,
        result: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNTypePrinterDefaultPrintAllTypes(
        printer: *mut BNTypePrinter,
        names: *mut BNQualifiedName,
        types: *mut *mut BNType,
        typeCount: usize,
        data: *mut BNBinaryView,
        lineWidth: ::std::os::raw::c_int,
        escaping: BNTokenEscapingType,
        result: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeTypeParserResult(result: *mut BNTypeParserResult);
}
extern "C" {
    pub fn BNFreeTypeParserErrors(errors: *mut BNTypeParserError, count: usize);
}
extern "C" {
    pub fn BNGetUpdateChannels(
        count: *mut usize,
        errors: *mut *mut ::std::os::raw::c_char,
    ) -> *mut BNUpdateChannel;
}
extern "C" {
    pub fn BNFreeUpdateChannelList(list: *mut BNUpdateChannel, count: usize);
}
extern "C" {
    pub fn BNGetUpdateChannelVersions(
        channel: *const ::std::os::raw::c_char,
        count: *mut usize,
        errors: *mut *mut ::std::os::raw::c_char,
    ) -> *mut BNUpdateVersion;
}
extern "C" {
    pub fn BNFreeUpdateChannelVersionList(list: *mut BNUpdateVersion, count: usize);
}
extern "C" {
    pub fn BNAreUpdatesAvailable(
        channel: *const ::std::os::raw::c_char,
        expireTime: *mut u64,
        serverTime: *mut u64,
        errors: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNUpdateToVersion(
        channel: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
        errors: *mut *mut ::std::os::raw::c_char,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: u64,
                total: u64,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    ) -> BNUpdateResult;
}
extern "C" {
    pub fn BNUpdateToLatestVersion(
        channel: *const ::std::os::raw::c_char,
        errors: *mut *mut ::std::os::raw::c_char,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                progress: u64,
                total: u64,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    ) -> BNUpdateResult;
}
extern "C" {
    pub fn BNAreAutoUpdatesEnabled() -> bool;
}
extern "C" {
    pub fn BNSetAutoUpdatesEnabled(enabled: bool);
}
extern "C" {
    pub fn BNGetTimeSinceLastUpdateCheck() -> u64;
}
extern "C" {
    pub fn BNUpdatesChecked();
}
extern "C" {
    pub fn BNGetActiveUpdateChannel() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetActiveUpdateChannel(channel: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNIsUpdateInstallationPending() -> bool;
}
extern "C" {
    pub fn BNInstallPendingUpdate(errors: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNRegisterPluginCommand(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void, view: *mut BNBinaryView),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForAddress(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                addr: u64,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                addr: u64,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForRange(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                addr: u64,
                len: u64,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                addr: u64,
                len: u64,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForFunction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNFunction,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNFunction,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForLowLevelILFunction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNLowLevelILFunction,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNLowLevelILFunction,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForLowLevelILInstruction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNLowLevelILFunction,
                instr: usize,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNLowLevelILFunction,
                instr: usize,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForMediumLevelILFunction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNMediumLevelILFunction,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNMediumLevelILFunction,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForMediumLevelILInstruction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNMediumLevelILFunction,
                instr: usize,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNMediumLevelILFunction,
                instr: usize,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForHighLevelILFunction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNHighLevelILFunction,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNHighLevelILFunction,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNRegisterPluginCommandForHighLevelILInstruction(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        action: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNHighLevelILFunction,
                instr: usize,
            ),
        >,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                view: *mut BNBinaryView,
                func: *mut BNHighLevelILFunction,
                instr: usize,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNGetAllPluginCommands(count: *mut usize) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommands(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForAddress(
        view: *mut BNBinaryView,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForRange(
        view: *mut BNBinaryView,
        addr: u64,
        len: u64,
        count: *mut usize,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForFunction(
        view: *mut BNBinaryView,
        func: *mut BNFunction,
        count: *mut usize,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForLowLevelILFunction(
        view: *mut BNBinaryView,
        func: *mut BNLowLevelILFunction,
        count: *mut usize,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForLowLevelILInstruction(
        view: *mut BNBinaryView,
        func: *mut BNLowLevelILFunction,
        instr: usize,
        count: *mut usize,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForMediumLevelILFunction(
        view: *mut BNBinaryView,
        func: *mut BNMediumLevelILFunction,
        count: *mut usize,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForMediumLevelILInstruction(
        view: *mut BNBinaryView,
        func: *mut BNMediumLevelILFunction,
        instr: usize,
        count: *mut usize,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForHighLevelILFunction(
        view: *mut BNBinaryView,
        func: *mut BNHighLevelILFunction,
        count: *mut usize,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNGetValidPluginCommandsForHighLevelILInstruction(
        view: *mut BNBinaryView,
        func: *mut BNHighLevelILFunction,
        instr: usize,
        count: *mut usize,
    ) -> *mut BNPluginCommand;
}
extern "C" {
    pub fn BNFreePluginCommandList(commands: *mut BNPluginCommand);
}
extern "C" {
    pub fn BNCreateCallingConvention(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
        cc: *mut BNCustomCallingConvention,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNRegisterCallingConvention(arch: *mut BNArchitecture, cc: *mut BNCallingConvention);
}
extern "C" {
    pub fn BNNewCallingConventionReference(
        cc: *mut BNCallingConvention,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNFreeCallingConvention(cc: *mut BNCallingConvention);
}
extern "C" {
    pub fn BNGetArchitectureCallingConventions(
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut *mut BNCallingConvention;
}
extern "C" {
    pub fn BNFreeCallingConventionList(list: *mut *mut BNCallingConvention, count: usize);
}
extern "C" {
    pub fn BNGetArchitectureCallingConventionByName(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetCallingConventionArchitecture(cc: *mut BNCallingConvention) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetCallingConventionName(cc: *mut BNCallingConvention) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetCallerSavedRegisters(cc: *mut BNCallingConvention, count: *mut usize) -> *mut u32;
}
extern "C" {
    pub fn BNGetCalleeSavedRegisters(cc: *mut BNCallingConvention, count: *mut usize) -> *mut u32;
}
extern "C" {
    pub fn BNGetIntegerArgumentRegisters(
        cc: *mut BNCallingConvention,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetFloatArgumentRegisters(cc: *mut BNCallingConvention, count: *mut usize)
        -> *mut u32;
}
extern "C" {
    pub fn BNAreArgumentRegistersSharedIndex(cc: *mut BNCallingConvention) -> bool;
}
extern "C" {
    pub fn BNAreArgumentRegistersUsedForVarArgs(cc: *mut BNCallingConvention) -> bool;
}
extern "C" {
    pub fn BNIsStackReservedForArgumentRegisters(cc: *mut BNCallingConvention) -> bool;
}
extern "C" {
    pub fn BNIsStackAdjustedOnReturn(cc: *mut BNCallingConvention) -> bool;
}
extern "C" {
    pub fn BNIsEligibleForHeuristics(cc: *mut BNCallingConvention) -> bool;
}
extern "C" {
    pub fn BNGetIntegerReturnValueRegister(cc: *mut BNCallingConvention) -> u32;
}
extern "C" {
    pub fn BNGetHighIntegerReturnValueRegister(cc: *mut BNCallingConvention) -> u32;
}
extern "C" {
    pub fn BNGetFloatReturnValueRegister(cc: *mut BNCallingConvention) -> u32;
}
extern "C" {
    pub fn BNGetGlobalPointerRegister(cc: *mut BNCallingConvention) -> u32;
}
extern "C" {
    pub fn BNGetImplicitlyDefinedRegisters(
        cc: *mut BNCallingConvention,
        count: *mut usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn BNGetIncomingRegisterValue(
        cc: *mut BNCallingConvention,
        reg: u32,
        func: *mut BNFunction,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetIncomingFlagValue(
        cc: *mut BNCallingConvention,
        reg: u32,
        func: *mut BNFunction,
    ) -> BNRegisterValue;
}
extern "C" {
    pub fn BNGetVariablesForParametersDefaultIntArgs(
        cc: *mut BNCallingConvention,
        params: *const BNFunctionParameter,
        paramCount: usize,
        count: *mut usize,
    ) -> *mut BNVariable;
}
extern "C" {
    pub fn BNGetVariablesForParameters(
        cc: *mut BNCallingConvention,
        params: *const BNFunctionParameter,
        paramCount: usize,
        intArgs: *const u32,
        intArgCount: usize,
        count: *mut usize,
    ) -> *mut BNVariable;
}
extern "C" {
    pub fn BNGetParameterOrderingForVariables(
        cc: *mut BNCallingConvention,
        paramVars: *const BNVariable,
        paramTypes: *mut *const BNType,
        paramCount: usize,
        count: *mut usize,
    ) -> *mut BNVariable;
}
extern "C" {
    pub fn BNGetStackAdjustmentForVariables(
        cc: *mut BNCallingConvention,
        paramVars: *const BNVariable,
        paramTypes: *mut *const BNType,
        paramCount: usize,
    ) -> i64;
}
extern "C" {
    pub fn BNGetRegisterStackAdjustments(
        cc: *mut BNCallingConvention,
        returnRegs: *const u32,
        returnRegCount: usize,
        returnType: *mut BNType,
        params: *const BNVariable,
        paramCount: usize,
        types: *mut *const BNType,
        typeCount: usize,
        resultRegisters: *mut *mut u32,
        resultAdjustments: *mut *mut u32,
    ) -> usize;
}
extern "C" {
    pub fn BNGetIncomingVariableForParameterVariable(
        cc: *mut BNCallingConvention,
        var: *const BNVariable,
        func: *mut BNFunction,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetParameterVariableForIncomingVariable(
        cc: *mut BNCallingConvention,
        var: *const BNVariable,
        func: *mut BNFunction,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetDefaultIncomingVariableForParameterVariable(
        cc: *mut BNCallingConvention,
        var: *const BNVariable,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetDefaultParameterVariableForIncomingVariable(
        cc: *mut BNCallingConvention,
        var: *const BNVariable,
    ) -> BNVariable;
}
extern "C" {
    pub fn BNGetArchitectureDefaultCallingConvention(
        arch: *mut BNArchitecture,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetArchitectureCdeclCallingConvention(
        arch: *mut BNArchitecture,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetArchitectureStdcallCallingConvention(
        arch: *mut BNArchitecture,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetArchitectureFastcallCallingConvention(
        arch: *mut BNArchitecture,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNSetArchitectureDefaultCallingConvention(
        arch: *mut BNArchitecture,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNSetArchitectureCdeclCallingConvention(
        arch: *mut BNArchitecture,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNSetArchitectureStdcallCallingConvention(
        arch: *mut BNArchitecture,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNSetArchitectureFastcallCallingConvention(
        arch: *mut BNArchitecture,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNCreatePlatform(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNCreatePlatformWithTypes(
        arch: *mut BNArchitecture,
        name: *const ::std::os::raw::c_char,
        typeFile: *const ::std::os::raw::c_char,
        includeDirs: *mut *const ::std::os::raw::c_char,
        includeDirCount: usize,
    ) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNRegisterPlatform(os: *const ::std::os::raw::c_char, platform: *mut BNPlatform);
}
extern "C" {
    pub fn BNNewPlatformReference(platform: *mut BNPlatform) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNFreePlatform(platform: *mut BNPlatform);
}
extern "C" {
    pub fn BNGetPlatformName(platform: *mut BNPlatform) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetPlatformArchitecture(platform: *mut BNPlatform) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNGetPlatformByName(name: *const ::std::os::raw::c_char) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNGetPlatformList(count: *mut usize) -> *mut *mut BNPlatform;
}
extern "C" {
    pub fn BNGetPlatformListByArchitecture(
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut *mut BNPlatform;
}
extern "C" {
    pub fn BNGetPlatformListByOS(
        os: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> *mut *mut BNPlatform;
}
extern "C" {
    pub fn BNGetPlatformListByOSAndArchitecture(
        os: *const ::std::os::raw::c_char,
        arch: *mut BNArchitecture,
        count: *mut usize,
    ) -> *mut *mut BNPlatform;
}
extern "C" {
    pub fn BNFreePlatformList(platform: *mut *mut BNPlatform, count: usize);
}
extern "C" {
    pub fn BNGetPlatformOSList(count: *mut usize) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreePlatformOSList(list: *mut *mut ::std::os::raw::c_char, count: usize);
}
extern "C" {
    pub fn BNGetPlatformDefaultCallingConvention(
        platform: *mut BNPlatform,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetPlatformCdeclCallingConvention(
        platform: *mut BNPlatform,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetPlatformStdcallCallingConvention(
        platform: *mut BNPlatform,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetPlatformFastcallCallingConvention(
        platform: *mut BNPlatform,
    ) -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetPlatformCallingConventions(
        platform: *mut BNPlatform,
        count: *mut usize,
    ) -> *mut *mut BNCallingConvention;
}
extern "C" {
    pub fn BNGetPlatformSystemCallConvention(platform: *mut BNPlatform)
        -> *mut BNCallingConvention;
}
extern "C" {
    pub fn BNRegisterPlatformCallingConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNRegisterPlatformDefaultCallingConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNRegisterPlatformCdeclCallingConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNRegisterPlatformStdcallCallingConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNRegisterPlatformFastcallCallingConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNSetPlatformSystemCallConvention(
        platform: *mut BNPlatform,
        cc: *mut BNCallingConvention,
    );
}
extern "C" {
    pub fn BNGetArchitectureStandalonePlatform(arch: *mut BNArchitecture) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNGetRelatedPlatform(
        platform: *mut BNPlatform,
        arch: *mut BNArchitecture,
    ) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNAddRelatedPlatform(
        platform: *mut BNPlatform,
        arch: *mut BNArchitecture,
        related: *mut BNPlatform,
    );
}
extern "C" {
    pub fn BNGetAssociatedPlatformByAddress(
        platform: *mut BNPlatform,
        addr: *mut u64,
    ) -> *mut BNPlatform;
}
extern "C" {
    pub fn BNGetPlatformTypes(
        platform: *mut BNPlatform,
        count: *mut usize,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNGetPlatformVariables(
        platform: *mut BNPlatform,
        count: *mut usize,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNGetPlatformFunctions(
        platform: *mut BNPlatform,
        count: *mut usize,
    ) -> *mut BNQualifiedNameAndType;
}
extern "C" {
    pub fn BNGetPlatformSystemCalls(
        platform: *mut BNPlatform,
        count: *mut usize,
    ) -> *mut BNSystemCallInfo;
}
extern "C" {
    pub fn BNFreeSystemCallList(syscalls: *mut BNSystemCallInfo, count: usize);
}
extern "C" {
    pub fn BNGetPlatformTypeByName(
        platform: *mut BNPlatform,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetPlatformVariableByName(
        platform: *mut BNPlatform,
        name: *mut BNQualifiedName,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetPlatformFunctionByName(
        platform: *mut BNPlatform,
        name: *mut BNQualifiedName,
        exactMatch: bool,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetPlatformSystemCallName(
        platform: *mut BNPlatform,
        number: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetPlatformSystemCallType(platform: *mut BNPlatform, number: u32) -> *mut BNType;
}
extern "C" {
    pub fn BNGetPlatformTypeLibraries(
        platform: *mut BNPlatform,
        count: *mut usize,
    ) -> *mut *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNGetPlatformTypeLibrariesByName(
        platform: *mut BNPlatform,
        depName: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> *mut *mut BNTypeLibrary;
}
extern "C" {
    pub fn BNDemangleMS(
        arch: *mut BNArchitecture,
        mangledName: *const ::std::os::raw::c_char,
        outType: *mut *mut BNType,
        outVarName: *mut *mut *mut ::std::os::raw::c_char,
        outVarNameElements: *mut usize,
        simplify: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNDemangleMSWithOptions(
        arch: *mut BNArchitecture,
        mangledName: *const ::std::os::raw::c_char,
        outType: *mut *mut BNType,
        outVarName: *mut *mut *mut ::std::os::raw::c_char,
        outVarNameElements: *mut usize,
        view: *const BNBinaryView,
    ) -> bool;
}
extern "C" {
    pub fn BNDemangleMSPlatform(
        platform: *mut BNPlatform,
        mangledName: *const ::std::os::raw::c_char,
        outType: *mut *mut BNType,
        outVarName: *mut *mut *mut ::std::os::raw::c_char,
        outVarNameElements: *mut usize,
        simplify: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNRegisterDownloadProvider(
        name: *const ::std::os::raw::c_char,
        callbacks: *mut BNDownloadProviderCallbacks,
    ) -> *mut BNDownloadProvider;
}
extern "C" {
    pub fn BNGetDownloadProviderList(count: *mut usize) -> *mut *mut BNDownloadProvider;
}
extern "C" {
    pub fn BNFreeDownloadProviderList(providers: *mut *mut BNDownloadProvider);
}
extern "C" {
    pub fn BNGetDownloadProviderByName(
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNDownloadProvider;
}
extern "C" {
    pub fn BNGetDownloadProviderName(
        provider: *mut BNDownloadProvider,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCreateDownloadProviderInstance(
        provider: *mut BNDownloadProvider,
    ) -> *mut BNDownloadInstance;
}
extern "C" {
    pub fn BNInitDownloadInstance(
        provider: *mut BNDownloadProvider,
        callbacks: *mut BNDownloadInstanceCallbacks,
    ) -> *mut BNDownloadInstance;
}
extern "C" {
    pub fn BNNewDownloadInstanceReference(
        instance: *mut BNDownloadInstance,
    ) -> *mut BNDownloadInstance;
}
extern "C" {
    pub fn BNFreeDownloadInstance(instance: *mut BNDownloadInstance);
}
extern "C" {
    pub fn BNFreeDownloadInstanceResponse(response: *mut BNDownloadInstanceResponse);
}
extern "C" {
    pub fn BNPerformDownloadRequest(
        instance: *mut BNDownloadInstance,
        url: *const ::std::os::raw::c_char,
        callbacks: *mut BNDownloadInstanceOutputCallbacks,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNPerformCustomRequest(
        instance: *mut BNDownloadInstance,
        method: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
        headerCount: u64,
        headerKeys: *const *const ::std::os::raw::c_char,
        headerValues: *const *const ::std::os::raw::c_char,
        response: *mut *mut BNDownloadInstanceResponse,
        callbacks: *mut BNDownloadInstanceInputOutputCallbacks,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNReadDataForDownloadInstance(
        instance: *mut BNDownloadInstance,
        data: *mut u8,
        len: u64,
    ) -> i64;
}
extern "C" {
    pub fn BNWriteDataForDownloadInstance(
        instance: *mut BNDownloadInstance,
        data: *mut u8,
        len: u64,
    ) -> u64;
}
extern "C" {
    pub fn BNNotifyProgressForDownloadInstance(
        instance: *mut BNDownloadInstance,
        progress: u64,
        total: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetErrorForDownloadInstance(
        instance: *mut BNDownloadInstance,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetErrorForDownloadInstance(
        instance: *mut BNDownloadInstance,
        error: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNRegisterWebsocketProvider(
        name: *const ::std::os::raw::c_char,
        callbacks: *mut BNWebsocketProviderCallbacks,
    ) -> *mut BNWebsocketProvider;
}
extern "C" {
    pub fn BNGetWebsocketProviderList(count: *mut usize) -> *mut *mut BNWebsocketProvider;
}
extern "C" {
    pub fn BNFreeWebsocketProviderList(providers: *mut *mut BNWebsocketProvider);
}
extern "C" {
    pub fn BNGetWebsocketProviderByName(
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNWebsocketProvider;
}
extern "C" {
    pub fn BNGetWebsocketProviderName(
        provider: *mut BNWebsocketProvider,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCreateWebsocketProviderClient(
        provider: *mut BNWebsocketProvider,
    ) -> *mut BNWebsocketClient;
}
extern "C" {
    pub fn BNInitWebsocketClient(
        provider: *mut BNWebsocketProvider,
        callbacks: *mut BNWebsocketClientCallbacks,
    ) -> *mut BNWebsocketClient;
}
extern "C" {
    pub fn BNNewWebsocketClientReference(client: *mut BNWebsocketClient) -> *mut BNWebsocketClient;
}
extern "C" {
    pub fn BNFreeWebsocketClient(client: *mut BNWebsocketClient);
}
extern "C" {
    pub fn BNConnectWebsocketClient(
        client: *mut BNWebsocketClient,
        url: *const ::std::os::raw::c_char,
        headerCount: u64,
        headerKeys: *const *const ::std::os::raw::c_char,
        headerValues: *const *const ::std::os::raw::c_char,
        callbacks: *mut BNWebsocketClientOutputCallbacks,
    ) -> bool;
}
extern "C" {
    pub fn BNNotifyWebsocketClientConnect(client: *mut BNWebsocketClient) -> bool;
}
extern "C" {
    pub fn BNNotifyWebsocketClientDisconnect(client: *mut BNWebsocketClient);
}
extern "C" {
    pub fn BNNotifyWebsocketClientError(
        client: *mut BNWebsocketClient,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNNotifyWebsocketClientReadData(
        client: *mut BNWebsocketClient,
        data: *mut u8,
        len: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNWriteWebsocketClientData(
        client: *mut BNWebsocketClient,
        data: *const u8,
        len: u64,
    ) -> u64;
}
extern "C" {
    pub fn BNDisconnectWebsocketClient(client: *mut BNWebsocketClient) -> bool;
}
extern "C" {
    pub fn BNRegisterScriptingProvider(
        name: *const ::std::os::raw::c_char,
        apiName: *const ::std::os::raw::c_char,
        callbacks: *mut BNScriptingProviderCallbacks,
    ) -> *mut BNScriptingProvider;
}
extern "C" {
    pub fn BNGetScriptingProviderList(count: *mut usize) -> *mut *mut BNScriptingProvider;
}
extern "C" {
    pub fn BNFreeScriptingProviderList(providers: *mut *mut BNScriptingProvider);
}
extern "C" {
    pub fn BNGetScriptingProviderByName(
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNScriptingProvider;
}
extern "C" {
    pub fn BNGetScriptingProviderByAPIName(
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNScriptingProvider;
}
extern "C" {
    pub fn BNGetScriptingProviderName(
        provider: *mut BNScriptingProvider,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetScriptingProviderAPIName(
        provider: *mut BNScriptingProvider,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCreateScriptingProviderInstance(
        provider: *mut BNScriptingProvider,
    ) -> *mut BNScriptingInstance;
}
extern "C" {
    pub fn BNLoadScriptingProviderModule(
        provider: *mut BNScriptingProvider,
        repository: *const ::std::os::raw::c_char,
        module: *const ::std::os::raw::c_char,
        force: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNInstallScriptingProviderModules(
        provider: *mut BNScriptingProvider,
        modules: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNInitScriptingInstance(
        provider: *mut BNScriptingProvider,
        callbacks: *mut BNScriptingInstanceCallbacks,
    ) -> *mut BNScriptingInstance;
}
extern "C" {
    pub fn BNNewScriptingInstanceReference(
        instance: *mut BNScriptingInstance,
    ) -> *mut BNScriptingInstance;
}
extern "C" {
    pub fn BNFreeScriptingInstance(instance: *mut BNScriptingInstance);
}
extern "C" {
    pub fn BNNotifyOutputForScriptingInstance(
        instance: *mut BNScriptingInstance,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNNotifyWarningForScriptingInstance(
        instance: *mut BNScriptingInstance,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNNotifyErrorForScriptingInstance(
        instance: *mut BNScriptingInstance,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNNotifyInputReadyStateForScriptingInstance(
        instance: *mut BNScriptingInstance,
        state: BNScriptingProviderInputReadyState,
    );
}
extern "C" {
    pub fn BNRegisterScriptingInstanceOutputListener(
        instance: *mut BNScriptingInstance,
        callbacks: *mut BNScriptingOutputListener,
    );
}
extern "C" {
    pub fn BNUnregisterScriptingInstanceOutputListener(
        instance: *mut BNScriptingInstance,
        callbacks: *mut BNScriptingOutputListener,
    );
}
extern "C" {
    pub fn BNGetScriptingInstanceDelimiters(
        instance: *mut BNScriptingInstance,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSetScriptingInstanceDelimiters(
        instance: *mut BNScriptingInstance,
        delimiters: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetScriptingInstanceInputReadyState(
        instance: *mut BNScriptingInstance,
    ) -> BNScriptingProviderInputReadyState;
}
extern "C" {
    pub fn BNExecuteScriptInput(
        instance: *mut BNScriptingInstance,
        input: *const ::std::os::raw::c_char,
    ) -> BNScriptingProviderExecuteResult;
}
extern "C" {
    pub fn BNExecuteScriptInputFromFilename(
        instance: *mut BNScriptingInstance,
        filename: *const ::std::os::raw::c_char,
    ) -> BNScriptingProviderExecuteResult;
}
extern "C" {
    pub fn BNCancelScriptInput(instance: *mut BNScriptingInstance);
}
extern "C" {
    pub fn BNScriptingInstanceReleaseBinaryView(
        instance: *mut BNScriptingInstance,
        view: *mut BNBinaryView,
    );
}
extern "C" {
    pub fn BNSetScriptingInstanceCurrentBinaryView(
        instance: *mut BNScriptingInstance,
        view: *mut BNBinaryView,
    );
}
extern "C" {
    pub fn BNSetScriptingInstanceCurrentFunction(
        instance: *mut BNScriptingInstance,
        func: *mut BNFunction,
    );
}
extern "C" {
    pub fn BNSetScriptingInstanceCurrentBasicBlock(
        instance: *mut BNScriptingInstance,
        block: *mut BNBasicBlock,
    );
}
extern "C" {
    pub fn BNSetScriptingInstanceCurrentAddress(instance: *mut BNScriptingInstance, addr: u64);
}
extern "C" {
    pub fn BNSetScriptingInstanceCurrentSelection(
        instance: *mut BNScriptingInstance,
        begin: u64,
        end: u64,
    );
}
extern "C" {
    pub fn BNScriptingInstanceCompleteInput(
        instance: *mut BNScriptingInstance,
        text: *const ::std::os::raw::c_char,
        state: u64,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNStopScriptingInstance(instance: *mut BNScriptingInstance);
}
extern "C" {
    pub fn BNRegisterMainThread(callbacks: *mut BNMainThreadCallbacks);
}
extern "C" {
    pub fn BNNewMainThreadActionReference(
        action: *mut BNMainThreadAction,
    ) -> *mut BNMainThreadAction;
}
extern "C" {
    pub fn BNFreeMainThreadAction(action: *mut BNMainThreadAction);
}
extern "C" {
    pub fn BNExecuteMainThreadAction(action: *mut BNMainThreadAction);
}
extern "C" {
    pub fn BNIsMainThreadActionDone(action: *mut BNMainThreadAction) -> bool;
}
extern "C" {
    pub fn BNWaitForMainThreadAction(action: *mut BNMainThreadAction);
}
extern "C" {
    pub fn BNExecuteOnMainThread(
        ctxt: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    ) -> *mut BNMainThreadAction;
}
extern "C" {
    pub fn BNExecuteOnMainThreadAndWait(
        ctxt: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn BNIsMainThread() -> bool;
}
extern "C" {
    pub fn BNWorkerEnqueue(
        ctxt: *mut ::std::os::raw::c_void,
        action: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn BNWorkerEnqueueNamed(
        ctxt: *mut ::std::os::raw::c_void,
        action: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNWorkerPriorityEnqueue(
        ctxt: *mut ::std::os::raw::c_void,
        action: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn BNWorkerPriorityEnqueueNamed(
        ctxt: *mut ::std::os::raw::c_void,
        action: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNWorkerInteractiveEnqueue(
        ctxt: *mut ::std::os::raw::c_void,
        action: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn BNWorkerInteractiveEnqueueNamed(
        ctxt: *mut ::std::os::raw::c_void,
        action: ::std::option::Option<unsafe extern "C" fn(ctxt: *mut ::std::os::raw::c_void)>,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNGetWorkerThreadCount() -> usize;
}
extern "C" {
    pub fn BNSetWorkerThreadCount(count: usize);
}
extern "C" {
    pub fn BNBeginBackgroundTask(
        initialText: *const ::std::os::raw::c_char,
        canCancel: bool,
    ) -> *mut BNBackgroundTask;
}
extern "C" {
    pub fn BNFinishBackgroundTask(task: *mut BNBackgroundTask);
}
extern "C" {
    pub fn BNSetBackgroundTaskProgressText(
        task: *mut BNBackgroundTask,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNIsBackgroundTaskCancelled(task: *mut BNBackgroundTask) -> bool;
}
extern "C" {
    pub fn BNGetRunningBackgroundTasks(count: *mut usize) -> *mut *mut BNBackgroundTask;
}
extern "C" {
    pub fn BNNewBackgroundTaskReference(task: *mut BNBackgroundTask) -> *mut BNBackgroundTask;
}
extern "C" {
    pub fn BNFreeBackgroundTask(task: *mut BNBackgroundTask);
}
extern "C" {
    pub fn BNFreeBackgroundTaskList(tasks: *mut *mut BNBackgroundTask, count: usize);
}
extern "C" {
    pub fn BNGetBackgroundTaskProgressText(
        task: *mut BNBackgroundTask,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCanCancelBackgroundTask(task: *mut BNBackgroundTask) -> bool;
}
extern "C" {
    pub fn BNCancelBackgroundTask(task: *mut BNBackgroundTask);
}
extern "C" {
    pub fn BNIsBackgroundTaskFinished(task: *mut BNBackgroundTask) -> bool;
}
extern "C" {
    pub fn BNRegisterInteractionHandler(callbacks: *mut BNInteractionHandlerCallbacks);
}
extern "C" {
    pub fn BNMarkdownToHTML(contents: *const ::std::os::raw::c_char)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNShowPlainTextReport(
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNShowMarkdownReport(
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
        plaintext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNShowHTMLReport(
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
        plaintext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNShowGraphReport(
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        graph: *mut BNFlowGraph,
    );
}
extern "C" {
    pub fn BNShowReportCollection(
        title: *const ::std::os::raw::c_char,
        reports: *mut BNReportCollection,
    );
}
extern "C" {
    pub fn BNGetTextLineInput(
        result: *mut *mut ::std::os::raw::c_char,
        prompt: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetIntegerInput(
        result: *mut i64,
        prompt: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetAddressInput(
        result: *mut u64,
        prompt: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        currentAddr: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNGetChoiceInput(
        result: *mut usize,
        prompt: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        choices: *mut *const ::std::os::raw::c_char,
        count: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetOpenFileNameInput(
        result: *mut *mut ::std::os::raw::c_char,
        prompt: *const ::std::os::raw::c_char,
        ext: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetSaveFileNameInput(
        result: *mut *mut ::std::os::raw::c_char,
        prompt: *const ::std::os::raw::c_char,
        ext: *const ::std::os::raw::c_char,
        defaultName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetDirectoryNameInput(
        result: *mut *mut ::std::os::raw::c_char,
        prompt: *const ::std::os::raw::c_char,
        defaultName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetFormInput(
        fields: *mut BNFormInputField,
        count: usize,
        title: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeFormInputResults(fields: *mut BNFormInputField, count: usize);
}
extern "C" {
    pub fn BNShowMessageBox(
        title: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        buttons: BNMessageBoxButtonSet,
        icon: BNMessageBoxIcon,
    ) -> BNMessageBoxButtonResult;
}
extern "C" {
    pub fn BNOpenUrl(url: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn BNRunProgressDialog(
        title: *const ::std::os::raw::c_char,
        canCancel: bool,
        task: ::std::option::Option<
            unsafe extern "C" fn(
                taskCtxt: *mut ::std::os::raw::c_void,
                progress: ::std::option::Option<
                    unsafe extern "C" fn(
                        progressCtxt: *mut ::std::os::raw::c_void,
                        cur: usize,
                        max: usize,
                    ) -> bool,
                >,
                progressCtxt: *mut ::std::os::raw::c_void,
            ),
        >,
        taskCtxt: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn BNCreateReportCollection() -> *mut BNReportCollection;
}
extern "C" {
    pub fn BNNewReportCollectionReference(
        reports: *mut BNReportCollection,
    ) -> *mut BNReportCollection;
}
extern "C" {
    pub fn BNFreeReportCollection(reports: *mut BNReportCollection);
}
extern "C" {
    pub fn BNGetReportCollectionCount(reports: *mut BNReportCollection) -> usize;
}
extern "C" {
    pub fn BNGetReportType(reports: *mut BNReportCollection, i: usize) -> BNReportType;
}
extern "C" {
    pub fn BNGetReportView(reports: *mut BNReportCollection, i: usize) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNGetReportTitle(
        reports: *mut BNReportCollection,
        i: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetReportContents(
        reports: *mut BNReportCollection,
        i: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetReportPlainText(
        reports: *mut BNReportCollection,
        i: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetReportFlowGraph(reports: *mut BNReportCollection, i: usize) -> *mut BNFlowGraph;
}
extern "C" {
    pub fn BNAddPlainTextReportToCollection(
        reports: *mut BNReportCollection,
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddMarkdownReportToCollection(
        reports: *mut BNReportCollection,
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
        plaintext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddHTMLReportToCollection(
        reports: *mut BNReportCollection,
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
        plaintext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNAddGraphReportToCollection(
        reports: *mut BNReportCollection,
        view: *mut BNBinaryView,
        title: *const ::std::os::raw::c_char,
        graph: *mut BNFlowGraph,
    );
}
extern "C" {
    pub fn BNUpdateReportFlowGraph(
        reports: *mut BNReportCollection,
        i: usize,
        graph: *mut BNFlowGraph,
    );
}
extern "C" {
    pub fn BNIsGNU3MangledString(mangledName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn BNDemangleGNU3(
        arch: *mut BNArchitecture,
        mangledName: *const ::std::os::raw::c_char,
        outType: *mut *mut BNType,
        outVarName: *mut *mut *mut ::std::os::raw::c_char,
        outVarNameElements: *mut usize,
        simplify: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNDemangleGNU3WithOptions(
        arch: *mut BNArchitecture,
        mangledName: *const ::std::os::raw::c_char,
        outType: *mut *mut BNType,
        outVarName: *mut *mut *mut ::std::os::raw::c_char,
        outVarNameElements: *mut usize,
        view: *const BNBinaryView,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeDemangledName(name: *mut *mut *mut ::std::os::raw::c_char, nameElements: usize);
}
extern "C" {
    pub fn BNPluginGetApis(
        p: *mut BNRepoPlugin,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetAuthor(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetDescription(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetLicense(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetLicenseText(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetLongdescription(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetMinimumVersion(p: *mut BNRepoPlugin) -> u64;
}
extern "C" {
    pub fn BNPluginGetName(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetProjectUrl(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetPackageUrl(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetAuthorUrl(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetVersion(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetCommit(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreePluginTypes(r: *mut BNPluginType);
}
extern "C" {
    pub fn BNNewPluginReference(r: *mut BNRepoPlugin) -> *mut BNRepoPlugin;
}
extern "C" {
    pub fn BNFreePlugin(plugin: *mut BNRepoPlugin);
}
extern "C" {
    pub fn BNPluginGetPath(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetSubdir(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetDependencies(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginIsInstalled(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsEnabled(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginGetPluginStatus(p: *mut BNRepoPlugin) -> BNPluginStatus;
}
extern "C" {
    pub fn BNPluginGetPluginTypes(p: *mut BNRepoPlugin, count: *mut usize) -> *mut BNPluginType;
}
extern "C" {
    pub fn BNPluginEnable(p: *mut BNRepoPlugin, force: bool) -> bool;
}
extern "C" {
    pub fn BNPluginDisable(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginInstall(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginInstallDependencies(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginUninstall(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginUpdate(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginGetInstallInstructions(
        p: *mut BNRepoPlugin,
        platform: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetPlatforms(
        p: *mut BNRepoPlugin,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreePluginPlatforms(platforms: *mut *mut ::std::os::raw::c_char, count: usize);
}
extern "C" {
    pub fn BNPluginGetRepository(p: *mut BNRepoPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginIsBeingDeleted(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsBeingUpdated(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsRunning(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsUpdatePending(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsDisablePending(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsDeletePending(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginIsUpdateAvailable(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginAreDependenciesBeingInstalled(p: *mut BNRepoPlugin) -> bool;
}
extern "C" {
    pub fn BNPluginGetProjectData(p: *mut BNRepoPlugin) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNPluginGetLastUpdate(p: *mut BNRepoPlugin) -> u64;
}
extern "C" {
    pub fn BNNewRepositoryReference(r: *mut BNRepository) -> *mut BNRepository;
}
extern "C" {
    pub fn BNFreeRepository(r: *mut BNRepository);
}
extern "C" {
    pub fn BNRepositoryGetUrl(r: *mut BNRepository) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRepositoryGetRepoPath(r: *mut BNRepository) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRepositoryGetPlugins(
        r: *mut BNRepository,
        count: *mut usize,
    ) -> *mut *mut BNRepoPlugin;
}
extern "C" {
    pub fn BNFreeRepositoryPluginList(r: *mut *mut BNRepoPlugin);
}
extern "C" {
    pub fn BNRepositoryFreePluginDirectoryList(
        list: *mut *mut ::std::os::raw::c_char,
        count: usize,
    );
}
extern "C" {
    pub fn BNRepositoryGetPluginByPath(
        r: *mut BNRepository,
        pluginPath: *const ::std::os::raw::c_char,
    ) -> *mut BNRepoPlugin;
}
extern "C" {
    pub fn BNRepositoryGetPluginsPath(r: *mut BNRepository) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNCreateRepositoryManager(
        enabledPluginsPath: *const ::std::os::raw::c_char,
    ) -> *mut BNRepositoryManager;
}
extern "C" {
    pub fn BNNewRepositoryManagerReference(r: *mut BNRepositoryManager)
        -> *mut BNRepositoryManager;
}
extern "C" {
    pub fn BNFreeRepositoryManager(r: *mut BNRepositoryManager);
}
extern "C" {
    pub fn BNRepositoryManagerCheckForUpdates(r: *mut BNRepositoryManager) -> bool;
}
extern "C" {
    pub fn BNRepositoryManagerGetRepositories(
        r: *mut BNRepositoryManager,
        count: *mut usize,
    ) -> *mut *mut BNRepository;
}
extern "C" {
    pub fn BNFreeRepositoryManagerRepositoriesList(r: *mut *mut BNRepository);
}
extern "C" {
    pub fn BNRepositoryManagerAddRepository(
        r: *mut BNRepositoryManager,
        url: *const ::std::os::raw::c_char,
        repoPath: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNRepositoryGetRepositoryByPath(
        r: *mut BNRepositoryManager,
        repoPath: *const ::std::os::raw::c_char,
    ) -> *mut BNRepository;
}
extern "C" {
    pub fn BNGetRepositoryManager() -> *mut BNRepositoryManager;
}
extern "C" {
    pub fn BNRepositoryManagerGetDefaultRepository(
        r: *mut BNRepositoryManager,
    ) -> *mut BNRepository;
}
extern "C" {
    pub fn BNNewComponentReference(component: *mut BNComponent) -> *mut BNComponent;
}
extern "C" {
    pub fn BNFreeComponent(component: *mut BNComponent);
}
extern "C" {
    pub fn BNComponentGetContainedFunctions(
        component: *mut BNComponent,
        count: *mut usize,
    ) -> *mut *mut BNFunction;
}
extern "C" {
    pub fn BNComponentGetContainedComponents(
        component: *mut BNComponent,
        count: *mut usize,
    ) -> *mut *mut BNComponent;
}
extern "C" {
    pub fn BNComponentGetContainedDataVariables(
        component: *mut BNComponent,
        count: *mut usize,
    ) -> *mut BNDataVariable;
}
extern "C" {
    pub fn BNComponentGetReferencedDataVariables(
        component: *mut BNComponent,
        count: *mut usize,
    ) -> *mut BNDataVariable;
}
extern "C" {
    pub fn BNComponentGetReferencedDataVariablesRecursive(
        component: *mut BNComponent,
        count: *mut usize,
    ) -> *mut BNDataVariable;
}
extern "C" {
    pub fn BNComponentGetReferencedTypes(
        component: *mut BNComponent,
        count: *mut usize,
    ) -> *mut *mut BNType;
}
extern "C" {
    pub fn BNComponentGetReferencedTypesRecursive(
        component: *mut BNComponent,
        count: *mut usize,
    ) -> *mut *mut BNType;
}
extern "C" {
    pub fn BNFreeComponents(components: *mut *mut BNComponent, count: usize);
}
extern "C" {
    pub fn BNComponentFreeReferencedTypes(types: *mut *mut BNType, count: usize);
}
extern "C" {
    pub fn BNComponentGetParent(component: *mut BNComponent) -> *mut BNComponent;
}
extern "C" {
    pub fn BNComponentContainsFunction(
        component: *mut BNComponent,
        function: *mut BNFunction,
    ) -> bool;
}
extern "C" {
    pub fn BNComponentContainsComponent(
        parent: *mut BNComponent,
        component: *mut BNComponent,
    ) -> bool;
}
extern "C" {
    pub fn BNComponentContainsDataVariable(component: *mut BNComponent, address: u64) -> bool;
}
extern "C" {
    pub fn BNComponentAddFunctionReference(
        component: *mut BNComponent,
        function: *mut BNFunction,
    ) -> bool;
}
extern "C" {
    pub fn BNComponentAddComponent(parent: *mut BNComponent, component: *mut BNComponent) -> bool;
}
extern "C" {
    pub fn BNComponentAddDataVariable(component: *mut BNComponent, address: u64) -> bool;
}
extern "C" {
    pub fn BNComponentRemoveComponent(component: *mut BNComponent) -> bool;
}
extern "C" {
    pub fn BNComponentRemoveFunctionReference(
        component: *mut BNComponent,
        function: *mut BNFunction,
    ) -> bool;
}
extern "C" {
    pub fn BNComponentRemoveAllFunctions(component: *mut BNComponent);
}
extern "C" {
    pub fn BNComponentRemoveDataVariable(component: *mut BNComponent, address: u64) -> bool;
}
extern "C" {
    pub fn BNComponentAddAllMembersFromComponent(
        component: *mut BNComponent,
        fromComponent: *mut BNComponent,
    );
}
extern "C" {
    pub fn BNComponentGetGuid(component: *mut BNComponent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNComponentsEqual(a: *mut BNComponent, b: *mut BNComponent) -> bool;
}
extern "C" {
    pub fn BNComponentsNotEqual(a: *mut BNComponent, b: *mut BNComponent) -> bool;
}
extern "C" {
    pub fn BNComponentGetDisplayName(component: *mut BNComponent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNComponentGetOriginalName(component: *mut BNComponent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNComponentSetName(component: *mut BNComponent, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNComponentGetView(component: *mut BNComponent) -> *mut BNBinaryView;
}
extern "C" {
    pub fn BNLlvmServicesInit();
}
extern "C" {
    pub fn BNLlvmServicesAssemble(
        src: *const ::std::os::raw::c_char,
        dialect: ::std::os::raw::c_int,
        triplet: *const ::std::os::raw::c_char,
        codeModel: ::std::os::raw::c_int,
        relocMode: ::std::os::raw::c_int,
        outBytes: *mut *mut ::std::os::raw::c_char,
        outBytesLen: *mut ::std::os::raw::c_int,
        err: *mut *mut ::std::os::raw::c_char,
        errLen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNLlvmServicesAssembleFree(
        outBytes: *mut ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNDeleteFile(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNDeleteDirectory(
        path: *const ::std::os::raw::c_char,
        contentsOnly: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BNCreateDirectory(
        path: *const ::std::os::raw::c_char,
        createSubdirectories: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNPathExists(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn BNGetParentPath(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNIsPathDirectory(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn BNIsPathRegularFile(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn BNFileSize(path: *const ::std::os::raw::c_char, size: *mut u64) -> bool;
}
extern "C" {
    pub fn BNRenameFile(
        source: *const ::std::os::raw::c_char,
        dest: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNCopyFile(
        source: *const ::std::os::raw::c_char,
        dest: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetFileName(path: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetFileExtension(path: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNGetFilePathsInDirectory(
        path: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNAppendPath(
        path: *const ::std::os::raw::c_char,
        part: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNFreePath(path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNCreateSettings(schemaId: *const ::std::os::raw::c_char) -> *mut BNSettings;
}
extern "C" {
    pub fn BNNewSettingsReference(settings: *mut BNSettings) -> *mut BNSettings;
}
extern "C" {
    pub fn BNFreeSettings(settings: *mut BNSettings);
}
extern "C" {
    pub fn BNLoadSettingsFile(
        settings: *mut BNSettings,
        fileName: *const ::std::os::raw::c_char,
        scope: BNSettingsScope,
        view: *mut BNBinaryView,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetResourceId(
        settings: *mut BNSettings,
        resourceId: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BNSettingsRegisterGroup(
        settings: *mut BNSettings,
        group: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsRegisterSetting(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        properties: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsContains(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsIsEmpty(settings: *mut BNSettings) -> bool;
}
extern "C" {
    pub fn BNSettingsKeysList(
        settings: *mut BNSettings,
        inoutSize: *mut usize,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsQueryPropertyStringList(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        inoutSize: *mut usize,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsUpdateProperty(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateBoolProperty(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateDoubleProperty(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: f64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateInt64Property(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: i64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateUInt64Property(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateStringProperty(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsUpdateStringListProperty(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: *mut *const ::std::os::raw::c_char,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsDeserializeSchema(
        settings: *mut BNSettings,
        schema: *const ::std::os::raw::c_char,
        scope: BNSettingsScope,
        merge: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSerializeSchema(settings: *mut BNSettings) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNDeserializeSettings(
        settings: *mut BNSettings,
        contents: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
    ) -> bool;
}
extern "C" {
    pub fn BNSerializeSettings(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsReset(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsResetAll(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        schemaOnly: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsGetBool(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsGetDouble(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> f64;
}
extern "C" {
    pub fn BNSettingsGetInt64(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> i64;
}
extern "C" {
    pub fn BNSettingsGetUInt64(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> u64;
}
extern "C" {
    pub fn BNSettingsGetString(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsGetStringList(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
        inoutSize: *mut usize,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsGetJson(
        settings: *mut BNSettings,
        key: *const ::std::os::raw::c_char,
        view: *mut BNBinaryView,
        scope: *mut BNSettingsScope,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSettingsSetBool(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: bool,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetDouble(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: f64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetInt64(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: i64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetUInt64(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetString(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetStringList(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: *mut *const ::std::os::raw::c_char,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNSettingsSetJson(
        settings: *mut BNSettings,
        view: *mut BNBinaryView,
        scope: BNSettingsScope,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNNewMetadataReference(data: *mut BNMetadata) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataBooleanData(data: bool) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataStringData(data: *const ::std::os::raw::c_char) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataUnsignedIntegerData(data: u64) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataSignedIntegerData(data: i64) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataDoubleData(data: f64) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataOfType(type_: BNMetadataType) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataRawData(data: *const u8, size: usize) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataArray(data: *mut *mut BNMetadata, size: usize) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataValueStore(
        keys: *mut *const ::std::os::raw::c_char,
        values: *mut *mut BNMetadata,
        size: usize,
    ) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataBooleanListData(data: *mut bool, size: usize) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataUnsignedIntegerListData(data: *mut u64, size: usize) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataSignedIntegerListData(data: *mut i64, size: usize) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataDoubleListData(data: *mut f64, size: usize) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNCreateMetadataStringListData(
        data: *mut *const ::std::os::raw::c_char,
        size: usize,
    ) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNMetadataIsEqual(lhs: *mut BNMetadata, rhs: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataSetValueForKey(
        data: *mut BNMetadata,
        key: *const ::std::os::raw::c_char,
        md: *mut BNMetadata,
    ) -> bool;
}
extern "C" {
    pub fn BNMetadataGetForKey(
        data: *mut BNMetadata,
        key: *const ::std::os::raw::c_char,
    ) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNMetadataArrayAppend(data: *mut BNMetadata, md: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataRemoveKey(data: *mut BNMetadata, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNMetadataSize(data: *mut BNMetadata) -> usize;
}
extern "C" {
    pub fn BNMetadataGetForIndex(data: *mut BNMetadata, index: usize) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNMetadataRemoveIndex(data: *mut BNMetadata, index: usize);
}
extern "C" {
    pub fn BNFreeMetadataArray(data: *mut *mut BNMetadata);
}
extern "C" {
    pub fn BNFreeMetadataValueStore(data: *mut BNMetadataValueStore);
}
extern "C" {
    pub fn BNFreeMetadata(data: *mut BNMetadata);
}
extern "C" {
    pub fn BNFreeMetadataRaw(data: *mut u8);
}
extern "C" {
    pub fn BNFreeMetadataBooleanList(arg1: *mut bool, arg2: usize);
}
extern "C" {
    pub fn BNFreeMetadataUnsignedIntegerList(arg1: *mut u64, arg2: usize);
}
extern "C" {
    pub fn BNFreeMetadataSignedIntegerList(arg1: *mut i64, arg2: usize);
}
extern "C" {
    pub fn BNFreeMetadataDoubleList(arg1: *mut f64, arg2: usize);
}
extern "C" {
    pub fn BNFreeMetadataStringList(arg1: *mut *mut ::std::os::raw::c_char, arg2: usize);
}
extern "C" {
    pub fn BNMetadataGetBoolean(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataGetString(data: *mut BNMetadata) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNMetadataGetUnsignedInteger(data: *mut BNMetadata) -> u64;
}
extern "C" {
    pub fn BNMetadataGetSignedInteger(data: *mut BNMetadata) -> i64;
}
extern "C" {
    pub fn BNMetadataGetDouble(data: *mut BNMetadata) -> f64;
}
extern "C" {
    pub fn BNMetadataGetBooleanList(data: *mut BNMetadata, arg1: *mut usize) -> *mut bool;
}
extern "C" {
    pub fn BNMetadataGetStringList(
        data: *mut BNMetadata,
        arg1: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNMetadataGetUnsignedIntegerList(data: *mut BNMetadata, arg1: *mut usize) -> *mut u64;
}
extern "C" {
    pub fn BNMetadataGetSignedIntegerList(data: *mut BNMetadata, arg1: *mut usize) -> *mut i64;
}
extern "C" {
    pub fn BNMetadataGetDoubleList(data: *mut BNMetadata, arg1: *mut usize) -> *mut f64;
}
extern "C" {
    pub fn BNMetadataGetRaw(data: *mut BNMetadata, size: *mut usize) -> *mut u8;
}
extern "C" {
    pub fn BNMetadataGetArray(data: *mut BNMetadata, size: *mut usize) -> *mut *mut BNMetadata;
}
extern "C" {
    pub fn BNMetadataGetValueStore(data: *mut BNMetadata) -> *mut BNMetadataValueStore;
}
extern "C" {
    pub fn BNMetadataGetType(data: *mut BNMetadata) -> BNMetadataType;
}
extern "C" {
    pub fn BNMetadataIsBoolean(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsString(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsUnsignedInteger(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsSignedInteger(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsDouble(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsBooleanList(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsStringList(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsUnsignedIntegerList(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsSignedIntegerList(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsDoubleList(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsRaw(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsArray(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNMetadataIsKeyValueStore(data: *mut BNMetadata) -> bool;
}
extern "C" {
    pub fn BNBinaryViewStoreMetadata(
        view: *mut BNBinaryView,
        key: *const ::std::os::raw::c_char,
        value: *mut BNMetadata,
        isAuto: bool,
    );
}
extern "C" {
    pub fn BNBinaryViewQueryMetadata(
        view: *mut BNBinaryView,
        key: *const ::std::os::raw::c_char,
    ) -> *mut BNMetadata;
}
extern "C" {
    pub fn BNBinaryViewRemoveMetadata(view: *mut BNBinaryView, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNBinaryViewGetLoadSettingsTypeNames(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNBinaryViewGetLoadSettings(
        view: *mut BNBinaryView,
        typeName: *const ::std::os::raw::c_char,
    ) -> *mut BNSettings;
}
extern "C" {
    pub fn BNBinaryViewSetLoadSettings(
        view: *mut BNBinaryView,
        typeName: *const ::std::os::raw::c_char,
        settings: *mut BNSettings,
    );
}
extern "C" {
    pub fn BNNewRelocationReference(reloc: *mut BNRelocation) -> *mut BNRelocation;
}
extern "C" {
    pub fn BNFreeRelocation(reloc: *mut BNRelocation);
}
extern "C" {
    pub fn BNRelocationGetInfo(reloc: *mut BNRelocation) -> BNRelocationInfo;
}
extern "C" {
    pub fn BNRelocationGetArchitecture(reloc: *mut BNRelocation) -> *mut BNArchitecture;
}
extern "C" {
    pub fn BNRelocationGetTarget(reloc: *mut BNRelocation) -> u64;
}
extern "C" {
    pub fn BNRelocationGetReloc(reloc: *mut BNRelocation) -> u64;
}
extern "C" {
    pub fn BNRelocationGetSymbol(reloc: *mut BNRelocation) -> *mut BNSymbol;
}
extern "C" {
    pub fn BNCreateSegment(
        start: u64,
        length: u64,
        dataOffset: u64,
        dataLength: u64,
        flags: u32,
        autoDefined: bool,
    ) -> *mut BNSegment;
}
extern "C" {
    pub fn BNNewSegmentReference(seg: *mut BNSegment) -> *mut BNSegment;
}
extern "C" {
    pub fn BNFreeSegment(seg: *mut BNSegment);
}
extern "C" {
    pub fn BNSegmentGetRelocationRanges(segment: *mut BNSegment, count: *mut usize)
        -> *mut BNRange;
}
extern "C" {
    pub fn BNSegmentGetRelocationsCount(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetRelocationRangesAtAddress(
        segment: *mut BNSegment,
        addr: u64,
        count: *mut usize,
    ) -> *mut BNRange;
}
extern "C" {
    pub fn BNSegmentRangeContainsRelocation(
        segment: *mut BNSegment,
        addr: u64,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeRelocationRanges(ranges: *mut BNRange);
}
extern "C" {
    pub fn BNSegmentGetStart(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetLength(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetEnd(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetDataEnd(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetDataOffset(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetDataLength(segment: *mut BNSegment) -> u64;
}
extern "C" {
    pub fn BNSegmentGetFlags(segment: *mut BNSegment) -> u32;
}
extern "C" {
    pub fn BNSegmentIsAutoDefined(segment: *mut BNSegment) -> bool;
}
extern "C" {
    pub fn BNSegmentSetLength(segment: *mut BNSegment, length: u64);
}
extern "C" {
    pub fn BNSegmentSetDataOffset(segment: *mut BNSegment, dataOffset: u64);
}
extern "C" {
    pub fn BNSegmentSetDataLength(segment: *mut BNSegment, dataLength: u64);
}
extern "C" {
    pub fn BNSegmentSetFlags(segment: *mut BNSegment, flags: u32);
}
extern "C" {
    pub fn BNNewSectionReference(section: *mut BNSection) -> *mut BNSection;
}
extern "C" {
    pub fn BNFreeSection(section: *mut BNSection);
}
extern "C" {
    pub fn BNSectionGetName(section: *mut BNSection) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSectionGetType(section: *mut BNSection) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSectionGetStart(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetLength(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetEnd(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetLinkedSection(section: *mut BNSection) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSectionGetInfoSection(section: *mut BNSection) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSectionGetInfoData(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetAlign(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetEntrySize(section: *mut BNSection) -> u64;
}
extern "C" {
    pub fn BNSectionGetSemantics(section: *mut BNSection) -> BNSectionSemantics;
}
extern "C" {
    pub fn BNSectionIsAutoDefined(section: *mut BNSection) -> bool;
}
extern "C" {
    pub fn BNCreateDataRenderer(renderer: *mut BNCustomDataRenderer) -> *mut BNDataRenderer;
}
extern "C" {
    pub fn BNNewDataRendererReference(renderer: *mut BNDataRenderer) -> *mut BNDataRenderer;
}
extern "C" {
    pub fn BNIsValidForData(
        ctxt: *mut ::std::os::raw::c_void,
        view: *mut BNBinaryView,
        addr: u64,
        type_: *mut BNType,
        typeCtx: *mut BNTypeContext,
        ctxCount: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNGetLinesForData(
        ctxt: *mut ::std::os::raw::c_void,
        view: *mut BNBinaryView,
        addr: u64,
        type_: *mut BNType,
        prefix: *const BNInstructionTextToken,
        prefixCount: usize,
        width: usize,
        count: *mut usize,
        typeCtx: *mut BNTypeContext,
        ctxCount: usize,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNRenderLinesForData(
        data: *mut BNBinaryView,
        addr: u64,
        type_: *mut BNType,
        prefix: *const BNInstructionTextToken,
        prefixCount: usize,
        width: usize,
        count: *mut usize,
        typeCtx: *mut BNTypeContext,
        ctxCount: usize,
    ) -> *mut BNDisassemblyTextLine;
}
extern "C" {
    pub fn BNFreeDataRenderer(renderer: *mut BNDataRenderer);
}
extern "C" {
    pub fn BNGetDataRendererContainer() -> *mut BNDataRendererContainer;
}
extern "C" {
    pub fn BNRegisterGenericDataRenderer(
        container: *mut BNDataRendererContainer,
        renderer: *mut BNDataRenderer,
    );
}
extern "C" {
    pub fn BNRegisterTypeSpecificDataRenderer(
        container: *mut BNDataRendererContainer,
        renderer: *mut BNDataRenderer,
    );
}
extern "C" {
    pub fn BNParseExpression(
        view: *mut BNBinaryView,
        expression: *const ::std::os::raw::c_char,
        offset: *mut u64,
        here: u64,
        errorString: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeParseError(errorString: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetCurrentStackTraceString() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRegisterObjectRefDebugTrace(
        typeName: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BNUnregisterObjectRefDebugTrace(
        typeName: *const ::std::os::raw::c_char,
        trace: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNGetMemoryUsageInfo(count: *mut usize) -> *mut BNMemoryUsageInfo;
}
extern "C" {
    pub fn BNFreeMemoryUsageInfo(info: *mut BNMemoryUsageInfo, count: usize);
}
extern "C" {
    pub fn BNGetAddressRenderedWidth(addr: u64) -> u32;
}
extern "C" {
    pub fn BNRustSimplifyStrToFQN(
        arg1: *const ::std::os::raw::c_char,
        arg2: bool,
    ) -> BNQualifiedName;
}
extern "C" {
    pub fn BNRustSimplifyStrToStr(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRegisterDebugInfoParser(
        name: *const ::std::os::raw::c_char,
        isValid: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut BNBinaryView,
            ) -> bool,
        >,
        parseInfo: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut BNDebugInfo,
                arg3: *mut BNBinaryView,
                arg4: *mut BNBinaryView,
                arg5: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut ::std::os::raw::c_void,
                        arg2: usize,
                        arg3: usize,
                    ) -> bool,
                >,
                arg6: *mut ::std::os::raw::c_void,
            ) -> bool,
        >,
        context: *mut ::std::os::raw::c_void,
    ) -> *mut BNDebugInfoParser;
}
extern "C" {
    pub fn BNUnregisterDebugInfoParser(rawName: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BNGetDebugInfoParserByName(
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNDebugInfoParser;
}
extern "C" {
    pub fn BNGetDebugInfoParsers(count: *mut usize) -> *mut *mut BNDebugInfoParser;
}
extern "C" {
    pub fn BNGetDebugInfoParsersForView(
        view: *mut BNBinaryView,
        count: *mut usize,
    ) -> *mut *mut BNDebugInfoParser;
}
extern "C" {
    pub fn BNGetDebugInfoParserName(parser: *mut BNDebugInfoParser) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNIsDebugInfoParserValidForView(
        parser: *mut BNDebugInfoParser,
        view: *mut BNBinaryView,
    ) -> bool;
}
extern "C" {
    pub fn BNParseDebugInfo(
        parser: *mut BNDebugInfoParser,
        view: *mut BNBinaryView,
        debugFile: *mut BNBinaryView,
        existingDebugInfo: *mut BNDebugInfo,
        progress: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
                arg3: usize,
            ) -> bool,
        >,
        progressCtxt: *mut ::std::os::raw::c_void,
    ) -> *mut BNDebugInfo;
}
extern "C" {
    pub fn BNNewDebugInfoParserReference(parser: *mut BNDebugInfoParser) -> *mut BNDebugInfoParser;
}
extern "C" {
    pub fn BNFreeDebugInfoParserReference(parser: *mut BNDebugInfoParser);
}
extern "C" {
    pub fn BNFreeDebugInfoParserList(parsers: *mut *mut BNDebugInfoParser, count: usize);
}
extern "C" {
    pub fn BNNewDebugInfoReference(debugInfo: *mut BNDebugInfo) -> *mut BNDebugInfo;
}
extern "C" {
    pub fn BNFreeDebugInfoReference(debugInfo: *mut BNDebugInfo);
}
extern "C" {
    pub fn BNGetDebugParserNames(
        debugInfo: *mut BNDebugInfo,
        count: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNRemoveDebugParserInfo(
        debugInfo: *mut BNDebugInfo,
        parserName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNRemoveDebugParserTypes(
        debugInfo: *mut BNDebugInfo,
        parserName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNRemoveDebugParserFunctions(
        debugInfo: *mut BNDebugInfo,
        parserName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNRemoveDebugParserDataVariables(
        debugInfo: *mut BNDebugInfo,
        parserName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNAddDebugType(
        debugInfo: *mut BNDebugInfo,
        name: *const ::std::os::raw::c_char,
        type_: *const BNType,
    ) -> bool;
}
extern "C" {
    pub fn BNGetDebugTypes(
        debugInfo: *mut BNDebugInfo,
        name: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> *mut BNNameAndType;
}
extern "C" {
    pub fn BNGetDebugTypeByName(
        debugInfo: *mut BNDebugInfo,
        parserName: *const ::std::os::raw::c_char,
        typeName: *const ::std::os::raw::c_char,
    ) -> *mut BNType;
}
extern "C" {
    pub fn BNGetDebugTypesByName(
        debugInfo: *mut BNDebugInfo,
        typeName: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> *mut BNNameAndType;
}
extern "C" {
    pub fn BNRemoveDebugTypeByName(
        debugInfo: *mut BNDebugInfo,
        parserName: *const ::std::os::raw::c_char,
        typeName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeDebugTypes(types: *mut BNNameAndType, count: usize);
}
extern "C" {
    pub fn BNAddDebugFunction(debugInfo: *mut BNDebugInfo, func: *mut BNDebugFunctionInfo) -> bool;
}
extern "C" {
    pub fn BNGetDebugFunctions(
        debugInfo: *mut BNDebugInfo,
        name: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> *mut BNDebugFunctionInfo;
}
extern "C" {
    pub fn BNRemoveDebugFunctionByIndex(
        debugInfo: *mut BNDebugInfo,
        parserName: *const ::std::os::raw::c_char,
        index: usize,
    ) -> bool;
}
extern "C" {
    pub fn BNFreeDebugFunctions(functions: *mut BNDebugFunctionInfo, count: usize);
}
extern "C" {
    pub fn BNAddDebugDataVariable(
        debugInfo: *mut BNDebugInfo,
        address: u64,
        type_: *const BNType,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNAddDebugDataVariableInfo(
        debugInfo: *mut BNDebugInfo,
        var: *const BNDataVariableAndName,
    ) -> bool;
}
extern "C" {
    pub fn BNGetDebugDataVariables(
        debugInfo: *mut BNDebugInfo,
        name: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> *mut BNDataVariableAndName;
}
extern "C" {
    pub fn BNGetDebugDataVariableByName(
        debugInfo: *mut BNDebugInfo,
        parserName: *const ::std::os::raw::c_char,
        variableName: *const ::std::os::raw::c_char,
    ) -> *mut BNDataVariableAndName;
}
extern "C" {
    pub fn BNGetDebugDataVariableByAddress(
        debugInfo: *mut BNDebugInfo,
        parserName: *const ::std::os::raw::c_char,
        address: u64,
    ) -> *mut BNDataVariableAndName;
}
extern "C" {
    pub fn BNGetDebugDataVariablesByName(
        debugInfo: *mut BNDebugInfo,
        variableName: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> *mut BNDataVariableAndName;
}
extern "C" {
    pub fn BNGetDebugDataVariablesByAddress(
        debugInfo: *mut BNDebugInfo,
        address: u64,
        count: *mut usize,
    ) -> *mut BNDataVariableAndNameAndDebugParser;
}
extern "C" {
    pub fn BNRemoveDebugDataVariableByAddress(
        debugInfo: *mut BNDebugInfo,
        parserName: *const ::std::os::raw::c_char,
        address: u64,
    ) -> bool;
}
extern "C" {
    pub fn BNRegisterSecretsProvider(
        name: *const ::std::os::raw::c_char,
        callbacks: *mut BNSecretsProviderCallbacks,
    ) -> *mut BNSecretsProvider;
}
extern "C" {
    pub fn BNGetSecretsProviderList(count: *mut usize) -> *mut *mut BNSecretsProvider;
}
extern "C" {
    pub fn BNFreeSecretsProviderList(providers: *mut *mut BNSecretsProvider);
}
extern "C" {
    pub fn BNGetSecretsProviderByName(
        name: *const ::std::os::raw::c_char,
    ) -> *mut BNSecretsProvider;
}
extern "C" {
    pub fn BNGetSecretsProviderName(
        provider: *mut BNSecretsProvider,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNSecretsProviderHasData(
        provider: *mut BNSecretsProvider,
        key: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNGetSecretsProviderData(
        provider: *mut BNSecretsProvider,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BNStoreSecretsProviderData(
        provider: *mut BNSecretsProvider,
        key: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNDeleteSecretsProviderData(
        provider: *mut BNSecretsProvider,
        key: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BNCreateSymbolQueue() -> *mut BNSymbolQueue;
}
extern "C" {
    pub fn BNDestroySymbolQueue(queue: *mut BNSymbolQueue);
}
extern "C" {
    pub fn BNAppendSymbolQueue(
        queue: *mut BNSymbolQueue,
        resolve: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                symbol: *mut *mut BNSymbol,
                type_: *mut *mut BNType,
            ),
        >,
        resolveContext: *mut ::std::os::raw::c_void,
        add: ::std::option::Option<
            unsafe extern "C" fn(
                ctxt: *mut ::std::os::raw::c_void,
                symbol: *mut BNSymbol,
                type_: *mut BNType,
            ),
        >,
        addContext: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BNProcessSymbolQueue(queue: *mut BNSymbolQueue);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
